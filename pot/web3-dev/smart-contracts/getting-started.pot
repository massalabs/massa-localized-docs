# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-30 00:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 87a8788dca4b45dd81533cdd7083bd6e
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: 1466ff16b586496d841c4bd2b28d35d9
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: 40380929a80a4d8c957d4758b2634abf
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 72e6c9bf30bb40f6989b7419d69e588c
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_  and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: 1d6bbc1596ac44dc956eb3c012821110
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:24
#: cf5b4223955742ad946cce82889ff971
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:26
#: 85c75650769d428597c5099536ff6214
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:29
#: d2f94d15d1a44bfcb9e3e693f0f146a8
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:31
#: 1db09925c49f4082a564d239b8af8229
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:32
#: d38af71639c643bfbf461aa223d168cc
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:33
#: 8b67a36b493044dd8485ea90a3eae3de
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:37
#: 7ff8965b69554c5297473efda4feff0e
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: bbe93855295a431ab9f746119c4a21d9
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: 7e4cbc2b386744b5acc3c4007211c832
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:57
#: 5ac03cc5b3f845ba826ee11cd449408a
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:60
#: 665d3a655ab6407b96a9b2c7eb27501f
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:62
#: 7dd3993a1e314c819ff1631d9a05c114
msgid "line 3: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract. For instance by another smart contract or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:64
#: d3d2e19880e44cc6bad21ac877323b00
msgid "line 5: `Args` class is used to deserialize arguments' bytecode (see :ref:`massa sc types <sc-types>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:65
#: ea1e5abb16474c8b954580a36fc91f26
msgid "line 7: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:67
#: e1e60a8bf2ee4a2fa3c1bf9428fc2c37
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:73
#: 39978d9f67e34774b25df7f26d7cc12d
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:77
#: 729122edd8674f439a4d22b823bef97f
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: 40e6d42d461a41158852873be55d2654
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:80
#: 52bad5a55c884f37a7d65bc87d1a0a5a
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:81
#: 89cc71d63fcc4df78a1c7ef60039e370
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:83
#: 20665f433b9a47bf8755c6af985d7412
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:87
#: 7ac2e2729dd44b64b8dc5ce088b63672
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:89
#: 070cc723f59542b0adefa2b8c928e5bd
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:91
#: 79b73ea0774d4daea9f70aacf099d926
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: 73e9210854dd4501bb1d47df83790672
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:97
#: 4671908487a5447ab46dc5b33a19cae8
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:99
#: 420c9b1626e4489094d93f492f211472
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: c52f6971902b4f36a42c1dd4c030dbfe
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:109
#: 8fd50b394f834c1a9cda97f4b5cee131
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:111
#: 7b88288ae33d4cb0802a0f74200b5452
msgid "You are now ready to deploy you smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: 8ed7e0a8f44c4a9b8a734ee8d8bb07c1
msgid "If everythings goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:136
#: 0cbcbf7dd4be4cdb807f869fa0a276c0
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts underthehood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:138
#: 527b847416fa47a886c4296091d69dde
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address. Save it somewhere, it will be used in the next step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:142
#: a9b742ca3cb24ae0b894bd11e7405c0a
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:144
#: 69ff0ae61e3846aea2bad1169b1d5442
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one. Then replace `<your contract address>` by the address of the deployed contract that you obtained in the previous step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:165
#: 23e758c45a75463eb9ae7c4aa97ab4f4
msgid "line 4: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:166
#: 21ec5afd81f74e9baef036462beb9fb9
msgid "line 9: `callHelloContract` function initialises an Address object using the address of the deployed smart contract and then calls the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:167
#: 244fb41a3b5b44d7975f14e340a05ed7
msgid "line 13: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:169
#: ece1a46b7393481f947d31a586f8eb86
msgid "Now that everything is ready, we have to build our new contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:172
#: 0ed4734a61e24029adf4e1115ed7c365
msgid "The `npm run build` command will build every smart contract in the folder `assembly/contracts`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:178
#: 2c31eaf1191149a69b60b9b12fbce9ab
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:199
#: a1eb5296d98c4f60b5e4fad40dd7e9fa
msgid "This function lets us set the smart contract to be deployed when running `npm run deploy`. It also allows us to pass arguments to the call to the `constructor` function. Let's modify the code in order to deploy our run smart contract by replacing `main.wasm` by `run.wasm`. Let's also replace the `test` string used as an argument by our name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 8d340066a0a14b0b9d741c2d1446c794
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:210
#: 425400b7d1224004a8151beafce85dd7
msgid "The output should looks like the following:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:231
#: 564ae9e5af0241af8fe1c5bdff5b80cc
msgid "That's it! After a few seconds you should see the \"Hello world! Greetings from <Name> 👋`\" message coming from the contract's event."
msgstr ""
