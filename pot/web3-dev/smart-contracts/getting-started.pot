# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-24 00:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 53d23c5ec0234d9b8618e574dff05131
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: d59c5e3fa1734c90b26cd263a87e9767
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: 33b2206b03474593a3c48356aaaf7a77
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 24d20eb6eb6c4ad58f74b86d9624cb30
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_ and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: 7a9495588cee41d3babfa956ce501905
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:25
#: 4abda8a3027d4f16a91ccca28a060167
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:28
#: d3ad09eac84b4bc98b2ce1fc73b4c4f6
msgid "Update the dependencies with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:34
#: 9f6037f07c1d42b8841cde7917aec646
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:38
#: 417b59a8c0554a618a1ddf10064e7142
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:40
#: 0bc1cd85186d4ffe8e972e64248f569e
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:41
#: 0ce88066789545f7a3b1a9e12ce5c6cf
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: 9cb56928b0e746498c46d5199525db5d
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:45
#: 8de758d5bcdb47e1bda81cc9f3d35fa5
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:47
#: e5775a2bcc08471386494dde97d0b002
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:50
#: 8f7980f2affe4440930b38f3bfd60202
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:71
#: 22d79923687a42b084bf4e64794cba93
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:74
#: 91bb50f4cac545afb852a5050089e164
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:76
#: 1622c66452e6403c8601c2b50e00acc9
msgid "line 5: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract, for instance by another smart contract, or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:78
#: feb96db3e66b407f9accc5a144d93cdb
msgid "line 6: `Args` class is used to deserialize arguments' bytecode."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: f10cca42be994e34b92830a144ddafc3
msgid "line 10: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:82
#: e0b3772d3840409a8571c92c4033a9a9
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:88
#: 6c8cb5c57cfe467da7f1fc5decf4e863
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:92
#: 58fabcb93c334a4f92dfd008bb48f020
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:94
#: d73a6f3096504c0bacd53834d05c883b
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:95
#: ff76721e2e46489f91a3f3ecc1579c66
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: 292ba4f317eb48f983d22b0a997707ce
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:98
#: 7b13a533f4514f53a8fb23c6963cf064
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: 6582232a23e44240ab4a59c60ddf1eb0
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:104
#: 91d32732b0254621a43160b7ee7fb04d
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:106
#: b5421aafd6e24d8d8b2ecf50d853ec20
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:112
#: 8523428685fd4947bb6db9915122f146
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:113
#: 2135e84dfb634a0db84eb4a51772cb66
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:115
#: 25f2d59e20a04962b2a9d60a1c473068
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: c8dec39c987c4814b6d2b8d96641f4f6
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env.example` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:124
#: 597d72037f714203bfda590a2e4ad79e
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:126
#: 1288d7306d9f4ac08085886058c1e2be
msgid "You are now ready to deploy your smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:132
#: 3d28524ab07f421fae77b2d84ae1f197
msgid "This command will use the node defined in the `JSON_RPC_URL_PUBLIC` variable of your `.env` file to deploy your smart contract. If everything goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:155
#: 93268b4fba484392a60612865d8159bc
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts under the hood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:158
#: 5525981b6a714facb482b2399c3a94d1
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:161
#: d890be7fad2f4173968f4fabdd704dd7
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:163
#: 9193942e0a8d4fe09a0dfe2dd82e867d
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:203
#: 2e58c709e2854b03b88e2267177e8675
msgid "line 7: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 68f13ae35e3d4604ad1003fd86a1cf8f
msgid "line 10: we ensure that the caller of this function has the right access on the smart contract. Only the deployer has it. This way, we are sure that the constructor can only be called at the deployment."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:206
#: 0a3bbd48ec234fd1a73d9b4ad089b6b6
msgid "line 21: `callHelloContract` function the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:207
#: aa5c036e227c4515bd6066cea0fb9718
msgid "line 26: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:209
#: 11e226a87cde447f8568135d1e1ee138
msgid "The constructor of this contract expect 1 argument in binary format. This argument is the encoded version of 2 values:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:211
#: 268f84132587480cbea9a26161b9898f
msgid "the address of the `main.ts` smart contract,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:212
#: 1b152f922b674cb09358d8c11de8be0f
msgid "the name to pass to the `sayHello` function of that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:214
#: de7a5618f3cc480c8e0fea11c33894e0
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:216
#: 97a8ce03308b4d72925be5e4c4a4a6c2
msgid "Modify the line 26:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:222
#: 4946582a7644426aacf8fbffddb6bdcf
msgid "Add the import of IEvent at the beginning of the file."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:228
#: a8d3ef66b847435f83f631e42e7dff10
msgid "Add this code snippet after the call to the `deploySC` function:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:251
#: 13e5610ed044484f8117d393e31db99c
msgid "The function `deploySC` lets us set the smart contract to be deployed when running `npm run deploy`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:253
#: c45ca6d8b85345719dee71b9af46130e
msgid "line 50: we specify the arguments to pass to the `constructor` function. Let's also `Bob` used as an argument by your name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:256
#: 33347068ffbe4ad0972fc92bb033df48
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:262
#: cf968438a8964afc980cd17f0c042250
msgid "The output should looks like the following:"
msgstr ""
