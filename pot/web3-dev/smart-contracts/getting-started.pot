# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-22 00:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 230227fd8e2a4b3997fc4cf643b600d0
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: 5310e6ac410f43d58540ac48e7426998
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: a9e550d43f7f4a709b99d9ba634d5288
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 172b86d1ba064043b8d1574d19b6c395
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_  and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: 6491e8ac9e494bc4be4b8a5da88dd654
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:24
#: ef9bb3c00d814410917289e27a5bf58f
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:26
#: 6e1449051e6c47209b05923ffd5cf6cf
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:29
#: b2f210eec7ab4ea28839725e08dba51b
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:31
#: 0cc9cb60a21741b9ae8916ec2a348135
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:32
#: d9d74e001cf542eebee4099e479efeb8
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:33
#: 97e92635c48141ffb5db08678620825d
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:37
#: c068c852a8e84c53b81b2883b6f3d3fc
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: 413dbe4545b249fb9854e788e305cfd9
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: 0696be64549e4781b4265015b1318930
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:57
#: 2d5c6fd8a1ce48e6a9abd515c173db56
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:60
#: 2f85d9ec3fd144458219e2fe9f9bcfb4
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:62
#: 53b089bae2c74217a6f25377ea2ee806
msgid "line 3: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract. For instance by another smart contract or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:64
#: dc6093fd38384d42a8f94edb2f43e43b
msgid "line 5: `Args` class is used to deserialize arguments' bytecode (see :ref:`massa sc types <sc-types>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:65
#: f61de9a1b6d54d19ab7c4762b768172d
msgid "line 7: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:67
#: 142ba6ac625c40dcb39d3b425d2d7de1
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:73
#: 699e5695dbe245f8b3955ee9a69f8f2d
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:77
#: 8756b9cf3ed947e1b4449c6bc8075b2a
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: 532e783628604132905112dabbd4497b
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:80
#: 7fa379974bed4d96af12bf34382d87bd
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:81
#: 42f15d7e90e945d1900308dc54804323
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:83
#: 57194e961a7c4779873c8c9d47cae74a
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:87
#: 4864816271ac4e7090f67ac7fb725a23
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:89
#: cefda0ac285a465ea2fdd60fc7715aa9
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:91
#: cdd98af586874a468e4c3a5855bcc3d8
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: deecebfad042493fbf88a08a7ae633d0
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:97
#: d16b575698f34367b569c193dd289f77
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:99
#: c41bc32546fe4a94be46030bb8ad1fad
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: 186075dd733e48aa8eae8dc17b52a83b
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:109
#: d356d86fbebb412492f0c41d642a4e8b
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:111
#: cec9d96bbe7543a9a32a8c72dd34dab5
msgid "You are now ready to deploy you smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: ad26069f2063409096154d3ba17e973c
msgid "If everythings goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:136
#: d1f66c42ced34eafb5a65f797a1cf335
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts underthehood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:138
#: ff551335cf774605aa76f2c58fb0d419
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address. Save it somewhere, it will be used in the next step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:142
#: 2a30ec5a9a1d4bde8f17eded6e3922ef
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:144
#: 6addd652bcb8450b8bba188a76be7b22
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one. Then replace `<your contract address>` by the address of the deployed contract that you obtained in the previous step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:165
#: 3ae0f884df9f4f3f9b65ce2a135f78d3
msgid "line 4: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:166
#: ac139a3b72fb49769db1eab98f11bd30
msgid "line 9: `callHelloContract` function initialises an Address object using the address of the deployed smart contract and then calls the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:167
#: 0b8745b093294c54a6d28308fe981435
msgid "line 13: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:169
#: 611f69af6c2b4d4e9182a9e4056de66d
msgid "Now that everything is ready, we have to build our new contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:172
#: 1bcf46e0a8fd46418a4dee91bd24399a
msgid "The `npm run build` command will build every smart contract in the folder `assembly/contracts`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:178
#: dff8e440c52041a1954c87b6c200d232
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:199
#: 989e5c1f94a648b5b80ef494b6d0938f
msgid "This function lets us set the smart contract to be deployed when running `npm run deploy`. It also allows us to pass arguments to the call to the `constructor` function. Let's modify the code in order to deploy our run smart contract by replacing `main.wasm` by `run.wasm`. Let's also replace the `test` string used as an argument by our name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 8d91dce58b004467bccdf3f383db23e2
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:210
#: 08799b241b4a4b8ea74f8b61eba4ee70
msgid "The output should looks like the following:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:231
#: 046f84003a3846bdb4ffd7b5aa5a4cd8
msgid "That's it! After a few seconds you should see the \"Hello world! Greetings from <Name> 👋`\" message coming from the contract's event."
msgstr ""
