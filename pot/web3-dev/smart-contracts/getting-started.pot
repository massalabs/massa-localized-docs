# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 00:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 908b1452d05a42fea851f92fe9791f0e
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: e94831dd2e374b348bc71be481e37a88
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: 8429229ad3fb432a88ea69c8ca2332e2
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 41a7b33c8eca4389a453794e9b1c35dc
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_  and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: b0c674ff37c3401fa7fc2f78e10409d3
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:24
#: 93aca4d806ba45b28c4025229f867983
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:26
#: ce432be2d87d4029a5cad80a168ead1b
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:29
#: d275b4c9238748e4ae861a07a3a6a873
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:31
#: 1e1972c32241484c847c18dbe29aa79f
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:32
#: db0844a34e004e76bae08eba12f47376
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:33
#: d6523f008745496e93c41562d6a938bc
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:37
#: c2f2b6117d0e4f5a9d2ec5aaa8d22e31
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: 597d13f84592414c9d64141cfd132b8c
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: 8db69ba2a1844848af42626ce9c9876f
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:57
#: 5903eb10a2b348cba9b1354b3233390d
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:60
#: 5ae4751158e94f23b98468c94a61a41b
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:62
#: 12f1b7414f384f3586ec7aea1b65c2d5
msgid "line 3: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract. For instance by another smart contract or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:64
#: 5ee5753063b34004a3e36d7d3a9f70a8
msgid "line 5: `Args` class is used to deserialize arguments' bytecode (see :ref:`massa sc types <sc-types>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:65
#: 938e7212367f4d75aafdcf39b1719940
msgid "line 7: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:67
#: 90b89ea994e04e3e939e80fe2e5af1fb
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:73
#: 549daf208c984691ae703cc866d55141
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:77
#: c9437ddfc6ba4b3cb609ca5a5c96eef7
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: 7919cee71d46468692f374b79b3d0581
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:80
#: 0afa742096b549d4aa9196c5361087d0
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:81
#: d4788420099f49488455f01e0d53ffe9
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:83
#: 9a0dce6660304cd2a776720556f83e6c
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:87
#: 6f28d3c2abf74a108d491b179e497ce1
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:89
#: f121649581b04c038f00d4ef857e3db5
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:91
#: 342c5e662e2c409aa102a598ca1f357e
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: ea4b5c5fb18d44578e9c1147ddaf4259
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:97
#: e966d60e66c14d82bff228d96514a9e9
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:99
#: ecd9ad20b6c841da9609a9475518b4e2
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: 3715aad0af7044ab851eb33792381a90
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:109
#: f0608de873f64d29a15cac79f0912aaa
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:111
#: 76f4dda2349242bcacc5d7a77ef3e0ec
msgid "You are now ready to deploy you smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: 516d2f1a2c4846f6ac44c4f65469c294
msgid "If everythings goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:136
#: 40604bd0905647eb9c93fb751f09462b
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts underthehood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:138
#: 3fe63ba1276a4e0fb3f73241992763f1
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address. Save it somewhere, it will be used in the next step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:142
#: 6ae2d8edffa84e689f17d176d3f92663
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:144
#: 8df7c2f3b3be4046b277cc7023c2fcaf
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one. Then replace `<your contract address>` by the address of the deployed contract that you obtained in the previous step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:165
#: 3f3266efe15d4e41a21572f8c2585250
msgid "line 4: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:166
#: 4e5be4dce2bc4415a4bcf0a3a8a2983a
msgid "line 9: `callHelloContract` function initialises an Address object using the address of the deployed smart contract and then calls the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:167
#: f5cc93699ff4488b88b16e766496ce7e
msgid "line 13: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:169
#: 32aea0dd57fa4916ad3ae69dfcd9b5c3
msgid "Now that everything is ready, we have to build our new contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:172
#: 39b5f06ec33e46b7a0fd3180cec2ce9f
msgid "The `npm run build` command will build every smart contract in the folder `assembly/contracts`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:178
#: 44a161f3b0e54d069c90d6f4aeabb711
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:199
#: 441c5a0718c44783afaffdbae58ac865
msgid "This function lets us set the smart contract to be deployed when running `npm run deploy`. It also allows us to pass arguments to the call to the `constructor` function. Let's modify the code in order to deploy our run smart contract by replacing `main.wasm` by `run.wasm`. Let's also replace the `test` string used as an argument by our name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 349b58f1c76c46ffa8aac38dfbc96d84
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:210
#: 3b841e4903e6445fa6e069c73e459df1
msgid "The output should looks like the following:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:231
#: 316ec99894ab433ea4a5791019a49488
msgid "That's it! After a few seconds you should see the \"Hello world! Greetings from <Name> 👋`\" message coming from the contract's event."
msgstr ""
