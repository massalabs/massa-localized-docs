# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-29 00:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: d343b7b0ddfd41838b22dd971d8adfeb
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: bd0543f0508a4ffc9df59ccabb42b26d
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: 241885dea2a3487f81ec533fcb5cd522
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: bad834eafb8041db80b53a70f1eca50d
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_ and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: a13bbccdd7df47619fee7a0f1c9c1a4d
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:25
#: 536180931b074735844c98eb020d5482
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:28
#: c6bd2add228642c28af25a2874eda089
msgid "Update the dependencies with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:34
#: ca9583453cb04ceb9fcab986262e798e
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:38
#: 1dba9508380b4fe090775a7a9830e1be
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:40
#: f947db8dd3bf4291a8655c59cbeecce7
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:41
#: 1f1ac5a8a75049059fc2b23111bdc8e8
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: d57d1818979e49298eae266e6ad2b076
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:45
#: b9146f1a5e134792956557f88f58fcf5
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:47
#: 52d045064b4244fc97dceb594cc67bed
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:50
#: 69e96ead677549ffb173a4f113cfee30
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:71
#: 79eca63a37e44801bde71bd062c1fb4e
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:74
#: 895de8c7a8ba48d4aed768461d1b66b4
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:76
#: fc546a03e4c44b47b6c1e43ef88d7885
msgid "line 5: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract, for instance by another smart contract, or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:78
#: 9af590977b804a4e8f0d33b6f7a5a576
msgid "line 6: `Args` class is used to deserialize arguments' bytecode."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: 8ee56ecbe11a4a129f5a43f67d2c6e38
msgid "line 10: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:82
#: 61cf969630e5451fa68da46ece21d99e
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:88
#: 7525bfaac2004530b3a9dcab648ce689
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:92
#: c058523d569e48a5accf5ec8bbbb4ddc
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:94
#: af13e179b0bb458b822d92135518be2e
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:95
#: 991cc75a5a014fc1838226313323dcb8
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: a4905892c0864b2a92f439541d7de743
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:98
#: 447ce401962a479a9c1b0aac8df87317
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: cdbd0cfe1ce9440aa5df321c0dd1e2f2
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:104
#: 228a67421d6c438e99a14af8a7a6541d
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:106
#: 1fc7d903d1364e24a4a8272ba57c6641
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:112
#: b56f6ac6601c40e9ad180a0d17bb3289
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:113
#: 18696063265343c0afac83170cff5603
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:115
#: 8b3c6f6e159d4477b01928cd19c0da42
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: 95fd30ce944a4f18a390044761484293
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env.example` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:124
#: 680e8a20836e48359345667cd35bc706
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:126
#: bdf67867ce024dae9253d216da97b9fd
msgid "You are now ready to deploy your smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:132
#: 8ed25a3a49c24f058d341aa39b5104be
msgid "This command will use the node defined in the `JSON_RPC_URL_PUBLIC` variable of your `.env` file to deploy your smart contract. If everything goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:155
#: 6d6254a50a6649ddb5b7a4ba69319322
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts under the hood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:158
#: d2a05b690387404cad650b1779f11190
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:161
#: 7c19a8bfb80c480396bd64b7fadab2bc
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:163
#: ec6b21989fb84198abc05b08f46a732e
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:203
#: 5c133e5fba1b446f8758843ac6b67fcf
msgid "line 7: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 2994443a51394cec9c7e4e4faaa1dd04
msgid "line 10: we ensure that the caller of this function has the right access on the smart contract. Only the deployer has it. This way, we are sure that the constructor can only be called at the deployment."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:206
#: f31e8df34eb14529b7f5d25440691464
msgid "line 21: `callHelloContract` function the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:207
#: 558af8d69faa47b48b60fdde49a18918
msgid "line 26: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:209
#: d4356b2d62234e8087ff9923391aaf67
msgid "The constructor of this contract expect 1 argument in binary format. This argument is the encoded version of 2 values:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:211
#: 7ea81d8d4aa944adb3dd12951a10aa1e
msgid "the address of the `main.ts` smart contract,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:212
#: 6c8f3954990044519622cb1283d64863
msgid "the name to pass to the `sayHello` function of that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:214
#: 6a7a842a64b7405cb7f40f118b1fbb32
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:216
#: bc3ec751257540009205df102150320c
msgid "Modify the line 26:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:222
#: dc5751be40424cf09f76e82fe16c4163
msgid "Add the import of IEvent at the beginning of the file."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:228
#: de31d082ed344a93a6373eb14282289b
msgid "Add this code snippet after the call to the `deploySC` function:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:251
#: bcdd2330a8bb43fabc11ca5a47f4538f
msgid "The function `deploySC` lets us set the smart contract to be deployed when running `npm run deploy`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:253
#: 8bc0b387073e4c8ba1aa22e632457235
msgid "line 50: we specify the arguments to pass to the `constructor` function. Let's also `Bob` used as an argument by your name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:256
#: f3abfb9d27f642f990b32ed7e08da6b1
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:262
#: 1eb44a4ffe7246e183b8ad6dfde47a3b
msgid "The output should looks like the following:"
msgstr ""
