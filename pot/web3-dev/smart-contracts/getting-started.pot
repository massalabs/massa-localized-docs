# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-28 00:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 3d735205956c47d694fa9502e11549ae
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: f0698b31319d4d7ea2319a5cd4a86a93
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: ca49b138192540dda225f6b4333581fd
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 1bc12cdb7a074184ad018a04374f583b
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_  and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: f706e2871d534d62a4fac85e314143f5
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:24
#: 765bb33a13e64e20b2b447571bccc2e8
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:26
#: a4fd48afd0aa4c5f95b57ce44cb36ced
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:29
#: 3e9c8f82c4b74870a4820392df13131d
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:31
#: 0bab1f8af6194b639b25b31f13fc08bc
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:32
#: aa82aefe752f4cf9ab89a8cbf86f7b4f
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:33
#: 68db46cee6304bbfaa01e9f421c4f2c2
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:37
#: 88fae21303b14aae9e86452f8fc0099f
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: 4f9cf705fd8d40efbbe607b616fc2a55
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: f3145418118b478ea86280271396918e
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:57
#: 3ee88d0fd4a14ce89e4279451aba5658
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:60
#: 674b3b8b79cc4d45aad694d68a3ffadf
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:62
#: ce7d63e138374f04a51e5286950bf17c
msgid "line 3: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract. For instance by another smart contract or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:64
#: 4f072a3ac69f421bab9c8a9cb1c8237a
msgid "line 5: `Args` class is used to deserialize arguments' bytecode (see :ref:`massa sc types <sc-types>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:65
#: be5923ab41bd44cbbadb5e3438293046
msgid "line 7: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:67
#: fb5c06a06c3c4e96b1ecbc80b06b886b
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:73
#: d36e173d6d39465fbd2cf9f709ec7e2a
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:77
#: b888bc45bc034d98863a72c4f4db9a00
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: c7298c6f99374bc59ad9a49a522d4ffe
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:80
#: 9fa515d62b04467382e63fe2a6ccda41
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:81
#: bfd2d8d7bf5c4820bce2509329ce6762
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:83
#: b94d15dddb6c4b199de61ebae2035498
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:87
#: ec46de7d774c44028c6e0ed926043425
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:89
#: a987c122d2d54275917cdfcd000e345f
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:91
#: 70582a23b61b47e5b196fbcf021eeb88
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: ba1d651c44b64c9dafc3cb4d31720d28
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:97
#: b7bcb1f21cb248b4bc2114bb64a4e860
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:99
#: c6a0490b3d1742d195f0ccddf9e7fc86
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: 901587e3a8b74eebacb242bd7a3cd6b4
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:109
#: bbde8030036f4858bea476dc01ec9642
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:111
#: 85a9cfd2600542918b69537030fcf295
msgid "You are now ready to deploy you smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: 036dde3e89ae43c4b08be3a24e1b216f
msgid "If everythings goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:136
#: 9b1495e01762433c9e0be42f5df02bd9
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts underthehood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:138
#: df434fa1cb67409a8e28f6f61cddd6cc
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address. Save it somewhere, it will be used in the next step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:142
#: f8dea787367f4dd0949b3b6cd2cb42c0
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:144
#: 58e6a4094eea4fb8be4b87745314324a
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one. Then replace `<your contract address>` by the address of the deployed contract that you obtained in the previous step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:165
#: 458f5986441048638de8c5058b94e0ab
msgid "line 4: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:166
#: b6fa429f7ac4443293afcc9fa0492fa3
msgid "line 9: `callHelloContract` function initialises an Address object using the address of the deployed smart contract and then calls the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:167
#: e77bf05336424230b45a3c9674613efd
msgid "line 13: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:169
#: 4d9bbe7608b34aeb8dc246fd9a761d56
msgid "Now that everything is ready, we have to build our new contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:172
#: 041b3a2f98d642108a430f154d7e9d57
msgid "The `npm run build` command will build every smart contract in the folder `assembly/contracts`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:178
#: 6f54cd9673d745fe8c7fc3bc85000d59
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:199
#: 4a273cc7415245f9abbb897aed53ba2f
msgid "This function lets us set the smart contract to be deployed when running `npm run deploy`. It also allows us to pass arguments to the call to the `constructor` function. Let's modify the code in order to deploy our run smart contract by replacing `main.wasm` by `run.wasm`. Let's also replace the `test` string used as an argument by our name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 8b8372a4c22f426aadc5b08f42a15a03
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:210
#: 5b0214e708414487aa1a23bb2e30bd61
msgid "The output should looks like the following:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:231
#: 8b860a992ef64f3cbc3ead777ebc628c
msgid "That's it! After a few seconds you should see the \"Hello world! Greetings from <Name> 👋`\" message coming from the contract's event."
msgstr ""
