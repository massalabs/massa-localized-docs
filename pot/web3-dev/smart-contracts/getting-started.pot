# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-04 00:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 77676803a41745669a5b468ecd2c78f8
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: f4dac66c5a9146b58461b0dd3bdaf85f
msgid "In this section you will learn how to compile your first Massa smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:11
#: 27a9273b2c6e4d079e9a780125363c00
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:13
#: 4430701050e943c2a6142d57eda0b377
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_  and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:16
#: 34d7d9ae9a56443ca03dc6804e63211c
msgid "`massa-sc-toolkit <https://github.com/massalabs/massa-sc-toolkit/>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the toolkit by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:23
#: 69988c1317674722b9d276aa4889ebd4
msgid "You have now npm project created with AssemblyScript installed among other dependencies. It will be used to generate bytecode from AssemblyScript code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:27
#: f710d74dcf5c4a7ab05dcbf4c460b2b0
msgid "Massa smart-contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:30
#: c9ddd9fa205d4ea8891120447b4cbc29
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:33
#: bb34586f964a4ca7b21f1a9102ad9d7e
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:35
#: 91fed1478c0e4f82b7708919ad7fcd60
msgid "`assembly` is where the code goes;"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:36
#: 471ab6bca7b54496b7590a409737bca3
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: 41f3cb065ece4f30939c4f680cc5382e
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:41
#: a49fea35e4884411846eda458fe4148d
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:44
#: 0a1aa12754f347baa49b7d522f489358
msgid "Open the `main.ts` file in the `assembly` directory at the root of your project. Replace the code in the file by the following code:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:55
#: de3bdf99449840ecbfca0f954f46ce30
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:57
#: 80a42467cd104a65a195554072e687e7
msgid "line 1: `generateEvent` function is imported from Massa SDK (@massalabs/massa-as-sdk). This function will generate an event with the string given as argument. Events can be later recovered using a Massa client."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:60
#: 30c51a27f70e492a9d684027521eb512
msgid "line 3: `main` function is exported. This means that the main function will be callable from the outside of the WebAssembly module (more about that later)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:62
#: 4bc83f8c27f94f9ca0fec394a90add2a
msgid "line 4: `generateEvent` function is called with \"Hello world!\". Brian, we are thinking of you!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:64
#: 5fbd2940ee2947a4a34bab13081e3605
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:70
#: 8cf286cf5b1641279287b11f16b434e7
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory. Note that a `deployer.wasm` file has also been generated. It will be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:75
#: 91df2dc6fb004818863616a68dbb7fad
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:77
#: cb247c34aee54ff09129eeb32cae6ee5
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:78
#: 3b6f987bfdf644d38e3f63982abb240d
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: b4a0eb71715d488ab7c1fd7b99d275f5
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:81
#: 01aaaa4dff0744a793e7d3dcc49d6264
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:85
#: 63f983a92ba649058bd0b016d2dc2672
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:87
#: a18d4dbd45744d7580cce882ef755795
msgid "Your smart contract is now ready to be pushed and executed on the Massa network. In order to deploy it, you need to own a Massa wallet and some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:91
#: 4d76b354ce094e429976a3947e2dd976
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:92
#: 0c5b90341d2241de964b04432523010e
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:95
#: d18bc8af750a4978a5eaaae4ceb4fb53
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:97
#: f9f7a84950d045c4b5fcc355c24fe675
msgid "There are two ways you can deploy your smart contract. The easiest and the recommended way is to deploy the smart contract with the smart-contract toolkit (:ref:`Option 1 <sc-option-1>` below)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:100
#: cbed99b75aa441adb56fb15c4615332d
msgid "The second option is to deploy the smart contract, through Massa client, by running your own node (:ref:`Option 2 <sc-option-2>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:106
#: 6d39860995694af9af5d214bcffba839
msgid "Option 1: Deploy your smart contract from the toolkit"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:108
#: f2a095c421364ecb934cbae9c27bbad8
msgid "To send the transaction on the network, you need to provide your wallet's secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:115
#: da97bd05372f48f8a624a768052e0d1c
msgid "This command will create a `.env` file. Now fill it with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: c6c90ccc8c664ac9b3afafbdb6dd5670
msgid "Then run the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:123
#: e38d8c1937824604865c90324408500d
msgid "Wait for a few seconds... It should return you the deployed smart contract address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:128
#: 6709cd2c2fa641118a873ad7373a7ad8
msgid "Option 2: Execute your smart contract on your own node"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:130
#: 22290426ce5b491caa52b26e222b86b5
msgid "To execute the smart contract you will need:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:132
#: baa521c48ea54b27882fe3658bedd102
msgid "A client configured with an address having coins."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:133
#: 50824faf86a647989441bef445d1513d
msgid "A smart contract compiled in WebAssembly (see previous step)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:135
#: 64aae57479c5496b82f8ed5827f1ae63
msgid "Let's go!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:138
#: 98b17fd1b9904b7c971646d70037680d
msgid "Configure the client"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:140
#: 7ecceaaa05714ccc92d56d931bc63591
msgid "Make sure that you have the latest version of the Massa node. If not, :ref:`install it <testnet-install>` and :ref:`run it <testnet-running>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:145
#: c8bd922d806a4480b8e9b3b56b914526
msgid "You can also execute your smart-contract on a local sandbox node. To learn more about sandbox node, follow this tutorial: :ref:`Local network generation <local-network-generation>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:150
#: bd935cc7bf9345f38a925cf912a137bb
msgid "Execute the smart contract on the node"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:152
#: 5012fc3a47304a919a29fa84f9ccd43e
msgid "Everything is in place, we can now execute the `hello world` smart contract on your local node with the following command inside the **client cli**:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:161
#: 3400eb404cc840969427383f0ef447a4
msgid "We are executing the send_smart_contract command with 6 parameters:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:163
#: a16f6c945fba45b99edd32a3a67cebce
msgid "<address>: the address of your wallet kept during previous step;"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:164
#: b55e4e98717d4511bac64dc7a1a5b9ed
msgid "<path to wasm file>: the full path (from the root directory to the file extension .wasm) of the hello smart contract, generated in the previous chapter."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:166
#: 509097a9f86243449f6a211271e7e385
msgid "100000: the maximum amount of gas that the execution of your smart contract is allowed to use."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:167
#: 25894af2656b41ec98f7fad99d6f846f
msgid "Two 0 parameters that can be safely ignored by now. If you want more info on them, use the command `help send_smart_contract`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:172
#: 4dee2dc4888b4812b9805862249add80
msgid "To go inside the **client cli**, open a terminal in `massa/massa-client` directory and run `cargo run`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:174
#: 5431954b37d04a6cb2e20d16eb790889
msgid "If everything went fine, the following message should be prompted:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:181
#: caf35613302646d5a876ff808b281d9e
msgid "In that case, you should be able to retrieve the event with the `Hello world` emitted. Use the following command inside the **client cli**:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:188
#: 3541ea340a5144918671ce3bf41e087d
msgid "If everything went well you should see a message similar to this one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:200
#: 51c838516a4544d1a669eccc62986439
msgid "Congratulations! You have just executed your first smart contract!"
msgstr ""
