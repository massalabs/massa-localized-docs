# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-12 00:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: d8310553b50b4439926ebdb55238daaa
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: b694253b016b4dd6b88843523d384689
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: fca9784e65804e94842ac899927f9a03
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 5bf1314fc9514ca2994669cef8e4f1cf
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_ and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: 43599a11a8b04b41b73bab5b6c45423f
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:25
#: d43a06854d994231aa9ae16d8151a343
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:28
#: 9fefde85d5f241a29cbacc6f69d94def
msgid "Update the dependencies with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:34
#: 853f64261df54c88a27f64e989757705
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:38
#: c210d1ba69f0476b846f878fbcd467de
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:40
#: bede462276814e9fb27f3109f639ad35
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:41
#: af13508a985d4a3e874c2cb50d1b5888
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: df5ea2d9e04a4bb6b4836520248b6e5a
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:45
#: ce8a6e364c214e838643e0c99d9d736e
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:47
#: 702965113fee445299c535afbf90617d
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:50
#: 9caea35f7d434663b934161f046b157d
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:71
#: ca5acfa8319f4d498fa580226a598913
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:74
#: 78e16433577b477aafeb7f31415c6908
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:76
#: 89a1bd3ea8fa4b5487666764ab301a7b
msgid "line 5: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract, for instance by another smart contract, or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:78
#: 3930b68a896142ef9f3b0771b8bcb5be
msgid "line 6: `Args` class is used to deserialize arguments' bytecode."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: 3b3ef529d3654c16b35522b58a6258f5
msgid "line 10: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:82
#: ba508eb400434e97bd1a9e275a1310cb
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:88
#: b6dbf88b7a844e79b619282509f6dfcf
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:92
#: 08a25fbf7b944bb684b4f38c144d02f0
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:94
#: 96cf2a3a838c4496904b371a359ac508
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:95
#: f48274a2947a4ca9ba6303ff175971b5
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: a578377c34ec4231a8a2841941cc1206
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:98
#: 55b3f9d1909e4f698a5e74d27c3a4c88
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: 0ab982883e88455aace4caadcedb4394
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:104
#: 52ffd5b5b41a4a019c93b9190cce8c6e
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:106
#: 09b934b05b244d04a2c0e7990477ada1
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:112
#: 54293ae231044209abcce8efaba112fb
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:113
#: 4977293159ab4deb87725cec8b3dc98a
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:115
#: d19955a13ead4adaa99b79d9ee2ec6dd
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: 5433892b5a37447690a02cc496e269f5
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env.example` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:124
#: 700a143cc9e6417b90a4ae3547d03566
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:126
#: 32692e78a273473daab013dc6ecea534
msgid "You are now ready to deploy your smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:132
#: e87e376f2b3b481b97c4092cda8e6fe4
msgid "This command will use the node defined in the `JSON_RPC_URL_PUBLIC` variable of your `.env` file to deploy your smart contract. If everything goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:155
#: 7057f751b3884a809dd168660336acba
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts under the hood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:158
#: bb2a285973034f51ab594f02dfbdde10
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:161
#: 5c9b64ffd18246788facbef4c7ee14aa
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:163
#: 073a89ee36254a0688190717d0bee9ea
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:203
#: d3f49b8ea5c540419ec1e0ed44364b0a
msgid "line 7: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: 4c8917aae4c84c69ad1ba850a9798555
msgid "line 10: we ensure that the caller of this function has the right access on the smart contract. Only the deployer has it. This way, we are sure that the constructor can only be called at the deployment."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:206
#: aec4c292ebcf449c9c68f41b352599a0
msgid "line 21: `callHelloContract` function the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:207
#: e26f0d09e2184ee8bf95845b3905357e
msgid "line 26: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:209
#: 23d87e000f05408db69b9d5c7b0522d8
msgid "The constructor of this contract expect 1 argument in binary format. This argument is the encoded version of 2 values:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:211
#: b7985620f1a947d1adfc55528fda51e1
msgid "the address of the `main.ts` smart contract,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:212
#: c81237decd36475bae9e9ee8996a9ad4
msgid "the name to pass to the `sayHello` function of that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:214
#: 777083cccadc4571ac7f3b255c99a630
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:216
#: 36a31aa3aa474f0a9bd8ecc1fdc7ecaa
msgid "Modify the line 26:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:222
#: 9e56dcbfa1d24d2c9fe16adf19c105cb
msgid "Add the import of IEvent at the beginning of the file."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:228
#: dae5410a76574cce80f63359c7489f5b
msgid "Add this code snippet after the call to the `deploySC` function:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:251
#: 6db9095121344b318ceea1aafd03c9e6
msgid "The function `deploySC` lets us set the smart contract to be deployed when running `npm run deploy`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:253
#: 6d39e0f6a45440de83c6aa1a753db2c3
msgid "line 50: we specify the arguments to pass to the `constructor` function. Let's also `Bob` used as an argument by your name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:256
#: 236bf1330fd348c087553d5ba543a96a
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:262
#: efd199ddb10e4088a22ef3b4af2c0283
msgid "The output should looks like the following:"
msgstr ""
