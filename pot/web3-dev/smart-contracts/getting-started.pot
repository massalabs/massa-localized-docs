# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-25 00:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: 5e0baed7fb7942fcaab7eb9de55c0fb9
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: 57acd32059244fe58fe004fa0fec3e6b
msgid "In this section you will learn how to set up your smart-contract development environment, how to deploy your first Massa smart contract, and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: c80696379bbc4172bbb49772a3e5f423
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: 42a0c9bf266c4c7d94bdaaf016ad90fb
msgid "Make sure you have a recent version of `Node.js <https://nodejs.org/>`_  and `npm <https://www.npmjs.com/>`_. Update or `install <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: 04a8af5f1ee4427c9cd5846219976080
msgid "`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that creates a boilerplate smart-contract project. To create a smart-contract project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:24
#: 33969683f8f044d5a4dea90f91c88092
msgid "You now have a npm project, created in `my-sc` folder. It contains all tools that will be used to compile AssemblyScript to Wasm bytecode, as well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:26
#: a8da5980753b40faa20e75ee4a256138
msgid "Congratulations! Now you have a fully set up project and you are ready to add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:29
#: 7eb6283a2a0540d685b34d8badd9c5ef
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:31
#: 950072fa9ec748f89753a2a617812f79
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:32
#: c7178a0a5e8a46bc8b1043e556f453c9
msgid "`build` will be created during compilation and will contain compiled smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:33
#: 0485a579c85e407791137b7f0708fe73
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:37
#: 7fb720fb24b44a52bb71a1f3417bc505
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: 92d03a26969d4b7889b5380986ea5a4a
msgid "Since the beginning of mankind, humans explain how to use a program, a new language, a service by implementing a *Hello world!*. Your first smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:42
#: 3cf35ba306e84a0ea21d3d7ba2a7ab37
msgid "Open the `assembly/contracts/main.ts` file and replace its content by the following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:57
#: c0d4fbb27c1149b087aa47d4d2834d37
msgid "Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API you need to use to interact with the external world of the smart contract (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:60
#: 1d0834a3be9742248ae3a786a22aa7ea
msgid "Don't forget to save the file. Before starting compilation, just a few words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:62
#: bcc669057bee4a208dd5d0b229c90e65
msgid "line 3: `sayHello` function is exported. This means that the `sayHello` function can be called from outside of the smart contract. For instance by another smart contract or through the API (see :ref:`massa-web3 <web3-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:64
#: dad8440a93ed467b8e4f04d720715336
msgid "line 5: `Args` class is used to deserialize arguments' bytecode (see :ref:`massa sc types <sc-types>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:65
#: ee365b08b4834f4393ef3fd8198c4d36
msgid "line 7: `generateEvent` function will generate an event with the message string given as argument. Events can be recovered later from the Massa client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:67
#: 99105b25c72e4985968b086d67515b8d
msgid "Now that everything is in place, we can start the compilation step by running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:73
#: fda3ab453a954236b95a2a53759bec99
msgid "Congratulations! You have generated your first smart contract: the `main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:77
#: 5dfde86af1714471bf879daa30552061
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:79
#: a668a6594931458da3dcbbf72ffabb59
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:80
#: af6031994945480690bb119dfbc0a94c
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:81
#: 023052aa38044bd2a654e194f9b401fd
msgid "look for any similar issue (open or closed) in `massa-as-sdk <https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:83
#: 22a79fbafa6c4dc39abc306c312c3603
msgid "If you find nothing, feel free to contact us on `Discord <https://discord.gg/massa>`_ or directly open an `issue <https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:87
#: e33bfbc4b9c34641babb9e333a698ad4
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:89
#: 9532f47dd49e47f0b9974b1013a5f69e
msgid "Your smart contract is now ready to be deployed and later executed on the Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:91
#: cd39e9244fe443b8ae2e8976eb33450f
msgid "Uploading a smart contract on the Massa blockchains requires coins. On top of the usual gas costs, Massa has also :ref:`storage costs <storage-cost>`. In order to deploy your smart contract, you thus need to own a Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: a9ca5c5a46be4fb2a370c51b5a9a3152
msgid "If you don't have any wallet configured yet, :ref:`create a new one <wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:97
#: f127dcb7f1bb43c0a3567457eedfbc15
msgid "If you're using a brand new wallet, add some coins by sending your address to `testnet-faucet discord channel <https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:99
#: d7be66ec0a1f412790053fdee30a97bc
msgid "In any case, keep the `Address` and `Secret key` of your wallet, you will use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:102
#: a4e89013e8b8424c8444bbf16d67f31f
msgid "To pay for the operation cost, you need to configure your project with your wallet's secret key. This is done using the `.env` file. The initializer comes with a template `.env` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:109
#: 5306038f57924e83953a700d23dc6064
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:111
#: 89b556162f8142b7b86a530a3163f745
msgid "You are now ready to deploy you smart contract with the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:117
#: 7d9bc09247a14c3c94e474e0fd086b78
msgid "If everythings goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:136
#: 2902efae900f48bba02a6a28f813b809
msgid "To facilitate the work of the developer, the `npm run deploy` command will also build your contracts underthehood so you don't have to run `npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:138
#: 01a49b319b504eb498f98b9ef94ed574
msgid "Wait for a few seconds... The last line of the output is the deployed smart contract address. Save it somewhere, it will be used in the next step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:142
#: 3af5019b973844d38c9a18493346a8fb
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:144
#: 54cafe557228433cadad468a6433b036
msgid "Open the `assembly/contracts/run.ts` file and replace its content by the following one. Then replace `<your contract address>` by the address of the deployed contract that you obtained in the previous step."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:165
#: b46d66548dac4180a294ca57df00488f
msgid "line 4: `constructor` is a special function that is called when the run smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:166
#: 9cb20abce33a474cade6e88eaa543c7d
msgid "line 9: `callHelloContract` function initialises an Address object using the address of the deployed smart contract and then calls the `sayHello` function of the smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:167
#: bffa1ab98e6f4e29b29317dd1086f963
msgid "line 13: `call` function calls the given function of the smart contract, deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:169
#: 868edf5ef80445219bf0205cff5248d6
msgid "Now that everything is ready, we have to build our new contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:172
#: bda4257b436f48dfa2e98728b762e559
msgid "The `npm run build` command will build every smart contract in the folder `assembly/contracts`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:178
#: b29bc9a589064c068c91796c064f3801
msgid "Now let's have a look at the deployer script `src/deployer.ts` and stop at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:199
#: b428e5d963544b7498991890ec3411f9
msgid "This function lets us set the smart contract to be deployed when running `npm run deploy`. It also allows us to pass arguments to the call to the `constructor` function. Let's modify the code in order to deploy our run smart contract by replacing `main.wasm` by `run.wasm`. Let's also replace the `test` string used as an argument by our name so that it will be passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:204
#: af899a0e9c684c87aa2f3b6d36d45480
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:210
#: aa3185000af84138a6ce7e9ed6aa239c
msgid "The output should looks like the following:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:231
#: c4c9f6eb54a34b23b667f597c4c759d7
msgid "That's it! After a few seconds you should see the \"Hello world! Greetings from <Name> 👋`\" message coming from the contract's event."
msgstr ""
