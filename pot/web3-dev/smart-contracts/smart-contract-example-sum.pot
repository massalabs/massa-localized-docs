# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-12 00:56+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: 2df712635f064cefbad0498f2f2f3ed9
msgid "Massa's smart-contract by example"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: 2670e2961f824545af04110ad3a7bb47
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 38d615eaa8f44ada856769166d89bd69
msgid "In this tutorial, we will go through all the steps required to create a smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: 52411ec1b70743b69187cb80d3493495
msgid "You can find the complete project on this `Github repository <https://github.com/massalabs/massa-sc-examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:16
#: 4e9b8d676dca427ca58eac74b5240138
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:18
#: dc3f38e99c9143878f881ccae07c4053
msgid "Smart contracts are written in `Assembly Script <https://www.assemblyscript.org/>`_, and so we’ll assume that you have some familiarity with it, but you should be able to follow along even if you’re coming from a different programming language. We’ll also assume that you’re familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:25
#: 13ee880324124408b45816ad510793dd
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:27
#: db5ede1b7e294d20bbe19005121e8723
msgid "Smart contracts on Massa blockchain are written in `Assembly Script <https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly <https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is efficient and can be compiled from several languages, including Assembly Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:32
#: 88485bbc0fc24c119a0f5f4b733fd927
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:33
#: e8e2157220654bebaf4623d66236c6af
msgid "Let's start by cloning the sum example repository. You need `node`, `npm` and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:43
#: 759dc9d81dcc447e9748910c54ffe0f2
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:45
#: 4eeb0ca57fa148bd852ae56205b77106
msgid "Smart contracts are in the `assembly` directory. The `main.ts` will be our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:48
#: 7d0edb0ae438400eb159bb1d2d08b06e
msgid "For this tutorial, we will create a very simple smart contract which calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:50
#: 4226da1e78444c04b296de9d291d002d
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:71
#: 5f749605334d41fa8e602e2f63e929ee
msgid "Calling function of a smart contract that is stored in the blockchain with some arguments will start an assemblyscript runtime (wasmer). This is why each function that you want to be able to call in your smart contract must be exported with the `export` keyword and must take one `StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:77
#: 0d64cc383fb44f618d399b34a6436786
msgid "Here, we are exporting the sum function. In this function, we deserialize the argument into two integers, with the help of `fromByteString` and `toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:82
#: af0a130588994297b7a3ef306e552d7a
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:84
#: 2c0d0abb00eb4d6abc5e20da53fef482
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:90
#: 9d763a177daf4c81b92450e17d38e7e2
msgid "Note that a `build/deployer.wasm` file has also been generated. It will be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:96
#: f4a048f464614632a5868326ae5e35c2
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:98
#: b3a0d70ce7f8462d96ef2d881d48413d
msgid "We'll now turn to the process of putting the smart contract on the Massa blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:100
#: ef722905c74f4358846258c47aa3a500
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:102
#: ad748c970728462784a5d1e9645f1ee0
msgid "To send transaction on the network, you need to provide your wallet secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:109
#: 887ae8dd5f7141019a161f6e04734668
msgid "This command will create a `.env` file. Now fill it with your wallet's secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:112
#: d09f3c50c8a74f2688b1804d5c431eaa
msgid "Contract deployment is done by calling a deployer smart contract which can be found here: `deployer/deployer.as.ts`. It will store our sum smart contract onto the ledger. The deployer contract already includes your compiled `main.ts` contract and has been itself compiled at the `npm run build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:117
#: 316c42a153d94c1a98bcff228e25bb5b
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:123
#: c9b0b51fc9834ef2b8c9ca379563b32d
msgid "This command will execute the compiled deployer `deployer.wasm`, and this smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:126
#: 879a608207c6471794e980d7987f5eac
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:143
#: 6723b7ea6a7f4c3bb47e3ddc72285076
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:145
#: 086a9aad78a34472a36b0228623a0b88
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:147
#: f14678a20cb84fc59b38708ad9c094ff
msgid "To interact with a smart contract, we can write another smart contract that will be executed, or use the `CallSC` function. In our example, we will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:171
#: ab0f4b75da014b829beccbfb40f23bd1
msgid "Note that we use the address where the contract has been deployed: A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:173
#: 7f8d2d6d7a714462a27e0ccd722767aa
msgid "First we need to compile the `caller.ts` smart contract. For the covenience of this example we have added an npm script `npm run build:caller` which will compile `caller.ts` and write the generated wasm in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:181
#: 0570603e05784901a845b2c6bfbf0894
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:187
#: b708d1cb72d144608be6e274fbd71150
msgid "Remember that our sum smart contract computes the sum and emits an event with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:189
#: 5f8a0736559145e8a829af020574c04a
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:205
#: c2c7f7be58304d979575fd4f387096d5
msgid "You can call the JSON RPC API function `get_filtered_sc_output_event` to get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:226
#: 002914894e9c48a3abab40920130ca6e
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:228
#: b10c30e101734d0dbf8f18063ef5afaf
msgid "Here is an example of what you can find:"
msgstr ""
