# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 00:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: bc6f92f7fffb411eaa5b5c28a07086fd
msgid "Massa's smart-contract by example"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: 49766d68ac304fbbae56079e9ac6b567
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 4dc04f9c078d4dd88e42269f23e5e783
msgid "In this tutorial, we will go through all the steps required to create a smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: 988d179673fa42cca1fcda416a9f2669
msgid "You can find the complete project on this `Github repository <https://github.com/massalabs/massa-sc-examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:16
#: f8f8e79693ba4dad947aa5bf198c3001
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:18
#: d0045ab336af4888a01e506ba664f20a
msgid "Smart contracts are written in `Assembly Script <https://www.assemblyscript.org/>`_, and so we’ll assume that you have some familiarity with it, but you should be able to follow along even if you’re coming from a different programming language. We’ll also assume that you’re familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:24
#: 54c6ee2bf07a4be995d5382b80080249
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:26
#: d7c56970fbce4155be491289ee1d6f3f
msgid "Smart contracts on Massa blockchain are written in `Assembly Script <https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly <https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is efficient and can be compiled from several languages, including Assembly Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:31
#: d296072f1abc41e48a2184aba7296942
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:33
#: f623d08ffe494d68be9ccd618e79e08e
msgid "Let's start by cloning the sum example repository. You need `node`, `npm` and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:42
#: f45239b7629e48e4b250df7de7edd6ce
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:44
#: b8ce71ba610d4a42bb20831a5c52af9c
msgid "Smart contracts are in the `assembly` directory. The `main.ts` will be our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:46
#: cae06bfdefdd4b49a674bd45eb30b355
msgid "For this tutorial, we will create a very simple smart contract which calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:48
#: 47d2a10c502f4f23bd159a4251b5296d
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:69
#: 3571a2eadfc94a7694ea4d6e59eb1b4e
msgid "Calling function of a smart contract that is stored in the blockchain with some arguments will start an assemblyscript runtime (wasmer). This is why each function that you want to be able to call in your smart contract must be exported with the `export` keyword and must take one `StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:73
#: 94988ba30beb47dbbd24759b2fa521f3
msgid "Here, we are exporting the sum function. In this function, we deserialize the argument into two integers, with the help of `fromByteString` and `toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:77
#: 82f4a26cc10f4b7bb32a728b7ec4b04b
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:79
#: dea63ed7e360462386af3eaea0fc3d51
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:85
#: cec7b35be86f4a9dbab620d7bd81783b
msgid "Note that a `build/deployer.wasm` file has also been generated. It will be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:91
#: fcea90f631ad46db9ec69b8a78ff2fa6
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:93
#: 75ca9ed6c3ae436c8a97cd55ceed50a5
msgid "We'll now turn to the process of putting the smart contract on the Massa blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:95
#: 08864a3e1fed49c3810e8f8e67979abf
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:97
#: b809f15af1ba4feca45cd586f7680d0f
msgid "To send transaction on the network, you need to provide your wallet secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:104
#: f767114588cd45ba8a5c3f0678bf86ad
msgid "This command will create a `.env` file. Now fill it with your wallet's secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:107
#: eaa797eec5df4b8388bb56583e28e034
msgid "Contract deployment is done by calling a deployer smart contract which can be found here: `deployer/deployer.as.ts`. It will store our sum smart contract onto the ledger. The deployer contract already includes your compiled `main.ts` contract and has been itself compiled at the `npm run build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:111
#: aeec889fd94243d18f17968d66df84cd
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:117
#: e04ecf9212184ab6af69264c7458679b
msgid "This command will execute the compiled deployer `deployer.wasm`, and this smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:120
#: 723d66647362469fb7f3bec298bfc9ab
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:136
#: 4468aeb0da834c75b81aec93a26ebf4c
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:138
#: fc29772464714b0bbf8ce9cc0987375b
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:140
#: 754c5485fd3e46a2895235eb6c3933c2
msgid "To interact with a smart contract, we can write another smart contract that will be executed, or use the `CallSC` function. In our example, we will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:162
#: a30d9a325d2e4b95910b5f43e169d329
msgid "Note that we use the address where the contract has been deployed: A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:164
#: 828869b1499d4ba49776015eddf27aca
msgid "First we need to compile the `caller.ts` smart contract. For the covenience of this example we have added an npm script `npm run build:caller` which will compile `caller.ts` and write the generated wasm in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:171
#: 36dcf0d4782941b8b0111c88a1a433e9
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:177
#: 66e3feceb65341ed89ab9a2cc5e27491
msgid "Remember that our sum smart contract computes the sum and emits an event with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:179
#: dc23dd99afdb41369b1647dcf4bc486d
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:195
#: b1e3ec2619c541dbbc5b8e60e3406586
msgid "You can call the JSON RPC API function `get_filtered_sc_output_event` to get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:216
#: 5f0fd5025fcd4caba6f4eb7c8b367449
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:218
#: d75ecb0d4cee4e01b8ce1d60ca63765c
msgid "Here is an example of what you can find:"
msgstr ""
