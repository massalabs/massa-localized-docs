# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-08 00:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: 501c2bb2fe964d2baad421e73a40d4ca
msgid "Massa's smart-contract by example"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: cf788c44e9194bf0b7df9e476de3b63e
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 181001b3cdb145fdaf34dcdb330015e3
msgid "In this tutorial, we will go through all the steps required to create a smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: 5649303c1a8647ee8002e3abb26d7259
msgid "You can find the complete project on this `Github repository <https://github.com/massalabs/massa-sc-examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:16
#: b08533ad3ff048e6b8cf9b96f4dad7f9
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:18
#: 0c4c33ce179b4fe5bba5ce2556c29d9c
msgid "Smart contracts are written in `Assembly Script <https://www.assemblyscript.org/>`_, and so we’ll assume that you have some familiarity with it, but you should be able to follow along even if you’re coming from a different programming language. We’ll also assume that you’re familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:25
#: 7fd8eaf3e6c648cfa92cc070d3ebf3e3
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:27
#: 4bfcb379a8ec4144971b071e2bd9ed67
msgid "Smart contracts on Massa blockchain are written in `Assembly Script <https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly <https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is efficient and can be compiled from several languages, including Assembly Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:32
#: dd226cd7f2684a6fa2b551f29c5e7e6c
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:33
#: 567d1b78e6194d90868e70dd28b68831
msgid "Let's start by cloning the sum example repository. You need `node`, `npm` and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:43
#: f2bc8eee9d534424b96b831e6573715c
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:45
#: ad41a277e0364a858329f4cecf2f26b4
msgid "Smart contracts are in the `assembly` directory. The `main.ts` will be our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:48
#: d82c2a2a87ac4cc4ae08fba17336d6a2
msgid "For this tutorial, we will create a very simple smart contract which calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:50
#: eaa4e7b4c4194a5d850ca5630785afec
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:71
#: 191b796e70ea481795c54ce1beccf5a7
msgid "Calling function of a smart contract that is stored in the blockchain with some arguments will start an assemblyscript runtime (wasmer). This is why each function that you want to be able to call in your smart contract must be exported with the `export` keyword and must take one `StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:77
#: ccf25400d1804117a6852109f03d31c2
msgid "Here, we are exporting the sum function. In this function, we deserialize the argument into two integers, with the help of `fromByteString` and `toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:82
#: f762236f761e469da2d0e8abce5a3b88
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:84
#: 733501aa42404f79970e08ae6675a356
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:90
#: 318f94d67abf4c51bc9e57cebd1e8629
msgid "Note that a `build/deployer.wasm` file has also been generated. It will be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:96
#: fb78805675d042cd9095e58b8baae7fb
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:98
#: 439c6c9297a540e096bacd07c0bcc87f
msgid "We'll now turn to the process of putting the smart contract on the Massa blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:100
#: 6738f973196c4050b2f58a93e73d1bef
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:102
#: ad9e3c858f9a4125a25355c489c3e4d9
msgid "To send transaction on the network, you need to provide your wallet secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:109
#: abd3cb43fd084641b0d3420e991fdeab
msgid "This command will create a `.env` file. Now fill it with your wallet's secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:112
#: 890cd45d425640b39867088a88ba198b
msgid "Contract deployment is done by calling a deployer smart contract which can be found here: `deployer/deployer.as.ts`. It will store our sum smart contract onto the ledger. The deployer contract already includes your compiled `main.ts` contract and has been itself compiled at the `npm run build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:117
#: 65fa2ac9ada141a3a9d955313d4a3baa
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:123
#: d1de9b7cfc9f46b28f683e198e64b84c
msgid "This command will execute the compiled deployer `deployer.wasm`, and this smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:126
#: 8b8d5829c50e4e8aafe31ad2ada49d40
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:143
#: 1f88d26a91a7490d9013583af69a0385
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:145
#: 59a88734cdc24dfb90f9b667119f618a
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:147
#: e9036cd59cf547b0aad410b0e991028c
msgid "To interact with a smart contract, we can write another smart contract that will be executed, or use the `CallSC` function. In our example, we will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:171
#: 92c5be31fa2f4875875d788d7c7426be
msgid "Note that we use the address where the contract has been deployed: A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:173
#: 550c7645ce974212a96c0ad97988c84f
msgid "First we need to compile the `caller.ts` smart contract. For the covenience of this example we have added an npm script `npm run build:caller` which will compile `caller.ts` and write the generated wasm in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:181
#: e3ac165d575f48a896ed0757fac556aa
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:187
#: 22d0d713f978495cb692ac1d2ae9593b
msgid "Remember that our sum smart contract computes the sum and emits an event with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:189
#: 7da476ef93334359aaf23a6d079780d8
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:205
#: 06e75ee25ea945edb12de1db850f84a5
msgid "You can call the JSON RPC API function `get_filtered_sc_output_event` to get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:226
#: 840c08147430420f94ec9226c3faa9c9
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:228
#: 5156db912bc8463c9287c7f4973e4cbe
msgid "Here is an example of what you can find:"
msgstr ""
