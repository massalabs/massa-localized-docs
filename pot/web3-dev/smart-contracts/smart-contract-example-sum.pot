# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: 2942636a93f34017a0eb695a7cb5b842
msgid "Massa's smart-contract by example"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: df3a0dbd846d453d866dbeca6a7828c1
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 94e48f5178714f2092ceec5bb569a0a2
msgid "In this tutorial, we will go through all the steps required to create a smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: 8096a513308f4938a358c404a10b1367
msgid "You can find the complete project on this `Github repository <https://github.com/massalabs/massa-sc-examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:16
#: 66efc97c36314e2fb526cac692cdaa14
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:18
#: a290783b5c0c473299c1a0baee8ac3de
msgid "Smart contracts are written in `Assembly Script <https://www.assemblyscript.org/>`_, and so we’ll assume that you have some familiarity with it, but you should be able to follow along even if you’re coming from a different programming language. We’ll also assume that you’re familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:25
#: a50bac67b8124f69a98347e9b0911fce
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:27
#: c7b7310681a6400c9ac3967bf6d3f772
msgid "Smart contracts on Massa blockchain are written in `Assembly Script <https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly <https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is efficient and can be compiled from several languages, including Assembly Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:32
#: 3c1cdfafd9ba42219fa277ed4fc5de4f
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:33
#: ecc1a4397c054cc3b7143c64a4e1fb90
msgid "Let's start by cloning the sum example repository. You need `node`, `npm` and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:43
#: ffacc9eb6f034c599c7e153b69ac3253
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:45
#: 4e6f6ebb70c94d628adc5ae96f58b154
msgid "Smart contracts are in the `assembly` directory. The `main.ts` will be our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:48
#: d7e2a5b9394b4a08b617e1767c461b66
msgid "For this tutorial, we will create a very simple smart contract which calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:50
#: 237576d9959843219c36bcefa8cb94c7
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:71
#: f3512eda50264d83a941a5319a379be3
msgid "Calling function of a smart contract that is stored in the blockchain with some arguments will start an assemblyscript runtime (wasmer). This is why each function that you want to be able to call in your smart contract must be exported with the `export` keyword and must take one `StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:77
#: 75d6529676ee43cfad5033bff6e3c6d9
msgid "Here, we are exporting the sum function. In this function, we deserialize the argument into two integers, with the help of `fromByteString` and `toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:82
#: e0a8af818e1548a082ca4981574056e5
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:84
#: b362de2a646040d28f2e123c0ca17dd1
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:90
#: 22433c54f078439e914c0080fa67dca1
msgid "Note that a `build/deployer.wasm` file has also been generated. It will be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:96
#: b7c6b7adbd5343b590839d995f66230a
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:98
#: 08a176ab3e7946519ac44c2f0dbded14
msgid "We'll now turn to the process of putting the smart contract on the Massa blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:100
#: a11d667c3b0e439e875e95822c9cc6c5
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:102
#: c7e59c957c54473cad92f5b71bac2b45
msgid "To send transaction on the network, you need to provide your wallet secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:109
#: 4590f19a8c22418c9ae45951452ba79e
msgid "This command will create a `.env` file. Now fill it with your wallet's secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:112
#: 4ac3685a0141495bad9db9ed6282699c
msgid "Contract deployment is done by calling a deployer smart contract which can be found here: `deployer/deployer.as.ts`. It will store our sum smart contract onto the ledger. The deployer contract already includes your compiled `main.ts` contract and has been itself compiled at the `npm run build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:117
#: 2468443bc8054db09862ee0a0ebe42ef
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:123
#: 8dbe3762423f489dbffa2ffc671b5307
msgid "This command will execute the compiled deployer `deployer.wasm`, and this smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:126
#: 06a19db978a14edcbfd847e8d799a9ad
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:143
#: c9bd9672d10a488c9bfd121b9599bd83
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:145
#: 93bafd181b5b4e18a30213de0da70b5e
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:147
#: b8eae77160d54762b64397ddb65bb6b4
msgid "To interact with a smart contract, we can write another smart contract that will be executed, or use the `CallSC` function. In our example, we will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:171
#: 9de223b25665474c8f60da98b8ecd861
msgid "Note that we use the address where the contract has been deployed: A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:173
#: fa8fb6cd3ad4480780848d6be29ee9ae
msgid "First we need to compile the `caller.ts` smart contract. For the covenience of this example we have added an npm script `npm run build:caller` which will compile `caller.ts` and write the generated wasm in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:181
#: 2b88facec8c04975a826c6ed0adc6521
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:187
#: 86d231e3b5ae48c2ac23bdabb2ec7edd
msgid "Remember that our sum smart contract computes the sum and emits an event with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:189
#: e5fbdebe33824cd7b1de73b79ffe86ba
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:205
#: eea763acfc2140a78d80ce8d19645e62
msgid "You can call the JSON RPC API function `get_filtered_sc_output_event` to get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:226
#: 674545d842a94d28a2d23e50c7a73a60
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:228
#: 869468d020de48689b85e2787b4aec52
msgid "Here is an example of what you can find:"
msgstr ""
