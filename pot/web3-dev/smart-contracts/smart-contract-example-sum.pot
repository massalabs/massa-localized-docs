# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-11 00:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: 1e8d67306578485d9cfab6acd719a1bd
msgid "Massa's smart-contract examples"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: 744c7fa9fee34544b015529fc3f8a40d
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 90085d1a71a04baeb60f93bcf718351b
msgid "In this tutorial, we will go through all the steps required to create a smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: 31671dda566f4f8ea65eff83486b4b4b
msgid "You can find the complete project on this `Github repository <https://github.com/massalabs/massa-sc-examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:16
#: a28c15c3303b437f9e13bf4b199aae90
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:18
#: ffd8bcfe47ce485598bd68f93674f8b5
msgid "Smart contracts are written in `Assembly Script <https://www.assemblyscript.org/>`_, and so we’ll assume that you have some familiarity with it, but you should be able to follow along even if you’re coming from a different programming language. We’ll also assume that you’re familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:25
#: caa1081cf44d413caa244aa9178a5781
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:27
#: 4ce09ba4a1ae4ff79d59cee365539e4c
msgid "Smart contracts on Massa blockchain are written in `Assembly Script <https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly <https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is efficient and can be compiled from several languages, including Assembly Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:32
#: 473edaecb5a9493d8e2120cf27484678
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:33
#: 798eaa8c811443deb65b2ffdbda83cc0
msgid "Let's start by cloning the sum example repository. You need `node`, `npm` and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:43
#: 1febbafd6d2c48648089a51d7782acf1
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:45
#: 78d5104ebe6b4e48b51c359efdee8a47
msgid "Smart contracts are in the `assembly` directory. The `main.ts` will be our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:48
#: 41a7824280c74283a65d9b5c82271070
msgid "For this tutorial, we will create a very simple smart contract which calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:50
#: 6f2d8c7729ef459b90d3e48fc0ddbf44
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:71
#: b0b4f1a8accf4a59901101c766ecdef9
msgid "Calling function of a smart contract that is stored in the blockchain with some arguments will start an assemblyscript runtime (wasmer). This is why each function that you want to be able to call in your smart contract must be exported with the `export` keyword and must take one `StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:77
#: 1fdf243d54894c95abebde29ef148735
msgid "Here, we are exporting the sum function. In this function, we deserialize the argument into two integers, with the help of `fromByteString` and `toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:82
#: ffc4de8f54da4f699acb0380605277f4
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:84
#: 417af2f45c7e4d5a8883708592921a69
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:90
#: afcdc38116aa4e318d8563e67bc46afe
msgid "Note that a `build/deployer.wasm` file has also been generated. It will be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:96
#: 4c2eac9edd7f4677abb10ccad857ae13
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:98
#: 716cf01487cc4b669e6f908f94ef00ec
msgid "We'll now turn to the process of putting the smart contract on the Massa blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:100
#: 8b63650c585d489d95a94a17a7d63b45
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:102
#: 1b9e01b92f9244b58f5d4bf613924761
msgid "To send transaction on the network, you need to provide your wallet secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:109
#: 9babce68adb24e7db0caa50f8d1ae75a
msgid "This command will create a `.env` file. Now fill it with your wallet's secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:112
#: 179670df0b634c18b5e06bd0b7db62a8
msgid "Contract deployment is done by calling a deployer smart contract which can be found here: `deployer/deployer.as.ts`. It will store our sum smart contract onto the ledger. The deployer contract already includes your compiled `main.ts` contract and has been itself compiled at the `npm run build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:117
#: 91f7b529f5d048ca9f6dbc3f0fd474a3
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:123
#: 757fd6d4ce654252853ef35e8b3ab9df
msgid "This command will execute the compiled deployer `deployer.wasm`, and this smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:126
#: bec54cb48bf14ac6bbe0deb53bc2b49f
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:143
#: 42f9b7153c654ad899350cca32c2f821
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:145
#: f5a27f029709414889f37fd656ccea1f
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:147
#: 2b239ee9bbb047d0a35c5e2309903505
msgid "To interact with a smart contract, we can write another smart contract that will be executed, or use the `CallSC` function. In our example, we will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:171
#: 6d422f87f64f4f278a7be8df60692c13
msgid "Note that we use the address where the contract has been deployed: A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:173
#: e77578130702417bb1f826745eedecc2
msgid "First we need to compile the `caller.ts` smart contract. For the covenience of this example we have added an npm script `npm run build:caller` which will compile `caller.ts` and write the generated wasm in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:181
#: 12a4090dbae145099e7263e2e9d53017
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:187
#: 5c2ff97c033e433e872c2125d0344fb3
msgid "Remember that our sum smart contract computes the sum and emits an event with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:189
#: e46f5f137e124226a3dd9d4240f7dd08
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:205
#: 95d9ae463128423ab758a5b5abd03fe5
msgid "You can call the JSON RPC API function `get_filtered_sc_output_event` to get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:226
#: 698a62d40f8140a7bd6a40efb5a86868
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:228
#: 5b0f9c876adb4c5dbee7ab32e309ac24
msgid "Here is an example of what you can find:"
msgstr ""
