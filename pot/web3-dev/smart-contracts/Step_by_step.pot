# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-30 11:37+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/Step_by_step.rst:2
#: d87d91a0fef7429ba452b255a09fc8d8
msgid "Web 3 autonomous game tutorial, Step by Step!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:5
#: 6b6b882187f24b0a8bbffeab1d5cff48
msgid "Intro"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:7
#: 9b0cdacc67604fe2a76edfa54deeb145
msgid "In this tutorial, we will see how to step by step develop a web3 autonomous video game based on cats living autonomously on the Massa blockchain. Idea is simple : a user creates a cat, and have to feed him with massa tokens in order to avoid starving and death ! The cat has to eat periodically."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:9
#: 7f2b928b969d42c8b13d89539c50ead1
msgid "Each cat is technically a smart contract deployed on the Massa blockchain. We will see how to set this smart contract autonomous in order to allows it to carry out actions by itself."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:13
#: 10fd7523c41141208fa16b9380a9e778
msgid "1) How to create and deploy a cat"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:15
#: a13383e5dea14e689e58c1f98e7b98f7
msgid "First of all, we need to create and deploy on the blockchain the smart contracts for each cat using 2 scripts :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:17
#: 36f6b6b66c0d4f1fbd252d70a270096d
msgid "main.ts : will allow us to deploy the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:18
#: 380513320a404819842be1ddebb9c228
msgid "cat.ts : will manage all behaviour of the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:21
#: f177bd10053749b79ab54ca24b143c88
msgid "The main.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:50
#: ../../web3-dev/smart-contracts/Step_by_step.rst:132
#: dd6c45c34056476c8c3dd88e37db7442
#: be8a40ffc25a4746aee013719f894a3d
msgid "Code analysis :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:52
#: ea53bcaacc50484eb500519731b7f197
msgid "Let's see line by line what is going on :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:54
#: 1f5f0f99622c445a9712d4041e86fa5c
msgid "Import Massalabs library :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:60
#: c066368216fd4b00b3f082660e7f5901
msgid "==> The goal of this line is to import from the \"massalabs/massa-as-sdk\" library the functions that we will be used : { createSC, fileToBase64, Storage, Context, generateEvent, call}"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:63
#: 6b1a52570c8e43d5ab155e94cc9095d7
msgid "main() function to execute the script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:72
#: 8ae34b3985c64d9f96aeb7997e5496a6
msgid "==> This step declares the function main() that will be executed on the blockchain. Inside the function we can find :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:74
#: 638266ec22774e71b6d1b80f34d8697b
msgid "const bytes = fileToBase64('./build/cat.wasm'); ==> in order to create the binary code from the \"cat.wasm\" file and store it into the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:75
#: 34a79fe91a6247328b19e172119e7094
msgid "let addr = createSC(bytes); ==> in order to instanciate the addr variable and deploy the smart contract of the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:76
#: 858a05fb271849979becbac0d4967616
msgid "generateEvent(\"A new cat is born! Address of the cat : \" + addr.toByteString()); ==> will just send a message on the client with the smart contract address, using the function generateEvent(\"Message\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:79
#: 935c6db7aced4e9e88aecf131b1f74e0
msgid "Define the attributes of the new cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:89
#: d64b4083711748a98f458993e3421067
msgid "==> Using the Storage.setOf() function, we can set different attributes as : the name of the cat, the current state of the cat, etc."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:91
#: 3f185387468f4320aea415d05d235a56
msgid "Storage.setOf() will technically create a key owned by the smart contract only :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:93
#: 3d12ba3817a2441c9da5a9b15dbdd7de
msgid "You can change the value of the key using : Storage.setOf(\"key\",\"value\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:94
#: 776325ae983c4d5c8267e46b4c218ca0
msgid "You can get the value of the key using : Storage.getOf(\"key\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:96
#: 6c47989e45574464b45b429c3ac55b2e
msgid "Using the Context.timestamp() function, we can get the current timestamp."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:99
#: 981fca662e5e414ba9ecc12d5c25981a
msgid "Get information from the cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:110
#: 75a16d709e3d4be8a5485e087f6e58d7
msgid "==> We can print the cat information into the client using the function generateEvent(\"Message\") and using the call() function."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:112
#: fa4ba24344d64833b18b97743aee8270
msgid "The call() function allows us to call the functions defined into our cat smart contract knowing the address of this one and should be used like :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:114
#: 9872375f0ceb43feafa135a4af19b4f9
msgid "call(address_of_the_smart_contract_to_call, \"function_to_call\", \"parameters_of_the_function\", tokens_to_send_during_the_call)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:118
#: 04d47ba3d5974f18879a073aea81bceb
msgid "The cat.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:134
#: 23707520b1f94ea79c137460d0e92ab3
msgid "When the main.ts script is executed for the first time, we declared keys like \"name\", \"birth\" etc with specific values. In order to create the game, we need those keys avaible at each time by someone, or an another smart contract. Thus, we can do it declaring functions callable using : \"export function my_function()\""
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:143
#: dbc026e5c596414db9a3678236344a02
msgid "==> for instance here we declare into the cat smart contract a callable function named \"get_name\" that will return a string with the value of the key \"name\"."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:145
#: 51da4e9bfb334fd8ba98591f3d9df8bf
msgid "Thus, any smart contract will be able to get the name of the cat using a call() function :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:147
#: da9930a201c0421cbfd4afc6c94a945d
msgid "call(address_of_the_cat, \"get_name\", \"\", 0)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:150
#: e5f763e54e17480e80fcd671a655b831
msgid "Lets try our code!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:152
#: 1c4b00b19f6448e19b01e74cbec1e3c9
msgid "Just compile your main.ts file in the terminal using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:161
#: 06128ff09b5246a4adfdf326f6288a12
msgid "Make sure your file \"my-sc/package.json\" is written as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:186
#: 97c4908047da48208616794a87dfa472
msgid "Copy the file \"main.wasm\" from my-sc/build/main.wasm to massa/massa-client/main.wasm using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:193
#: 47d78d8e03fe4e5b93adc2223a470801
msgid "Send the smart contract on the blockchain massa using into the massa client the following command :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:199
#: 7dde2f0d9b184f65bd3e818b1140bee7
msgid "And get the events sent by \"generateEvent()\" function used in our script. You can filter them by your emitter address using the following command into the client :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:205
#: 7fa9e6ef21f5414488e4e70471667cb5
msgid "You should get as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:232
#: e840c5af698c4b338ecbf6f7592cb954
msgid "2) How to feed him with tokens"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:235
#: dcd38e35bf904954835ac458a07a8897
msgid "3) How to set him autonomous"
msgstr ""
