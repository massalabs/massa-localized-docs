# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-29 16:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/Step_by_step.rst:2
#: 5defd784dcc64eaea406e0212fd5c886
msgid "Web 3 autonomous game tutorial, Step by Step!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:5
#: b069598b247b4594a7f59d319978cac1
msgid "Intro"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:7
#: 6fdaa7b8b0754d71b59c8feba07df2d3
msgid "In this tutorial, we will see how to step by step develop a web3 autonomous video game based on cats living autonomously on the Massa blockchain. Idea is simple : a user creates a cat, and have to feed him with massa tokens in order to avoid starving and death ! The cat has to eat periodically."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:9
#: 9e1483ee72df426d982ee9a247a10a7b
msgid "Each cat is technically a smart contract deployed on the Massa blockchain. We will see how to set this smart contract autonomous in order to allows it to carry out actions by itself."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:13
#: 90211f6ec5b348fbb5928b4422575160
msgid "1) How to create and deploy a cat"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:15
#: 7ea3412cdd72412c80ec449d789be822
msgid "First of all, we need to create and deploy on the blockchain the smart contracts for each cat using 2 scripts :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:17
#: 64f6746e079145afbb80b0092b153f47
msgid "main.ts : will allow us to deploy the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:18
#: 681ea87d1d8d48948aedfc42f2e9c53c
msgid "cat.ts : will manage all behaviour of the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:21
#: 195dceacf239436fb1da8466647ea761
msgid "The main.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:50
#: ../../web3-dev/smart-contracts/Step_by_step.rst:132
#: a643e45baae24f15891f7b2e1dde83f2
#: 338a2cd681b241c891d530bb6cc7aa8a
msgid "Code analysis :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:52
#: 1d113710ff5d4bdc8f1328f158eb2e85
msgid "Let's see line by line what is going on :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:54
#: bc4091fa9b354b56bcadbf84f35bac62
msgid "Import Massalabs library :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:60
#: bf9446eb19df40daa4b531a19809645e
msgid "==> The goal of this line is to import from the \"massalabs/massa-as-sdk\" library the functions that we will be used : { createSC, fileToBase64, Storage, Context, generateEvent, call}"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:63
#: 34df655322d44656b84210a715118989
msgid "main() function to execute the script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:72
#: afe3ec2c182e4907990486902a77b9af
msgid "==> This step declares the function main() that will be executed on the blockchain. Inside the function we can find :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:74
#: 9d7479e8137c4e29b90aeffc29751fb5
msgid "const bytes = fileToBase64('./build/cat.wasm'); ==> in order to create the binary code from the \"cat.wasm\" file and store it into the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:75
#: c60c941da7554114abadb794205f2e8c
msgid "let addr = createSC(bytes); ==> in order to instanciate the addr variable and deploy the smart contract of the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:76
#: e43a4bd29d9a4f988fb855c066c68666
msgid "generateEvent(\"A new cat is born! Address of the cat : \" + addr.toByteString()); ==> will just send a message on the client with the smart contract address, using the function generateEvent(\"Message\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:79
#: f6e661789ade429dbee8ac9842aada76
msgid "Define the attributes of the new cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:89
#: 1ca4d7829db94314b0a914ca68a5f6fa
msgid "==> Using the Storage.setOf() function, we can set different attributes as : the name of the cat, the current state of the cat, etc."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:91
#: 79e8732756f04bc4b5c7300f47c7b46f
msgid "Storage.setOf() will technically create a key owned by the smart contract only :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:93
#: eb7b4492c0bb4c04b2d87100bff79882
msgid "You can change the value of the key using : Storage.setOf(\"key\",\"value\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:94
#: 04e232a26e35467ca849db77f8a4b6e4
msgid "You can get the value of the key using : Storage.getOf(\"key\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:96
#: 086a70fcfbb6488998ca0d26d87d2999
msgid "Using the Context.timestamp() function, we can get the current timestamp."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:99
#: fca1ce4f23df48248119ceb2c14ef889
msgid "Get information from the cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:110
#: 23e8e195bedd4b748e922919f8457d57
msgid "==> We can print the cat information into the client using the function generateEvent(\"Message\") and using the call() function."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:112
#: cf00cfbdfeb4446685c6844eff5ac9e5
msgid "The call() function allows us to call the functions defined into our cat smart contract knowing the address of this one and should be used like :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:114
#: 76d44360bf2349f69a319817e22a8745
msgid "call(address_of_the_smart_contract_to_call, \"function_to_call\", \"parameters_of_the_function\", tokens_to_send_during_the_call)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:118
#: 9a1f49acf9024668b9a2eb214b3f86ef
msgid "The cat.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:134
#: 22bb13474d4149ef933a89ca67d87e93
msgid "When the main.ts script is executed for the first time, we declared keys like \"name\", \"birth\" etc with specific values. In order to create the game, we need those keys avaible at each time by someone, or an another smart contract. Thus, we can do it declaring functions callable using : \"export function my_function()\""
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:143
#: 18adedea2f924359b4f4b71c0c0b00f2
msgid "==> for instance here we declare into the cat smart contract a callable function named \"get_name\" that will return a string with the value of the key \"name\"."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:145
#: f335b70eb3e344ce9d9ff29d4e2a1423
msgid "Thus, any smart contract will be able to get the name of the cat using a call() function :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:147
#: 8e7cf9f978904bc5bb950e0aae578a6b
msgid "call(address_of_the_cat, \"get_name\", \"\", 0)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:150
#: 580f6d543e5047c599e70173850061f8
msgid "Lets try our code!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:152
#: 45cf4caed9504f249617ae42d07c000b
msgid "Just compile your main.ts file in the terminal using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:161
#: 9402d6d3d8d4439caa0a6889b7ddd10f
msgid "Make sure your file \"my-sc/package.json\" is written as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:186
#: 4615c9386e2843c0936be8dd79c597f9
msgid "Copy the file \"main.wasm\" from my-sc/build/main.wasm to massa/massa-client/main.wasm using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:193
#: c5b87c4896114b11979a12a19df3d39d
msgid "Send the smart contract on the blockchain massa using into the massa client the following command :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:199
#: 4f9f466f026b4bca998e751ba45432a4
msgid "And get the events sent by \"generateEvent()\" function used in our script. You can filter them by your emitter address using the following command into the client :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:205
#: 055bc1b323d54c64a230030e270e247c
msgid "You should get as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:232
#: 770bce33ef3949dfbb8dfd8643a0fd66
msgid "2) How to feed him with tokens"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:235
#: 09351cd3e8bf43b6897707e6f0f20938
msgid "3) How to set him autonomous"
msgstr ""
