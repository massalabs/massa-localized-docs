# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-05 11:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../web3-dev/smart-contracts/Step_by_step.rst:2
#: b1dffc007e17409e873ee181e2f75ec2
msgid "Web 3 autonomous game tutorial, Step by Step!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:5
#: c706ba625d36474aa75f6d2fe5fc9612
msgid "Intro"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:7
#: 98d8425b38c741bb9cdeee3c0a6bf553
msgid "In this tutorial, we will see how to step by step develop a web3 autonomous video game based on cats living autonomously on the Massa blockchain. Idea is simple : a user creates a cat, and have to feed him with massa tokens in order to avoid starving and death ! The cat has to eat periodically."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:9
#: cf3b646e1fc2404d8f7cc8d874063a7a
msgid "Each cat is technically a smart contract deployed on the Massa blockchain. We will see how to set this smart contract autonomous in order to allows it to carry out actions by itself."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:13
#: 2da9f4ae7d664515bac9510903943254
msgid "1) How to create and deploy a cat"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:15
#: de3682eb10d7436ea1fda7928b1af01f
msgid "First of all, we need to create and deploy on the blockchain the smart contracts for each cat using 2 scripts :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:17
#: 6e2e1bc94c8c40c4a953459fb02656ac
msgid "main.ts : will allow us to deploy the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:18
#: e4f71d7e5b914c2c8933b8bd498e9235
msgid "cat.ts : will manage all behaviour of the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:21
#: dd05924684fc41dc8bb274881b1ca6f7
msgid "The main.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:50
#: ../../web3-dev/smart-contracts/Step_by_step.rst:132
#: 04e5f83456db4b3a9c6cea8613f76ea3
#: 9fa465da6c324ff4b8a0810ca2dd5ddd
msgid "Code analysis :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:52
#: 6b0c0b7bfbcb4000a1c1f248bbdd6f1b
msgid "Let's see line by line what is going on :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:54
#: 9de692bb2d1d4ac2bb33ad4f6dd59510
msgid "Import Massalabs library :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:60
#: a9d03887c065454db00a934801c936bd
msgid "==> The goal of this line is to import from the \"massalabs/massa-as-sdk\" library the functions that we will be used : { createSC, fileToByteArray, Storage, Context, generateEvent, call}"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:63
#: 42ac5e9dd7cf4d08aa5a8030335e65de
msgid "main() function to execute the script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:72
#: 52b9bf642925451dbf3b0d6c32136b63
msgid "==> This step declares the function main() that will be executed on the blockchain. Inside the function we can find :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:74
#: fa1e68e6b8fd42358c859e5425c42c7b
msgid "const bytes: StaticArray<u8> = fileToByteArray('./build/cat.wasm'); ==> in order to create the binary code from the \"cat.wasm\" file and store it into the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:75
#: f15b3baa9cbf4b529d656d3ef5798ac1
msgid "let addr = createSC(bytes); ==> in order to instanciate the addr variable and deploy the smart contract of the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:76
#: a01f232d86954fd994f37d644b290185
msgid "generateEvent(\"A new cat is born! Address of the cat : \" + addr.toByteString()); ==> will just send a message on the client with the smart contract address, using the function generateEvent(\"Message\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:79
#: 5b72fe79d17a4f4ebaff973a8325c2bf
msgid "Define the attributes of the new cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:89
#: e0df0fa7b679409bae87be2a2ea74881
msgid "==> Using the Storage.setOf() function, we can set different attributes as : the name of the cat, the current state of the cat, etc."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:91
#: 03263914847f4d7db565e049889519b3
msgid "Storage.setOf() will technically create a key owned by the smart contract only :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:93
#: 7b4b147bc9104fbeb96798d0f26f2b31
msgid "You can change the value of the key using : Storage.setOf(toBytes(\"key\"), toBytes(\"value\"))."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:94
#: f3c81932542d4660a620776a2ee4ba83
msgid "You can get the value of the key using : Storage.getOf(toBytes(\"key\"))."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:96
#: 392b0cfe0a9f4177a6cc80a836fb2276
msgid "Using the Context.timestamp() function, we can get the current timestamp."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:99
#: f1aab3cafaac4f22af1e6c0e1114c804
msgid "Get information from the cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:110
#: e32c9b368b6d48f29aca4c123d17113d
msgid "==> We can print the cat information into the client using the function generateEvent(\"Message\") and using the call() function."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:112
#: f70dd9a3b49d4451abf0a5fba9ac05bf
msgid "The call() function allows us to call the functions defined into our cat smart contract knowing the address of this one and should be used like :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:114
#: 1036497de27b47e38be571c0444b9341
msgid "call(address_of_the_smart_contract_to_call, \"function_to_call\", params, tokens_to_send_during_the_call)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:118
#: ecd99e7d79984f90a2f7dafed67c92db
msgid "The cat.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:134
#: fa28e101efb14b4692750e46f2f9f257
msgid "When the main.ts script is executed for the first time, we declared keys like \"name\", \"birth\" etc with specific values. In order to create the game, we need those keys avaible at each time by someone, or an another smart contract. Thus, we can do it declaring functions callable using : \"export function my_function()\""
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:143
#: a4ba05dae76347e7b60d06484e45d753
msgid "==> for instance here we declare into the cat smart contract a callable function named \"get_name\" that will return a StaticArray<u8> with the value of the key \"name\"."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:145
#: 25a93e6bdcab4c9590e74131229c38f2
msgid "Thus, any smart contract will be able to get the name of the cat using a call() function :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:147
#: 9a50e8fe41034ebf92295d58a9b23ed9
msgid "call(address_of_the_cat, \"get_name\", new StaticArray<u8>(0), 0)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:150
#: 14868f092b494fdf864b7b4b02b22b46
msgid "Lets try our code!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:152
#: 3703e53d4f8945cda00beb9c63ef80e9
msgid "Just compile your main.ts file in the terminal using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:161
#: 5e461d12ba4d4d739432d3f201d98f68
msgid "Make sure your file \"my-sc/package.json\" is written as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:186
#: eb3bbfc826b4488a94c7187cd14d32fb
msgid "Copy the file \"main.wasm\" from my-sc/build/main.wasm to massa/massa-client/main.wasm using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:193
#: ba05be0a453c4616bed5bff54c49c2c2
msgid "Send the smart contract on the blockchain massa using into the massa client the following command :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:199
#: ae0e32e9f53f4680b0839aa7c849f4cc
msgid "And get the events sent by \"generateEvent()\" function used in our script. You can filter them by your emitter address using the following command into the client :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:205
#: fac4129af42c444595481990419561fc
msgid "You should get as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:232
#: 0cb14ab5dc334c379db1b581d1392be3
msgid "2) How to feed him with tokens"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:235
#: 0bddcf95f6ad4b118efc487c16153507
msgid "3) How to set him autonomous"
msgstr ""
