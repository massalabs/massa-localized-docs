# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-26 00:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/archi-intro.rst:5
#: 6ca71d3787434b52b6ee4babc1aeb6ea
msgid "Introduction"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:7
#: 09c167eb0f3a491cb74ef960fceb447b
msgid "We will describe in this document the global architecture of a Massa Node, from the ground up, and introduce relevant definitions and concepts."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:10
#: 1da31fd8affc405db130a752eec60f27
msgid "The goal of the Massa network is to build a consensus between **nodes** to gather and order **blocks** that contain ordered lists of **operations**. An operation ultimate purpose once executed is to act as transitions for the global network state, called the **ledger**."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:15
#: 0e569a5611e040e792fd92cff1180a86
msgid "Operations are produced by external clients and sent to the Massa network via a node. Some operations are containing code to be run as **smart contracts**, enabling complex programmatic modifications of the ledger. Nodes will gather all the pending operations and group them to produce blocks. Each block contains a finite set of operations, limited by the fact that each block has a limited amount of space available to store operations. Traditional blockchains will then typically link blocks one after the other (including a hash of the previous block in the block header), to materialize their temporal ordering. However, unlike traditional blockchains, Massa blocks are not simply chained one after the other, but organized into a more complex spatio-temporal structure, which allows for parallelization and increased performances."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:26
#: f5266eb266094cc18183ae1abb6f9152
msgid "Instead of one chain, there are several threads (T=32) of chains running in parallel, with blocks equally spread on each thread over time, and stored inside **slots** that are spaced at fixed time intervals:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:31
#: b9c9746063e04ef69cb08c5436cb04f7
msgid "The time between two slots located on the same thread is called a **period** and lasts 16s (conventionally called :math:`t_0`). Corresponding slots in threads are slightly shifted in time relative to one another, by one period divided by the number of threads, which is 16s/32 = 0.5s, so that a period contains exactly 32 slots equally spaced over the 32 threads. A **cycle** is defined as the succession of 128 periods and so lasts a bit more than 34min. Periods are numbered by increments of one, so can be used together with a thread number to uniquely identify a block slot. Period 0 is the genesis and contains genesis blocks with no parents."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:41
#: 5b1ec5f812e64a5282aee33d2632b9a3
msgid "The job of the Massa nodes network is to essentially collectively fill up slots with valid blocks. To do so, at each interval of 0.5s, a specific node in the network is elected to be allowed to create a block (more about the selection process below, and the proof of stake sybil resistance mechanism), and will be rewarded if it creates a valid block in time. It is also possible that a node misses its opportunity to create the block, in which case the slot will remain empty (this is called a **block miss**)."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:47
#: 507641d6db674136b2d738eb8f29933e
msgid "In traditional blockchains, blocks are simply referencing their unique parent, forming a chain. In the case of Massa, each block is referencing one parent block in each thread (so, 32 parents). Here is an example illustrated with one particular block:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:53
#: c2ad14e066da4d90ba5220741d5b940e
msgid "Let's introduce some relevant definitions and concepts generally necessary to understand how the Massa network operates. We will then explain the node architecture and how the whole system works."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:58
#: 58390d5f58044348a20e08928c7723ce
msgid "Address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:60
#: 5d9c7b88fa3f4ddba62f3d75e7529cc0
msgid "Each account in Massa has a public and private key associated with it. This is how messages can be signed and identity enforced."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:63
#: 6a68003a7b904f5d8a98a6aa36979625
msgid "The address of an account is simply the hash of its public key."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:66
#: 435024bfcb874740a7b6d69d182bc0bb
msgid "Ledger"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:68
#: 2f7e86aafd644b00bb121e810c0ea0bf
msgid "The ledger is a map that stores a global mapping between addresses and information related to these addresses. It is replicated in each node and the consensus building mechanism ensures that agreement on what operations have been finalized (and in what order) will be reached over the whole network. The ledger is the state of the Massa network, and fundamentally operations (see below) are requests to modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:73
#: 3f949fcc69d54bb1adc1061b9d48fcbe
msgid "The information stored in the ledger with each address is the following:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:76
#: 3a3c42fa603849cdb5a75f5451ccc177
msgid "**Ledger information associated with each address**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:78
#: 39aae2101bdc48c2802edef7249ae14a
msgid "``balance``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:78
#: 2f24aa54e2c443bea731d7f128e2fca5
msgid "The amount of Massa coins owned by the address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:79
#: ../../general-doc/architecture/archi-intro.rst:162
#: 2f20a07829234c82a3d1b50dc1f30bf0
#: 15300e911d8a408997b285165b9c7222
msgid "``bytecode``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:79
#: a0b6a71062524dfb8d9e41aec30b4a12
msgid "When the address references a smart contract, this is the compiled code :raw-html:`<br/>` corresponding to the smart contract (typically contains several functions that act as :raw-html:`<br/>` API entry points for the smart contract)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:82
#: c63bd4d863554918a0cf4cc11290aabc
msgid "``datastore``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:82
#: b7aa490393ca4327a5f56900bb3ab65f
msgid "A key/value map that can store any persistent data related to a smart :raw-html:`<br/>` contract, its variables, etc"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:88
#: 2350772441d34dc3ba109424a7a8ca47
msgid "Smart Contract"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:90
#: 5f235253a7374b8cbad792b7a1a6841b
msgid "Smart contracts are a piece of code that can be run inside the Massa virtual machine and which can modify the ledger, accept incoming requests through a public interface (via smart contract operations). One particularity of Massa smart contracts compared to other blockchain smart contracts is their ability to wake up by themselves independently of an exterior request on their interface. This allows more autonomy and less dependency on external centralized services."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:96
#: 372c084ffce143439678e7d8a7ae5ee6
msgid "Smart contracts are currently written in assemblyscript, a stricter derivation from typescript, which is itself a type-safe version of javascript. AssemblyScript compiles to web assembly bytecode (wasm). Massa nodes Execution Module runs such bytecode. Smart contracts have access to their own datastore, so they can modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:102
#: f93659b6e05446e19a0338e69be30392
msgid "Operation"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:104
#: 030df9b455f64c1cbba410b3bf9ae4af
msgid "Fundamentally, the point of the Massa network is to gather, order and execute operations, recorded inside blocks that are located in slots. There are three types of operations: transactions, roll operations, and smart contract code execution. The general structure of an operation is the following, and the different types of operations differ by their payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:110
#: 0ddd36033df54ffabb370855e71203e3
msgid "**Operation header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:112
#: ../../general-doc/architecture/archi-intro.rst:204
#: eabdc7702ece481ea8beb39c2ffca464
#: 8cbf66ea6193411abd1dae3418d981c1
msgid "``creator_public_key``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:112
#: acc16ca3c66346aeb1d5c6c7af0aecf1
msgid "The public key of the operation creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:113
#: 93ae32eee33549b9a44ef1bacdeca86f
msgid "``expiration_period``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:113
#: 9d070ae3739143298d93af6cdb95d5e2
msgid "Period after which the operation is expired (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:114
#: 28b464ac16a64b3d9e0c7b4639f6528d
msgid "``fee``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:114
#: f9503227f3474ea49f9fbbd3ebe60456
msgid "The amount of fees the creator is willing to pay (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:115
#: 9910d6774823457fa916e3c1b691f777
msgid "``type``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:115
#: c7383ad0e2d84f948769f0bed15dca73
msgid "The type of operation (from 0 to 4: transaction, rollbuy, :raw-html:`<br/>` rollsell, executesc, callsc) (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 8177ff9862d844bca6140e689ef9e385
msgid "``payload``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 355bcb241ca142e09e8a6939036f09d4
msgid "The content of the operation (see below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:118
#: ../../general-doc/architecture/archi-intro.rst:209
#: ec8cc84e355949c89d1a390df2e200f0
#: 0a2d809dbf3945ecbf95a42ed66a712b
msgid "``signature``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:118
#: 2926a950db984cbc8199cd31b56458d8
msgid "signature of all the above with the private key of :raw-html:`<br/>` the operation creator (64 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:123
#: 054c83929e8140e69103e0e9f980a04e
msgid "Transactions operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:125
#: 2bbc469ec69a40378ec18eb3218d19d5
msgid "Transactions are operations that move native Massa coins between addresses. Here is the corresponding payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:128
#: bfae06742b384638bcb2752e27b01881
msgid "**Transaction payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:130
#: f0f6a32ce54c41cc832de709811216dc
msgid "``amount``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:130
#: 5a73ed94fd434780b1b52895cc8d109d
msgid "The amount of coins to transfer (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:131
#: 7d8addd39358424e9371a1f162463fb1
msgid "``destination_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:131
#: 676e30458506453089c8e60d7cc6a9bf
msgid "The address of the recipient (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:135
#: 850951e89e27441ab87e68818b5628de
msgid "Buy/Sell Rolls operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:137
#: d1be0670f3b54accacc8608958119c9a
msgid "Rolls are staking tokens that participants can buy or sell with native coins (more about staking below). This is done via special operations, with a simple payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:141
#: 31f13eceb3a74953b6115835f1a99270
msgid "**Roll buy/sell payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:143
#: 354e84d6a97c46abbf43c3ded0e13189
msgid "``nb_of_rolls``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:143
#: a3f904667aba47d1918ffe00b18c5851
msgid "The number of rolls to buy or to sell (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:148
#: 03a6f24f27a0493f96085fb8ab2cd4cf
msgid "Smart Contract operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:150
#: 1bcfb4c646374af29e7809a6a4afbdd0
msgid "Smart Contracts are pieces of code that can be run inside the Massa virtual machine. There are two ways of calling for the execution of code:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:153
#: 8b961345159744279be9440523fb1f6b
msgid "Direct execution of bytecode"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:155
#: c8d31928eccf4d6cbe86b4f7b018e605
msgid "In this case, the code is provided in the operation payload and executed directly:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:158
#: 24e0546d24094522bd4c13d83ab1ceb0
msgid "**Execute SC payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:160
#: ../../general-doc/architecture/archi-intro.rst:177
#: 8b0d9521a04049bf813f1c9cd1971d8e
#: 29b24b7ebc6445b1a0b0774d5a3f2f7d
msgid "``max_gas``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:160
#: ../../general-doc/architecture/archi-intro.rst:177
#: b0a8e6f54fce4e6a9d061c5adbe4a7f5
#: 8e22ff7c19e746d0b32bd04649ce059b
msgid "The maximum gas spendable for this operation (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:161
#: 1f6fd53a04ac4ef8ac7b759a8a5e5ccc
msgid "``bytecode_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:161
#: 91a84476ac134549a6d7333fec413b30
msgid "The length of the bytecode field (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:162
#: 7127c2e5f79145b48c23652d008517ec
msgid "The bytecode to run (in the context of the caller address)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: 88c9e775def247799a0753477a0eecc0
msgid "``datastore_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: 660f0de436ce48c1bd0121b95f5e837a
msgid "The number of the datastore keys (u64 varint), each record :raw-html:`<br/>` is then stored one after another"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: c118154926ff4fb49d984d36933bdeee
msgid "list of datastore records"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: 4b52363ec1ef44c98901742b517b104b
msgid "Concatenation of ``key_len`` (u8), ``key``, :raw-html:`<br/>` ``value_len`` (u64 varint), ``value``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:169
#: 2ab107edd01c4c1f83ea800427c8f311
msgid "Smart Contract function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:171
#: 028037fc8add475e9a419529f18717a1
msgid "Here, the code is indirectly called via the call to an existing smart contract function, together with the required parameters:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:175
#: 4813f65bbcd34aa1b76bfec032102fad
msgid "**Call SC**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:178
#: 03ce21a236f04a4ea260c71d32f2228e
msgid "``coins``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:178
#: 4d1c2e15432e4b088c06105b1e173d4c
msgid "The coins transferred in the call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:179
#: 5d408e1eeae345b9993eb4cddb748cc6
msgid "``target_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:179
#: d29100f16b0849dc81a6216349e36306
msgid "The address of the targeted smart contract (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:180
#: b296e7d7e97a4950973c151a93e47139
msgid "``function_name_length``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:180
#: 05efe969d5e044429cec9439cc5aa099
msgid "The length of the name of the function that is called (u8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:181
#: b113e59abf294d88884e90e0e14b1930
msgid "``function_name``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:181
#: 8c27db0b2e0f44358379f211eff5a24c
msgid "The name of the function that is called (utf8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:182
#: 72fa0af9dfcf459bb581bee81bf0fece
msgid "``param_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:182
#: 81027be8667f4e48ac2e9e6858235767
msgid "The number of parameters of the function call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:183
#: 8531d06496844929b74fa844a8bdb5f3
msgid "``params``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:183
#: 812e71857d2145838d495b9d9cdbcabc
msgid "The parameters of the function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:187
#: 4d0024eaa9ed4812bd64a5d71dfd8525
msgid "Block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:189
#: 523626473d6f4dd7911701ac3565d9c9
msgid "A block is a data structure built by nodes and its function it to aggregate several operations. As explained above, for each new slot that becomes active, a particular node in the network is elected in a deterministic way with the task of creating the block that will be stored in that slot (more about this in the description of the Selector Module below). A block from a given thread can only contain operations originating from a `creator_public_key` whose hash's five first bits designate the corresponding thread, thus implicitly avoiding collisions in operations integrated into parallel threads."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:197
#: 1d85bcea9c024472947c9011d5102f15
msgid "The content of a block is as follows:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:200
#: 35d30e868fe6443cbbf19576eb9d8ef9
msgid "**Block header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:202
#: 34ad88165340448181bbfa695f0cad01
msgid "``slot``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:202
#: dcdd1ecd88154c128cb31fa683e0de26
msgid "A description of the block slot, defined by a couple (period, thread) that :raw-html:`<br/>` uniquely identify it"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:204
#: ef36dbdefb704a2784f3f194f0bf4ed3
msgid "The public key of the block creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:205
#: c35660cd000c426f900d4aed8d2c50bc
msgid "``parents``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:205
#: 785e623fdecd4d5e86c0b4c0fe1a9e41
msgid "A list of the 32 parents of the block, one parent per thread (parent blocks are :raw-html:`<br/>` identified by the block hash)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:207
#: bc67ee275a5345668acee86fff97fb1e
msgid "``endorsements``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:207
#: 7804e7971476401f8437996c3d5a9bf3
msgid "A list of the 16 endorsements for the block (more about endorsements below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:208
#: a738dcd2d6a54fd2a741c645b45f7c26
msgid "``operations_hash``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:208
#: 1d0df64034194113aa0a7a8cf64f7ddf
msgid "A hash of all the operations included in the block (=hash of the block body below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:209
#: 6add5c1bf0974fb980bcf8382af94cdb
msgid "signature of all the above with the private key of the block creator"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:211
#: de6c933adcc247d69e23077a7522ee79
msgid "**Block body**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:213
#: 1ec236f5f68f449bb9abea45feb59fd7
msgid "``operations``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:213
#: 2be9f34eafbf4c64b0c06b1f43847438
msgid "The list of all operations included in the block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:216
#: b9de251d4bd84620a20246d2ba241635
msgid "Endorsements are optional inclusion in the block, but their inclusion is incentivized for block creators. They are validations of the fact that the parent block on the thread of the block is the best parent that could have been chosen, done by other nodes that have also been deterministically selected via the proof of stake probability distribution (see below). A comprehensive description of endorsements can be found `here <https://docs.massa.net/en/latest/general-doc/architecture/endorsements.html>`_, so we will not go further into details in the context of this introduction."
msgstr ""
