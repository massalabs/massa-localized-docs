# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 00:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/archi-intro.rst:5
#: 1db85546e026467d9936704795601939
msgid "Introduction"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:7
#: 0ac20c5867ed417caf5e77451a3d59d5
msgid "We will describe in this document the global architecture of a Massa Node, from the ground up, and introduce relevant definitions and concepts."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:9
#: 978782603b2e415498ac49c401e06149
msgid "The goal of the Massa network is to build a consensus between **nodes** to gather and order **blocks** that contains ordered lists of **operations**. An operation ultimate purpose once executed is to act as transitions for the global network state, called the **ledger**."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:12
#: daaf98411450465a8be0c700313d9838
msgid "Operations are produced by external clients and sent to the Massa network via a node. Some operations are containing code to be run as **smart contracts**, enabling complex programmatic modifications of the ledger. Nodes will gather all the pending operations and group them to produce blocks. Each block contains a finite set of operations, limited by the fact that each block has a limited amount of space available to store operations. Traditional blockchains will then typically link blocks one after the other (including a hash of the previous block in the block header), to materialize their temporal ordering. However, unlike traditional blockchains, Massa blocks are not simply chained one after the other, but organized into a more complex spatio-temporal structure, which allows for parallelization and increased performances."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:20
#: 2636fed15b4e4323a34af58e48b5effd
msgid "Instead of one chain, there are several threads (T=32) of chains running in parallel, with blocks equally spread on each thread over time, and stored inside **slots** that are spaced at fixed time intervals:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:25
#: 1b9f29d6978d4a25b60a033b8234db50
msgid "The time between two slots located on the same thread is called a **period** and lasts 16s (conventionally called :math:`t_0`). Corresponding slots in threads are slightly shifted in time relative to one another, by one period divided by the number of threads, which is 16s/32 = 0.5s, so that a period contains exactly 32 slots equally spaced over the 32 threads. A **cycle** is defined as the succession of 128 periods and so lasts a bit more than 34min. Periods are numbered by increments of one, so can be used together with a thread number to uniquely identify a block slot. Period 0 is the genesis and contains genesis blocks with no parents."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:32
#: 6645154dd7ac4c9dbd43f8bcb99759d8
msgid "The job of the Massa nodes network is to essentially collectively fill up slots with valid blocks. To do so, at each interval of 0.5s, a specific node in the network is elected to be allowed to create a block (more about the selection process below, and the proof of stake sybil resistance mechanism), and will be rewarded if it creates a valid block in time. It is also possible that a node misses its opportunity to create the block, in which case the slot will remain empty (this is called a **block miss**)."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:38
#: 3466f55aa3c34867b3da2c62f9032c77
msgid "In traditional blockchains, blocks are simply referencing their unique parent, forming a chain. In the case of Massa, each block is referencing one parent block in each thread (so, 32 parents). Here is an example illustrated with one particular block:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:44
#: 6f84e1eabda644e38fad60d9ce318f59
msgid "Let's introduce some relevant definitions and concepts generally necessary to understand how the Massa network operates. We will then explain the node architecture and how the whole system works."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:48
#: f1bde08b10bb4af091fff97063c9b6c3
msgid "Address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:50
#: 31abeae37ffc4f139bcba022b07db739
msgid "Each account in Massa has a public and private key associated with it. This is how messages can be signed and identity enforced."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:53
#: 4a68f526148e4c2e8e60e0d492f50aa2
msgid "The address of an account is simply the hash of its public key."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:56
#: f00c05ed8ef549b99f425d0218415ad5
msgid "Ledger"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:58
#: 02e6db62dee34cd5ba9a0a5ceb9a41d4
msgid "The ledger is a map that stores a global mapping between addresses and information related to these addresses. It is replicated in each node and the consensus building mechanism ensures that agreement on what operations have been finalized (and in what order) will be reached over the whole network. The ledger is the state of the Massa network, and fundamentally operations (see below) are requests to modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:62
#: ab19d51ae5994ec294597b894dce8303
msgid "The information stored in the ledger with each address is the following:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:65
#: 6b23820e9b3c4d66af995ab5d1f85dcf
msgid "**Ledger information associated with each address**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:67
#: fc519a53c88b4ceb9574db556c589142
msgid "``balance``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:67
#: b187acea48ee46b7860e96013d8cc1c2
msgid "The amount of Massa coins owned by the address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:68
#: ../../general-doc/architecture/archi-intro.rst:147
#: 8aed18cb39cc4d8190def946241d7453
#: 929aabe9c0924b95be5f01cb515e1c7d
msgid "``bytecode``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:68
#: 318afbdc31ab441c9925018e7cdeabcd
msgid "When the address references a smart contract, this is the compiled code :raw-html:`<br/>` corresponding to the smart contract (typically contains several functions that act as :raw-html:`<br/>` API entry points for the smart contract)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:70
#: 576c021aad064144ad3f043c8459f897
msgid "``datastore``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:70
#: c46c3ddc0d844df69d9c3a28e88a262f
msgid "A key/value map that can store any persistent data related to a smart :raw-html:`<br/>` contract, its variables, etc"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:76
#: 7105939ea8224ddf91f0c4a0d01efec9
msgid "Smart Contract"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:78
#: cbb6f2e446774b31a2f1a61cb9b9e72d
msgid "Smart contracts are a piece of code that can be run inside the Massa virtual machine and which can modify the ledger, accept incoming requests through a public interface (via smart contract operations). One particularity of Massa smart contracts compared to other blockchain smart contracts is their ability to wake up by themselves independently of an exterior request on their interface. This allows more autonomy and less dependency on external centralized services."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:84
#: ec10d499576e4793a94405ae5e9d0f32
msgid "Smart contracts are currently written in assemblyscript, a stricter derivation from typescript, which is itself a type-safe version of javascript. AssemblyScript compiles to web assembly bytecode (wasm). Massa nodes Execution Module runs such bytecode. Smart contracts have access to their own datastore, so they can modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:89
#: 19ef742ecd4043d0b24a88111e139489
msgid "Operation"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:91
#: 479c9ea48f354df6b27f20d0ae7f6a8d
msgid "Fundamentally, the point of the Massa network is to gather, order and execute operations, recorded inside blocks that are located in slots. There are three types of operations: transactions, roll operations, and smart contract code execution. The general structure of an operation is the following, and the different types of operations differ by their payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:96
#: 2a0039b3301c43a294d42db02c11d01e
msgid "**Operation header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:98
#: ../../general-doc/architecture/archi-intro.rst:186
#: 62ed73d722eb40298de0bff3d91f3581
#: b983a9044c434999a4b9d60f24b94ac6
msgid "``creator_public_key``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:98
#: 0ac731a23f204821957cb735c4b38799
msgid "The public key of the operation creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:99
#: 3f05bf3701fa4908b0c48deed9ec01c5
msgid "``expiration_period``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:99
#: ec3daabd7e6941c1bc95b2f364d3421c
msgid "Period after which the operation is expired (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:100
#: 5cbfd8cb1e784f92819159be9f1041aa
msgid "``fee``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:100
#: 6857f1305c9d415ba0286cd1d961f180
msgid "The amount of fees the creator is willing to pay (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:101
#: c2e59db8d2fb496ea3578ae3dad3c926
msgid "``type``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:101
#: 2f59d6c4dc9b4c2883e2fb2c6f046d30
msgid "The type of operation (from 0 to 4: transaction, rollbuy, :raw-html:`<br/>` rollsell, executesc, callsc) (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:103
#: 5a171630ff5645fca8476e2c0d3e9a9a
msgid "``payload``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:103
#: 98cd91a29a844701a7aa0b73a83e52e1
msgid "The content of the operation (see below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:104
#: ../../general-doc/architecture/archi-intro.rst:191
#: 7ef8d826a4b44f39931a69483c320480
#: 87ad7833eef543ae906290e83f5548d4
msgid "``signature``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:104
#: 31cc3e5396284001a3d942be0ce74996
msgid "signature of all the above with the private key of :raw-html:`<br/>` the operation creator (64 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:109
#: 1046cc662c5b4b52bd7b87a9e61a4861
msgid "Transactions operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:111
#: 64d2c36c6af54d42a15f9de65b68dca5
msgid "Transactions are operations that move native Massa coins between addresses. Here is the corresponding payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:114
#: e5351853c2774a2bae979e9d90465e42
msgid "**Transaction payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:116
#: 00c0e1e6c4584e2b893becf9b17c2c6b
msgid "``amount``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:116
#: 35f2f4984792438c88bee04009f7de54
msgid "The amount of coins to transfer (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: acb3724681f048f4a307abfa55623fcc
msgid "``destination_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 2585839ddf1d496b8efe220aa9442d8b
msgid "The address of the recipient (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:121
#: 837760c5d6ce4a09ab1dcc2d3a83274e
msgid "Buy/Sell Rolls operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:123
#: aa4777699cbf4274b5531d7efed556f3
msgid "Rolls are staking tokens that participants can buy or sell with native coins (more about staking below). This is done via special operations, with a simple payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:127
#: 3e6663d5722a45e5b911f2505de0922f
msgid "**Roll buy/sell payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:129
#: a52477290e5c4862b7ceb960e3f94db3
msgid "``nb_of_rolls``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:129
#: 659a59aa2b1d41dca35486cf14913f56
msgid "The number of rolls to buy or to sell (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:134
#: ae9c226d0a58499ca3c2993a9016a72e
msgid "Smart Contract operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:136
#: 094a9bd57e7448668f4d4bd4da2cb321
msgid "Smart Contracts are pieces of code that can be run inside the Massa virtual machine. There are two ways of calling for the execution of code:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:138
#: b20f47af11014a21912d6a0688ffa446
msgid "Direct execution of bytecode"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:140
#: 502501b4ca404c0f8263dc619a3cda52
msgid "In this case, the code is provided in the operation payload and executed directly:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:143
#: 720a1608beea49718d8638c178282b77
msgid "**Execute SC payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:145
#: ../../general-doc/architecture/archi-intro.rst:161
#: e9b659ab7d724e4fba7a2d7a6cad4f55
#: b1a22b0654d241bfb158d5fc7885a84b
msgid "``max_gas``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:145
#: ../../general-doc/architecture/archi-intro.rst:161
#: 131e198a215046a9891063a8948e5f09
#: b5da27ba42ef443e9f7a7090ab4a4bb2
msgid "The maximum gas spendable for this operation (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:146
#: e829b1c749f14c5dbbf6703453ff3b88
msgid "``bytecode_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:146
#: 78f3e36fe66f4e618e42b0a780997c2f
msgid "The length of the bytecode field (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:147
#: db647d9936e34942b7e273e1b7a5a8f2
msgid "The bytecode to run (in the context of the caller address)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:148
#: ca59efc692624b4e996406146bb12ba2
msgid "``datastore_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:148
#: 105308b7481d47faa3b59d46c05587c2
msgid "The number of the datastore keys (u64 varint), each record :raw-html:`<br/>` is stored then one after the other after"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:150
#: 46c8777c184b4aa5951e6a4e730e5cbe
msgid "list of datastore records"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:150
#: 8d7c376c57314f8d9de31a73cc25eab6
msgid "Concatenation of ``key_len`` (u8), ``key``, :raw-html:`<br/>` ``value_len`` (u64 varint), ``value``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:154
#: eeebe54f7abe44c993f3727a648a605d
msgid "Smart Contract function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:156
#: 029ed5011f2e43b7b3c08136c0688f62
msgid "Here, the code is indirectly called via the call to an existing smart contract function, together with the required parameters:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:159
#: aee46a00f4794d4eb3c0fbf293a48d11
msgid "**Call SC**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:162
#: 8a500c9ec68c4f56b1394ef073c264bb
msgid "``coins``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:162
#: 986391194ee849b782113b2732b738d5
msgid "The coins transferred in the call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: f3b7993605fc4a93bee244d74625dac9
msgid "``target_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: 8eafd211c1c245a2ab67f1ba9473cf75
msgid "The address of the targeted smart contract (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:164
#: 6e0754136d3f4087bd1670cba63df1c0
msgid "``function_name_length``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:164
#: 66773324e9344eca95892eb2cf56a131
msgid "The length of the name of the function that is called (u8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: ed1b70d5d32d4c08a4b47ac06442e2d3
msgid "``function_name``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: 41b0bcef4fd64ac4a8e009a634192d63
msgid "The name of the function that is called (utf8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:166
#: f03c371c778f4cfc93553770b30f74a4
msgid "``param_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:166
#: 7e7852a4cd3e42508c8624d553c8a99c
msgid "The number of parameters of the function call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:167
#: dd70783403d148dfa494594aefc67e45
msgid "``params``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:167
#: 28bf18feb55f4cbd853276dca769e4cf
msgid "The parameters of the function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:171
#: 91bccd566f304ffc8d985894ff8702e8
msgid "Block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:173
#: ee986c7368fe45bba3468179be214a07
msgid "A block is a data structure built by nodes and its function it to aggregate several operations. As explained above, for each new slot that becomes active, a particular node in the network is elected in a deterministic way with the task of creating the block that will be stored in that slot (more about this in the description of the Selector Module below). A block from a given thread can only contain operations originating from a `creator_public_key` whose hash's five first bits designate the corresponding thread, thus implicitly avoiding collisions in operations integrated into parallel threads."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:179
#: cb2ead4ab7364a21b8dfe10a86d585ea
msgid "The content of a block is as follows:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:182
#: 951d7a8cede543fa97f48da72693baf4
msgid "**Block header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:184
#: 138f7a06f200447d858a104588c5f7eb
msgid "``slot``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:184
#: a7e2c5da25a94639a4d5d94d6277e274
msgid "A description of the block slot, defined by a couple (period, thread) that :raw-html:`<br/>` uniquely identify it"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:186
#: 4bce7181a243452cb58df6b9fe852506
msgid "The public key of the block creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:187
#: 010559436a8247a9899a052d8706fc82
msgid "``parents``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:187
#: 9d7b39d9a1594759a50eccad67ab1013
msgid "A list of the 32 parents of the block, one parent per thread (parent blocks are :raw-html:`<br/>` identified by the block hash)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:189
#: de7a837209e54f22b39d7f9cd1c47b43
msgid "``endorsements``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:189
#: bc965ecd1e324aa38ff96d37b6693396
msgid "A list of the 16 endorsements for the block (more about endorsements below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:190
#: 313edd513e4c4a2b92ef84b5c08ba974
msgid "``operations_hash``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:190
#: 14e2106adf6e421fb78e59f3f9be8458
msgid "A hash of all the operations included in the block (=hash of the block body below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:191
#: 514be092893840a1995d58b88601fac7
msgid "signature of all the above with the private key of the block creator"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:193
#: 5308f8d72e88465ea35503f7ce4ebf4a
msgid "**Block body**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:195
#: 17bfb6c8c314437a94885ff6463cede9
msgid "``operations``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:195
#: 45a0be6bcead451d9d5b542ec9bbe6d9
msgid "The list of all operations included in the block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:198
#: 573fa44fb1b4456fbd61ea477f57f6d3
msgid "Endorsements are optional inclusion in the block, but their inclusion is incentivized for block creators. They are validations of the fact that the parent block on the thread of the block is the best parent that could have been chosen, done by other nodes that have also been deterministically selected via the proof of stake probability distribution (see below). A comprehensive description of endorsements can be found `here <https://docs.massa.net/en/latest/general-doc/architecture/endorsements.html>`_, so we will not go further into details in the context of this introduction."
msgstr ""
