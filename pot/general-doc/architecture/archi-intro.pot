# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-25 00:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/archi-intro.rst:5
#: a5e7c47ba01549379f93e2ca332044c2
msgid "Introduction"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:7
#: cebf9154092545f8a2ec5ee64b608a0e
msgid "We will describe in this document the global architecture of a Massa Node, from the ground up, and introduce relevant definitions and concepts."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:10
#: ce29a2456b0741cf95c644577ac923ec
msgid "The goal of the Massa network is to build a consensus between **nodes** to gather and order **blocks** that contain ordered lists of **operations**. An operation ultimate purpose once executed is to act as transitions for the global network state, called the **ledger**."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:15
#: 1a853e033b004be98901c6e7b3d0c5cb
msgid "Operations are produced by external clients and sent to the Massa network via a node. Some operations are containing code to be run as **smart contracts**, enabling complex programmatic modifications of the ledger. Nodes will gather all the pending operations and group them to produce blocks. Each block contains a finite set of operations, limited by the fact that each block has a limited amount of space available to store operations. Traditional blockchains will then typically link blocks one after the other (including a hash of the previous block in the block header), to materialize their temporal ordering. However, unlike traditional blockchains, Massa blocks are not simply chained one after the other, but organized into a more complex spatio-temporal structure, which allows for parallelization and increased performances."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:26
#: 4988eec5f1604b8f861240355f923d33
msgid "Instead of one chain, there are several threads (T=32) of chains running in parallel, with blocks equally spread on each thread over time, and stored inside **slots** that are spaced at fixed time intervals:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:31
#: 4f4ea184f13f4787a39b56b2a26929d4
msgid "The time between two slots located on the same thread is called a **period** and lasts 16s (conventionally called :math:`t_0`). Corresponding slots in threads are slightly shifted in time relative to one another, by one period divided by the number of threads, which is 16s/32 = 0.5s, so that a period contains exactly 32 slots equally spaced over the 32 threads. A **cycle** is defined as the succession of 128 periods and so lasts a bit more than 34min. Periods are numbered by increments of one, so can be used together with a thread number to uniquely identify a block slot. Period 0 is the genesis and contains genesis blocks with no parents."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:41
#: ff390247db0743908b1c95925494f163
msgid "The job of the Massa nodes network is to essentially collectively fill up slots with valid blocks. To do so, at each interval of 0.5s, a specific node in the network is elected to be allowed to create a block (more about the selection process below, and the proof of stake sybil resistance mechanism), and will be rewarded if it creates a valid block in time. It is also possible that a node misses its opportunity to create the block, in which case the slot will remain empty (this is called a **block miss**)."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:47
#: 91749b029a74494db4e24d7009839053
msgid "In traditional blockchains, blocks are simply referencing their unique parent, forming a chain. In the case of Massa, each block is referencing one parent block in each thread (so, 32 parents). Here is an example illustrated with one particular block:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:53
#: c1ed552a25f44df1ad7604c2a87b5773
msgid "Let's introduce some relevant definitions and concepts generally necessary to understand how the Massa network operates. We will then explain the node architecture and how the whole system works."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:58
#: 7cf0d5a230dc4c749413d70583bab18c
msgid "Address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:60
#: 436ca78e27b04d218d05492fe2100a9d
msgid "Each account in Massa has a public and private key associated with it. This is how messages can be signed and identity enforced."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:63
#: 19d68b5550d942dfb04b2dcfe6572453
msgid "The address of an account is simply the hash of its public key."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:66
#: 02d62c7866d84f96bcc0e4f6504cab5d
msgid "Ledger"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:68
#: 5d79718006304bb3ac74544f58ed34a7
msgid "The ledger is a map that stores a global mapping between addresses and information related to these addresses. It is replicated in each node and the consensus building mechanism ensures that agreement on what operations have been finalized (and in what order) will be reached over the whole network. The ledger is the state of the Massa network, and fundamentally operations (see below) are requests to modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:73
#: f282ca8dc575425b9d84c0450ac56a2d
msgid "The information stored in the ledger with each address is the following:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:76
#: be94868e49e244d186fdc4c97c7ea63c
msgid "**Ledger information associated with each address**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:78
#: f3abfe33b5264128ada85d2a0819dc89
msgid "``balance``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:78
#: b8d7a02623e14ae592eee6ac992fd52e
msgid "The amount of Massa coins owned by the address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:79
#: ../../general-doc/architecture/archi-intro.rst:162
#: 506b8b6799ef4577ab5c5c472d6f2105
#: 0170e81ec93c4e73804c99de336c4186
msgid "``bytecode``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:79
#: 1c0c4e834db340c88ef15b554d01d787
msgid "When the address references a smart contract, this is the compiled code :raw-html:`<br/>` corresponding to the smart contract (typically contains several functions that act as :raw-html:`<br/>` API entry points for the smart contract)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:82
#: e7f1848ccfeb4813ba7f6adc6e021b7b
msgid "``datastore``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:82
#: 5a7e2eee94ac4d53a9f6aeb88ea45449
msgid "A key/value map that can store any persistent data related to a smart :raw-html:`<br/>` contract, its variables, etc"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:88
#: 0641fc825aef4b63ad3766449fc497ae
msgid "Smart Contract"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:90
#: 5a84f8ed960540fc95e07fe1e56aa29a
msgid "Smart contracts are a piece of code that can be run inside the Massa virtual machine and which can modify the ledger, accept incoming requests through a public interface (via smart contract operations). One particularity of Massa smart contracts compared to other blockchain smart contracts is their ability to wake up by themselves independently of an exterior request on their interface. This allows more autonomy and less dependency on external centralized services."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:96
#: 4c0c5819cae645ac8bdc114d7c35c07b
msgid "Smart contracts are currently written in assemblyscript, a stricter derivation from typescript, which is itself a type-safe version of javascript. AssemblyScript compiles to web assembly bytecode (wasm). Massa nodes Execution Module runs such bytecode. Smart contracts have access to their own datastore, so they can modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:102
#: 0c74a9ab74084a13962ae023c3025f09
msgid "Operation"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:104
#: 75dc6685f02b41a89edd039d2b94b4da
msgid "Fundamentally, the point of the Massa network is to gather, order and execute operations, recorded inside blocks that are located in slots. There are three types of operations: transactions, roll operations, and smart contract code execution. The general structure of an operation is the following, and the different types of operations differ by their payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:110
#: c20cbc72c5b74f0288620a08d43f66c7
msgid "**Operation header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:112
#: ../../general-doc/architecture/archi-intro.rst:204
#: 629f401cab2d45769e70b336a30ad364
#: 095f24b051824da3ab0abb7778596904
msgid "``creator_public_key``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:112
#: d52123912fa3403c83dc1fb435890059
msgid "The public key of the operation creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:113
#: 7ad165ef5dcf4316a5353aad20400d84
msgid "``expiration_period``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:113
#: 2a25df56f53f4535aac9591326dea3b6
msgid "Period after which the operation is expired (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:114
#: 564f0851897642009e8ccdc817b1222b
msgid "``fee``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:114
#: 4cef4c70fea9405ebefc7c1ebd70f7bc
msgid "The amount of fees the creator is willing to pay (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:115
#: 8d24f666ad6d48c999f40f905b98a071
msgid "``type``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:115
#: 3678c1fb208249efb3fc818e68c1d6fe
msgid "The type of operation (from 0 to 4: transaction, rollbuy, :raw-html:`<br/>` rollsell, executesc, callsc) (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 9c556cdff8dc499c8e29d3dbb10554c9
msgid "``payload``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 505bf8a12b664ec2a3ab8647118b5a8a
msgid "The content of the operation (see below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:118
#: ../../general-doc/architecture/archi-intro.rst:209
#: da209c551e0f4312aa988fa0d8ac03e3
#: 7ee6e641cc8744df88cda6ec8c08aeb8
msgid "``signature``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:118
#: b3409b95232249dfadd3a5428c4e8e69
msgid "signature of all the above with the private key of :raw-html:`<br/>` the operation creator (64 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:123
#: 72d643dd33744d6fbd0efbaee7ac1c72
msgid "Transactions operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:125
#: 6e09674c8e114a4eb097ed65067b05e1
msgid "Transactions are operations that move native Massa coins between addresses. Here is the corresponding payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:128
#: 30672ce006544f4b989cef1c70d9ff3c
msgid "**Transaction payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:130
#: 58cd0d1d425e4a30a92db1ee0d82c25c
msgid "``amount``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:130
#: 4b0c8a46706a4066b5015b88e8dafae0
msgid "The amount of coins to transfer (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:131
#: beee777ad9a54f8eb4f89c0ae68565b8
msgid "``destination_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:131
#: 8677d377c7714ea8ab929e38d8ae5534
msgid "The address of the recipient (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:135
#: 0d649e55c07f4018abe4cab20193221e
msgid "Buy/Sell Rolls operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:137
#: e3f1a9e499af4bdf969012ff9291d1c9
msgid "Rolls are staking tokens that participants can buy or sell with native coins (more about staking below). This is done via special operations, with a simple payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:141
#: 067a89f939954feca3c2496715e0b4ee
msgid "**Roll buy/sell payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:143
#: bc1d50dcf2e145b0babb4e8cb5686b69
msgid "``nb_of_rolls``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:143
#: 1e2eff332403482a9352e4d32105fcd3
msgid "The number of rolls to buy or to sell (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:148
#: 108235be9fcb414aac46255ad2a5eab9
msgid "Smart Contract operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:150
#: c56f3df70b694ff7a4af553d7283f89a
msgid "Smart Contracts are pieces of code that can be run inside the Massa virtual machine. There are two ways of calling for the execution of code:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:153
#: 2693feb60b724bb7abebe18a76df3864
msgid "Direct execution of bytecode"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:155
#: eb52f529960246c79860dcd91c24ff9f
msgid "In this case, the code is provided in the operation payload and executed directly:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:158
#: d28b3f12abe9434b9299f503523e8110
msgid "**Execute SC payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:160
#: ../../general-doc/architecture/archi-intro.rst:177
#: 4b0650419d4c42bfae8c8b2d9d581493
#: c3fa587329e14277b5dfd242060171c8
msgid "``max_gas``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:160
#: ../../general-doc/architecture/archi-intro.rst:177
#: bcb92deab2574bffaa7ac6a50f4f2637
#: 861f1228065e40e29fb08f72b465fa85
msgid "The maximum gas spendable for this operation (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:161
#: cd34c364dc5d49a7a49931c881b2f1a4
msgid "``bytecode_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:161
#: d38635faf2cf4129b0af7c65c61f74e3
msgid "The length of the bytecode field (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:162
#: 7511a4f5dd614210a0fc96e5dd49104e
msgid "The bytecode to run (in the context of the caller address)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: cc22bae9a2424ea384113d95e3e4aee3
msgid "``datastore_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: 018106bfa5df4f1ea835604235dcf7fb
msgid "The number of the datastore keys (u64 varint), each record :raw-html:`<br/>` is then stored one after another"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: 0cab2f7b10114245b8be59d710ad0f3b
msgid "list of datastore records"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: cbdc17fd6b6542e09e7e98c93fd773ee
msgid "Concatenation of ``key_len`` (u8), ``key``, :raw-html:`<br/>` ``value_len`` (u64 varint), ``value``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:169
#: 8cffa0f6b7eb45a783b4562ee43d481c
msgid "Smart Contract function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:171
#: 8cf4f2e8dc7c4192a33cb64dfe14be6a
msgid "Here, the code is indirectly called via the call to an existing smart contract function, together with the required parameters:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:175
#: d9e1e1d355e140dfaf2673833043b5ad
msgid "**Call SC**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:178
#: 34842dfed2424ac2996592ee77660573
msgid "``coins``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:178
#: 90895c8dedc44b7ca4ab086396f33222
msgid "The coins transferred in the call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:179
#: 340086293bb14f95b340888bbbc590df
msgid "``target_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:179
#: 23e961877da546698a3a64521917c9ff
msgid "The address of the targeted smart contract (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:180
#: ae8c2723f0124aab929f630cc1b838b0
msgid "``function_name_length``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:180
#: cab06e0cba494dda86e340b012cc39e8
msgid "The length of the name of the function that is called (u8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:181
#: b8d65fa3d2f94554b2d945a128c0e642
msgid "``function_name``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:181
#: 1ed1a7a447eb439b9f123468c5081025
msgid "The name of the function that is called (utf8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:182
#: 803d14ce3e3d4cb19136adcd5c02060c
msgid "``param_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:182
#: 7e7512d1ff374215b6c2a1d3323208c8
msgid "The number of parameters of the function call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:183
#: e6a0345e9134484e9ec7145842f11da5
msgid "``params``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:183
#: 2c43ba14ff8441c8adf199aefee1af69
msgid "The parameters of the function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:187
#: 80f05adc3a11441980c87ab710b49855
msgid "Block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:189
#: a0b179bad87e4c0eb1b96f1269fdb2fc
msgid "A block is a data structure built by nodes and its function it to aggregate several operations. As explained above, for each new slot that becomes active, a particular node in the network is elected in a deterministic way with the task of creating the block that will be stored in that slot (more about this in the description of the Selector Module below). A block from a given thread can only contain operations originating from a `creator_public_key` whose hash's five first bits designate the corresponding thread, thus implicitly avoiding collisions in operations integrated into parallel threads."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:197
#: e3c95e8ec25c48a8a1d4da66aca428e8
msgid "The content of a block is as follows:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:200
#: de481ef0c3d24855a8fdbf16494ef87e
msgid "**Block header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:202
#: ea323772319a4011a232380893e4cb0d
msgid "``slot``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:202
#: ff35f6aa64f342ed99f30ea554896559
msgid "A description of the block slot, defined by a couple (period, thread) that :raw-html:`<br/>` uniquely identify it"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:204
#: d1fb6d7f4ed245a19a7fc26de1af10a5
msgid "The public key of the block creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:205
#: 1a7bddda73704992a2d7d551413e1333
msgid "``parents``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:205
#: dc65e728c0d14e6bae81badf8c4b64de
msgid "A list of the 32 parents of the block, one parent per thread (parent blocks are :raw-html:`<br/>` identified by the block hash)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:207
#: 8b8924e193b7415a852b10d9b5bf6fc1
msgid "``endorsements``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:207
#: 60f81bd374494ade9b1770f9a8c6d60d
msgid "A list of the 16 endorsements for the block (more about endorsements below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:208
#: 85f4161d7d7c4e94bdb586681dbfb6db
msgid "``operations_hash``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:208
#: 8138562b814b4d0b97a20b636f544516
msgid "A hash of all the operations included in the block (=hash of the block body below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:209
#: 39850cf5b646457ea639e4e6f9c12982
msgid "signature of all the above with the private key of the block creator"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:211
#: bfc6e4e5cadf4029943aa960df3eb153
msgid "**Block body**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:213
#: 0bb3bbd552d04d6f9bdf34a82876efd9
msgid "``operations``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:213
#: 2f49b42f605f40369e31d2a461ba92c8
msgid "The list of all operations included in the block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:216
#: fc975e5b58ff4b68a390b0e2e5fa066a
msgid "Endorsements are optional inclusion in the block, but their inclusion is incentivized for block creators. They are validations of the fact that the parent block on the thread of the block is the best parent that could have been chosen, done by other nodes that have also been deterministically selected via the proof of stake probability distribution (see below). A comprehensive description of endorsements can be found `here <https://docs.massa.net/en/latest/general-doc/architecture/endorsements.html>`_, so we will not go further into details in the context of this introduction."
msgstr ""
