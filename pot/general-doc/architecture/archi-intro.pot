# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 00:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/archi-intro.rst:5
#: 55ebaf752e8e4ab9a3500d2f5958e541
msgid "Introduction"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:7
#: 27ebea3c62c742dd91e81873b2d0d5e7
msgid "We will describe in this document the global architecture of a Massa Node, from the ground up, and introduce relevant definitions and concepts."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:9
#: 733d405f3a7b4538a95866d1ed3b636f
msgid "The goal of the Massa network is to build a consensus between **nodes** to gather and order **blocks** that contains ordered lists of **operations**. An operation ultimate purpose once executed is to act as transitions for the global network state, called the **ledger**."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:12
#: fcf4e95439684a119277019f088e41ce
msgid "Operations are produced by external clients and sent to the Massa network via a node. Some operations are containing code to be run as **smart contracts**, enabling complex programmatic modifications of the ledger. Nodes will gather all the pending operations and group them to produce blocks. Each block contains a finite set of operations, limited by the fact that each block has a limited amount of space available to store operations. Traditional blockchains will then typically link blocks one after the other (including a hash of the previous block in the block header), to materialize their temporal ordering. However, unlike traditional blockchains, Massa blocks are not simply chained one after the other, but organized into a more complex spatio-temporal structure, which allows for parallelization and increased performances."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:20
#: f974adace0484b7aa2a08d983f1f62ee
msgid "Instead of one chain, there are several threads (T=32) of chains running in parallel, with blocks equally spread on each thread over time, and stored inside **slots** that are spaced at fixed time intervals:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:25
#: 3df6ffac1cec43b8a70a3570a195a6b9
msgid "The time between two slots located on the same thread is called a **period** and lasts 16s (conventionally called :math:`t_0`). Corresponding slots in threads are slightly shifted in time relative to one another, by one period divided by the number of threads, which is 16s/32 = 0.5s, so that a period contains exactly 32 slots equally spaced over the 32 threads. A **cycle** is defined as the succession of 128 periods and so lasts a bit more than 34min. Periods are numbered by increments of one, so can be used together with a thread number to uniquely identify a block slot. Period 0 is the genesis and contains genesis blocks with no parents."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:32
#: 38d43607ec0b4b3991444b1e81c77876
msgid "The job of the Massa nodes network is to essentially collectively fill up slots with valid blocks. To do so, at each interval of 0.5s, a specific node in the network is elected to be allowed to create a block (more about the selection process below, and the proof of stake sybil resistance mechanism), and will be rewarded if it creates a valid block in time. It is also possible that a node misses its opportunity to create the block, in which case the slot will remain empty (this is called a **block miss**)."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:38
#: f4d21034869d4327810d4aec90c6395d
msgid "In traditional blockchains, blocks are simply referencing their unique parent, forming a chain. In the case of Massa, each block is referencing one parent block in each thread (so, 32 parents). Here is an example illustrated with one particular block:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:44
#: 4e673385199b44f486f2e787c82cd342
msgid "Let's introduce some relevant definitions and concepts generally necessary to understand how the Massa network operates. We will then explain the node architecture and how the whole system works."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:48
#: 65357bafe23a437183c22f105bcea9b8
msgid "Address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:50
#: 33966c6bf6f441ffacea1b1b6df6e8c4
msgid "Each account in Massa has a public and private key associated with it. This is how messages can be signed and identity enforced."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:53
#: e85c3d77d97042a4a52bed1297bb9d30
msgid "The address of an account is simply the hash of its public key."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:56
#: 7a2279a9e7d443f9893cb82f472ff4a6
msgid "Ledger"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:58
#: 88401936cb8946dfad3eb6f70d8f3188
msgid "The ledger is a map that stores a global mapping between addresses and information related to these addresses. It is replicated in each node and the consensus building mechanism ensures that agreement on what operations have been finalized (and in what order) will be reached over the whole network. The ledger is the state of the Massa network, and fundamentally operations (see below) are requests to modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:62
#: 91bf4b5f63f24a0fb2c01ac15f541093
msgid "The information stored in the ledger with each address is the following:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:65
#: b02e2a1a9a024ad788155450ca34e28c
msgid "**Ledger information associated with each address**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:67
#: 006945b52114414199d4ea5e9930e758
msgid "``balance``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:67
#: 4bcc7c83793a4e5880d57e11634eeda8
msgid "The amount of Massa coins owned by the address"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:68
#: ../../general-doc/architecture/archi-intro.rst:147
#: e1a93d21133042f1923499f02e6a6208
#: 5d32350cb88c4c968304eb36318bfc92
msgid "``bytecode``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:68
#: 85ea35739506439f89c8ef3ef573649b
msgid "When the address references a smart contract, this is the compiled code :raw-html:`<br/>` corresponding to the smart contract (typically contains several functions that act as :raw-html:`<br/>` API entry points for the smart contract)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:70
#: 9c32a34077de48cf83ad97c2c5f7604a
msgid "``datastore``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:70
#: 60d746d6d7ea4364ab3d54dfdd64307d
msgid "A key/value map that can store any persistent data related to a smart :raw-html:`<br/>` contract, its variables, etc"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:76
#: 41d451a23f11478d8cb034e1372e0c4f
msgid "Smart Contract"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:78
#: 4f561de7c1bf4064b78fa7ffc0b8a115
msgid "Smart contracts are a piece of code that can be run inside the Massa virtual machine and which can modify the ledger, accept incoming requests through a public interface (via smart contract operations). One particularity of Massa smart contracts compared to other blockchain smart contracts is their ability to wake up by themselves independently of an exterior request on their interface. This allows more autonomy and less dependency on external centralized services."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:84
#: fdcbedb8c4054a229650aab24a566730
msgid "Smart contracts are currently written in assemblyscript, a stricter derivation from typescript, which is itself a type-safe version of javascript. AssemblyScript compiles to web assembly bytecode (wasm). Massa nodes Execution Module runs such bytecode. Smart contracts have access to their own datastore, so they can modify the ledger."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:89
#: 4b2e4d4227c54004b96b541a90c78723
msgid "Operation"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:91
#: 5b7351b2e4e1460fb7125024f35849ab
msgid "Fundamentally, the point of the Massa network is to gather, order and execute operations, recorded inside blocks that are located in slots. There are three types of operations: transactions, roll operations, and smart contract code execution. The general structure of an operation is the following, and the different types of operations differ by their payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:96
#: f509fc9122b44484a35886bbb34cd338
msgid "**Operation header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:98
#: ../../general-doc/architecture/archi-intro.rst:186
#: 240b6fc66f744b60b43090824f0a5dba
#: 25a393077b68461c9dd9df27698d1dcb
msgid "``creator_public_key``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:98
#: 4ede49cac8cb41d9b3acc9096ec98efc
msgid "The public key of the operation creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:99
#: 17707dea5b5c4aaaa62b1122b77db80c
msgid "``expiration_period``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:99
#: 2f084f95b16e4cf6b45cfa869f575825
msgid "Period after which the operation is expired (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:100
#: 1c78a53519b24744ba6a3e8da99e7493
msgid "``fee``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:100
#: a2c7dfbcf992499bb6a2f20b5adb4220
msgid "The amount of fees the creator is willing to pay (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:101
#: 03d938c24aee4954b91b50c50f710f4d
msgid "``type``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:101
#: 081b857e2f1b412d8c95ecb087c5b251
msgid "The type of operation (from 0 to 4: transaction, rollbuy, :raw-html:`<br/>` rollsell, executesc, callsc) (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:103
#: c9ff13462adf454eb1f4c8c3bb833788
msgid "``payload``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:103
#: f00d112cf5dc4727b377beb87f39fb94
msgid "The content of the operation (see below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:104
#: ../../general-doc/architecture/archi-intro.rst:191
#: 2e8a69544e5340aca70c43041b9c1916
#: 32107f2c07ed400cb77c3708787c54de
msgid "``signature``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:104
#: 6c0f9c42698141d4910583531327cf70
msgid "signature of all the above with the private key of :raw-html:`<br/>` the operation creator (64 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:109
#: 785d9136223449eca080ead71c61ec4b
msgid "Transactions operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:111
#: 7727855ed5584a8fbb811daed28b83f2
msgid "Transactions are operations that move native Massa coins between addresses. Here is the corresponding payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:114
#: aa4c6a994e4b4a0580793c5cc5d95831
msgid "**Transaction payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:116
#: 09e225c5dcbf4e5fa349f645d67c4ca7
msgid "``amount``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:116
#: dbd57ff961de4b8185fadf0e70e57d1f
msgid "The amount of coins to transfer (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 2e2b06580f3b4556b08d45a7731ceee5
msgid "``destination_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:117
#: 36543b98fe6741d19ed45adaf853a385
msgid "The address of the recipient (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:121
#: c5e14924d0954e0183196a188f867c43
msgid "Buy/Sell Rolls operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:123
#: 98cbc03df3654d23b192f8b923a16474
msgid "Rolls are staking tokens that participants can buy or sell with native coins (more about staking below). This is done via special operations, with a simple payload:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:127
#: 1d14a57d46944970b8af7e197f44c4df
msgid "**Roll buy/sell payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:129
#: d0fde392ec2c469daaf3ad9fa3e1e2ce
msgid "``nb_of_rolls``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:129
#: 651435f5a9ba49f8889f42335f7c8da5
msgid "The number of rolls to buy or to sell (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:134
#: 89aff2c12e9440d99d1ce9bb1ae51c40
msgid "Smart Contract operations"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:136
#: 3f4009aaf09a401280734acd9e2e2fc2
msgid "Smart Contracts are pieces of code that can be run inside the Massa virtual machine. There are two ways of calling for the execution of code:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:138
#: 8952367264664a1b9ff2bd1c0af7e0f2
msgid "Direct execution of bytecode"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:140
#: 43587dde89b6471b9a25c5ab9d6813e7
msgid "In this case, the code is provided in the operation payload and executed directly:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:143
#: 178005daf89a456ebe93d8b0c360cc63
msgid "**Execute SC payload**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:145
#: ../../general-doc/architecture/archi-intro.rst:161
#: d86185a260d44597908243e6294f5040
#: 0f082951750f47449b0143fec1319541
msgid "``max_gas``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:145
#: ../../general-doc/architecture/archi-intro.rst:161
#: 5f86c2f8207d400fa3e6c4e6c66faf65
#: 92d18b4701844c9fb476b27bbd5a5b59
msgid "The maximum gas spendable for this operation (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:146
#: d39da4f4d2384ccab48f3b73e7e6d594
msgid "``bytecode_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:146
#: a8c59196e3f94c86997f98af1b863462
msgid "The length of the bytecode field (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:147
#: 1945c1d7e97f47e3ac74ade579a78cf9
msgid "The bytecode to run (in the context of the caller address)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:148
#: 374e484aba714aed9ac67afadfafc097
msgid "``datastore_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:148
#: 0f49d3b6d38046baba2df9b3a465215d
msgid "The number of the datastore keys (u64 varint), each record :raw-html:`<br/>` is stored then one after the other after"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:150
#: d6d94bef312b4daba2a13061ec9fae0b
msgid "list of datastore records"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:150
#: 127b7bc712994c309c8437fae2355a36
msgid "Concatenation of ``key_len`` (u8), ``key``, :raw-html:`<br/>` ``value_len`` (u64 varint), ``value``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:154
#: 28826450ae104e1cb4c72fd96cb28791
msgid "Smart Contract function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:156
#: e3d14666f92c4621804670011ee5aefc
msgid "Here, the code is indirectly called via the call to an existing smart contract function, together with the required parameters:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:159
#: 902a56841b534e6eb4850d6def97ac94
msgid "**Call SC**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:162
#: 3966a5e049654d968e27c696c37fbcee
msgid "``coins``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:162
#: e2386883d1bf49a1a3e288a90c011c70
msgid "The coins transferred in the call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: 22d334102f8c403ea5dfeabc7b71d5bd
msgid "``target_address``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:163
#: 24e96b3cf3c74ca2bb7978f955d3ff30
msgid "The address of the targeted smart contract (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:164
#: 8d9a7e88cf1c41f7a686ec155da56e48
msgid "``function_name_length``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:164
#: 4a620d41d82247279e332fecbecbd1d2
msgid "The length of the name of the function that is called (u8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: 7f6965ea24614af3bc3471e175722d34
msgid "``function_name``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:165
#: bdcfcd59f8de4cae9ab085c97850b96f
msgid "The name of the function that is called (utf8)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:166
#: 3094be8bf6b3473186ef58be61514577
msgid "``param_len``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:166
#: adce66b9febf4b0ebb274d3e334fad73
msgid "The number of parameters of the function call (u64 varint)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:167
#: 7734420b3cc642e6b2424836fe755ca3
msgid "``params``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:167
#: 93dd9aa2a5f3408c8101d4d41d18734e
msgid "The parameters of the function call"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:171
#: eb118e4e6db24e4ebfa2924a86680dc6
msgid "Block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:173
#: 5ce621d0860d432880da457cbfa639e8
msgid "A block is a data structure built by nodes and its function it to aggregate several operations. As explained above, for each new slot that becomes active, a particular node in the network is elected in a deterministic way with the task of creating the block that will be stored in that slot (more about this in the description of the Selector Module below). A block from a given thread can only contain operations originating from a `creator_public_key` whose hash's five first bits designate the corresponding thread, thus implicitly avoiding collisions in operations integrated into parallel threads."
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:179
#: 31c7a50860e84e81b54ebb6d2851bfc9
msgid "The content of a block is as follows:"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:182
#: 869702ac3f514c8a91b15ae562e33e8b
msgid "**Block header**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:184
#: 6f9f1f2510d54157aa31e32abd336fec
msgid "``slot``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:184
#: ca36114356c24e9a8fd25eb56ab1b6e4
msgid "A description of the block slot, defined by a couple (period, thread) that :raw-html:`<br/>` uniquely identify it"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:186
#: 6c787dd58f5a4a80b0c3797971637b41
msgid "The public key of the block creator (32 bytes)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:187
#: 0aac7e5f010b4167aa5b4c97369fc748
msgid "``parents``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:187
#: 15831f55adcb430882204dadfc5b5a70
msgid "A list of the 32 parents of the block, one parent per thread (parent blocks are :raw-html:`<br/>` identified by the block hash)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:189
#: 5d1cfab26fae4a85ac9d8e8513c5c62b
msgid "``endorsements``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:189
#: 4e595a546d304c718575fc12933d6e19
msgid "A list of the 16 endorsements for the block (more about endorsements below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:190
#: c18b253f160e4b889e8bf311d1701709
msgid "``operations_hash``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:190
#: a4e5998f3f7d432897e7a1f65c46c97c
msgid "A hash of all the operations included in the block (=hash of the block body below)"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:191
#: 417c4a12ca224b569cdc6eca9c047dee
msgid "signature of all the above with the private key of the block creator"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:193
#: fd80ef0ffed1494ab4adb866ee122d7c
msgid "**Block body**"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:195
#: 261ab60bb44f4782b1be80d32a3c0f6f
msgid "``operations``"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:195
#: ae798d2fc56243ef9e0aab0a8d865fd1
msgid "The list of all operations included in the block"
msgstr ""

#: ../../general-doc/architecture/archi-intro.rst:198
#: 0e699eb54e6a47c483339061ba8ad910
msgid "Endorsements are optional inclusion in the block, but their inclusion is incentivized for block creators. They are validations of the fact that the parent block on the thread of the block is the best parent that could have been chosen, done by other nodes that have also been deterministically selected via the proof of stake probability distribution (see below). A comprehensive description of endorsements can be found `here <https://docs.massa.net/en/latest/general-doc/architecture/endorsements.html>`_, so we will not go further into details in the context of this introduction."
msgstr ""
