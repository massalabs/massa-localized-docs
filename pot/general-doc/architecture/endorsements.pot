# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-23 00:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/endorsements.rst:2
#: 1432d45a3d1146e89b805fa31cccf24e
msgid "Endorsements"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:5
#: 695e33624eaf47fe9f4866f19759e1d3
msgid "Intro"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:7
#: f7b035ac102b46b2a5cd6c9d2a2c61d0
msgid "Massa uses the Proof-of-Stake selection mechanism with Nakamoto consensus. In that context, when there are multiple cliques in close competition, we want all nodes to converge towards a single clique as fast as possible to minimize finality time and maximize the quality of the consensus. To achieve this, we draw inspiration from Tezos and introduce the concept of Endorsement."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:13
#: 50842a24a00a4da79a088d465453bbde
msgid "Basic principle"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:15
#: e860563101ad4cffadc3ecd5e017ceae
msgid "Each block header has `E` ordered endorsement slots: each one can include an endorsement or not. Each endorsement contains:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:18
#: 1835160dff48429aa772b9747bb001e2
msgid "The slot `S` in which it is meant to be included. The endorsement can only be included in blocks of slot `S`."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:19
#: 146ef36bc9fd4bf0b63f2358fbec3e0a
msgid "The hash of the endorsed block. This is the hash of the latest blockclique block of thread `S.thread` according to the endorsement creator at the moment the endorsement was created."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:21
#: 649ad5a49d6e4ebcbc05cc9dbb28690d
msgid "The index of the endorsement slot within the header from `0` (included) to `E-1` (included). The endorsement can only be included at that endorsement slot index within the block eader."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:23
#: bd17ecb54a84498694d30fa4c7472ea9
msgid "The public key of the creator of the endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:24
#: 555f4ef8ec4e42df931060b653621e93
msgid "The signature of all the previous fields with the private key of the creator of the endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:26
#: 0255e7c61b4e4f90a3e810371ff2a4b0
msgid "At every slot `S`, we use the existing Proof-of-Stake selection mechanism to not only draw the block creator for that slot, but also `E` other stakers indexed from `0` (included) to `E-1` (included) that can create Endorsements meant to be included in block headers of slot `S` at their respective endorsement slot index."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:30
#: 5f92879a76a24096afc0f742ea41b4a7
msgid "Conceptually, each endorsement meant to be included at a slot `S` can be seen as a single vote endorsing the parent in thread `S.thread` that the endorsement creator would have chosen if they had to create a block at slot `S`."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:33
#: a71b77d32e8348bd9152cea1f6eb274e
msgid "The likelihood of the attacker getting lucky and being selected for `N` consecutive PoS draws to attack/censor the system decays exponentially with `N`. With endorsements, we don't have to wait for `N` blocks to account for `N` proof-of-stake draws to happen as `E+1` draws happen at every slot (1 for the block creator and `E` for endorsement creators). In the consensus algorithm, we choose the clique of highest fitness as the blockclique. A block including `e` endorsements out of the maximum `E` contributes a fitness `e + 1` to the cliques it belongs to. The fitness of a block is therefore reflected by the number of PoS draws that were involved in creating it."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:40
#: 06ce2f6342574d64a18728744d0dd5e9
msgid "The net effect of this mechanism is to increase safety and convergence speed by allowing block producers to quickly choose the best clique to extend according to the \"votes\" provided by the endorsements."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:44
#: 8ed2be89dc58407981642b88d59e99b3
msgid "Structure of an endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:58
#: f862bff3ac034187941c433c21877eea
msgid "Note that the `WrappedEndorsement` structure includes the underlying `Endorsement` as well as the signature, and the public key of the endorsement producer."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:61
#: e990de395c4d40e7bb328decf99e5dc2
msgid "Within a block, endorsements are fully included inside the header."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:63
#: 95f62573032f478b9fa81a11c4839969
msgid "A header is invalidated if:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:65
#: 316e579b3a354dcdb7b17c4dc2a1d3de
msgid "it contains strictly more than `E` endorsements"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:66
#: 1979dc648df64bb19bb9b60ebb665d31
msgid "at least one of the endorsements fails deserialization or signature verification"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:67
#: 11ba51092f1140818ccea40328c67c4f
msgid "at least one of the endorsements endorses a block different than the parent of the including block within its own thread"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:69
#: cd4af8d4bce94972a57c024db3a01ab4
msgid "any of the endorsements should not have been produced at that `(endorsement.slot, endorsement.index)` according to the selector"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:71
#: 1d473fd616414d0995d5188a13266372
msgid "there is strictly more than one endorsement with a given `endorsement.index`"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:74
#: 455a37ac359245909d336982b67af8f4
msgid "Lifecycle of an endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:76
#: 8fe654cf1268449a9eee1da066b524f0
msgid "To produce endorsements for slot `S`, the Endorsement Factory wakes up at `timestamp(S) - t0/2` so that the previous block of thread `S.thread` (the endorsed block) had the time to propagate, and so that the endorsement itself has the time to propagate to be included in blocks of slot `S`. It then checks the endorsement producer draws for slot `S`. At every slot, there are `E` endorsement producer draws, one for each endorsement index from `0` (included) to `E-1` (included). The factory will attempt to create all the endorsements that need to be produced by keypairs its wallet manages. To choose the block to endorse, the factory asks Consensus for the ID of latest blockclique (or final) block `B` in thread `S.thread` that has a strictly lower period than `S.period`. Every created endorsement is then sent to the Endorsement Pool for future inclusion in blocks, and to Protocol for propagation to other nodes."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:85
#: da6094bf54714e2182d913755f4d1ffe
msgid "In Protocol, endorsements can be received from other modules, in which case they are propagated. They can also be received from other nodes, in which case they added to the Endorsement Pool and propagated. Endorsements are propagated only to nodes that don't already know about them (including inside block headers)."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:89
#: a345f29fee214b02a20358e84d660740
msgid "The Endorsement Pool stores a finite number of endorsements that can potentially be included in future blocks created by the node. Consensus notifies the Endorsement pool of newly finalized blocks, which allows the pool to eliminate endorsements that can only be included in already-finalized slots and are therefore not useful anymore."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:93
#: 5077f7410727447aac086cb1f0553f64
msgid "When the Block Factory produces a block and needs to fill its header with endorsements, it asks the Endorsement Pool for the endorsements that can be included in the block's slot and that endorse the block's parent in its own thread."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:97
#: f47414c7cf5349838d715393cac23bbc
msgid "Incentives and penalties"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:99
#: 7a21bed0eb3f4a6c900cb61cb262c54f
msgid "There needs to be an incentive in:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:101
#: f0661d678026458390b239915e8850d4
msgid "creating blocks that can be endorsed, and also avoid publishing them too late so that endorsers have the time to endorse them"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:103
#: 875d6c52b86145329ecaa507661ca24b
msgid "creating and propagating endorsements, also doing so not too early in order to endorse the most recent block, and not too late for subsequent blocks to be able to include the endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:105
#: ea63fb036a234f6fb55ca9a384d8c58c
msgid "including endorsements in blocks being created, and also not publishing them too early to include as many endorsements as possible"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:108
#: 18a098b0e4344145ac9374a4794ef3cd
msgid "To achieve this, we note `R` the total amount of coin revenue generated by the block: the sum of the per-block monetary creation, and all operation fees. We then split `R` into `1+E` equal parts called `r = R/(1+E)`."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:111
#: e74b9ccf8b61401cb47c575eede2de4a
msgid "`r` is given to the block creator to motivate block creation even if there are no endorsements available"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:112
#: 00d327c4053a47579ac6a4a415d6e439
msgid "for each successfully included endorsement:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:114
#: 4b3881ad76184d5a8cf48aba3791ab47
msgid "`r/3` is given to the block creator to motivate endorsement inclusion"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:115
#: d95ac414d8a44d7a85738e24ae306eaa
msgid "`r/3` is given to the endorsement creator to motivate endorsement creation"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:116
#: 90bcebfbd9f84954ac547b03ccce712b
msgid "`r/3` is given to the creator of the endorsed block to motivate the timely emission of endorsable blocks"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:118
#: c0c1a72a24bb4d2e92b15e77d93544a9
msgid "Note that this split also massively increases the frequency at which stakers receive coins, which reduces the incentive to create staking pools."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:122
#: 06722ae9e8be4037bb126ca03027944b
msgid "Choosing the value of `E`"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:124
#: e89a59cbba054990bed69c15dadb25c5
msgid "The value of `E` has implication both in the safety and in the performance of the protocol. In terms of performance, the greater the value of `E` is, the more ressources (bandwith, memory, computing power) is needed to generate, broadcast and include endorsements, which could induce latency. One the other hand, the value of `E` has implications in the safety of the protocol. The threat we are looking at here is the finality fork attack."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:130
#: 97c8313a7618463e97634b838749de25
msgid "Finality fork attacks"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:132
#: 631bf82727554157b40b41790a698d8b
msgid "A finality fork attack is when an attacker that controls a portion `beta` of the total stake, decides not to broadcast the blocks he has been selected to produce, in order to construct an alternative and undisclosed clique. The attacker's goal is to produce an attack clique that has a fitness greater than the honnest clique. If he manages to do so, the attacker can wait until the finalization time of a block `b` belonging to the honest clique, to broadcast its attack clique. Because the fitness of the attack clique is greater than the honest one, a portion of the network will consider the attacker's clique to be the good version of the chain, while some other portion will have finalized block `b`. This results in a network partion, where two or more portion of the network do not agree on the state of the ledger."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:141
#: d2e7fdd983ef4d6589ead0644c78d9b0
msgid "Security level"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:143
#: be77815b7065491d9d10093b6fd92d5b
msgid "The factors that influence the success probability of a finality fork attack are the number of endorsments per block `E`, the portion of the total stake controlled by the attacker `beta` and a finality parameter `F`. The finality parameter `F` respresents a number of descendant a block must have, before being finalized. The portion of the stake `beta` is positively correlated with the success probability of an attack, while `F` and `E` are inversly correlated. We do not have control over `beta`, thus we define our security level as a portion `beta` and a maximum success probability of an attack. We chose `beta = 1/3` because it is the maximum proportion of Byzantine participants BFT based consensus protocols assume. We chose `p_success <= 1e-11` because it corresponds to a period of time of around 10 000 years (given one block every 0.5s). We must chose the minimal parameters `F` and `E` that match this security level."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:153
#: 66b87a19bce2413fbc42b51367bfbad4
msgid "Simulation results"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:155
#: 6dde6a48e4f34d928a6d4dae00e32880
msgid "Our simulations results show that with `F = 64`, `E = 16` and given 32 thread and a portion `beta = 1/3` of the stake controlled by the attacker, the probability of success of an attack is in the order of `1e-11`. You can find more details in the [technical paper](https://arxiv.org/abs/1803.09029)."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:162
#: dd34738d183a4c339399c2afb4460703
msgid "Future features"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:164
#: 5d549742ec5945d18ff9575bef08a344
msgid "There is still optimizations that we can perform on the endorsements and their workflow :"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:166
#: 027d09baa5de4fc3b2c0b096b1f2edf6
msgid "Add more verifications when receiving an endorsement from an other node of the network to avoid storing/propagating invalid endorsements. `Issue <https://github.com/massalabs/massa/issues/3020>`__"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:168
#: 67b16d60d4c3495b8b953581ad5927c1
msgid "Use stored endorsements to choose the best parents. `Issue <https://github.com/massalabs/massa/issues/2976>`__"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:169
#: a9632c5951d444448d65d6f6b0f1722d
msgid "Split blocks and endorsements productions to an other binary so that they can be run on different machines and be more customized. `Discussion <https://github.com/massalabs/massa/discussions/2895>`__"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:171
#: 90767c3451ca4c4f8879ee0a9ba099d7
msgid "To punish network and CPU overload attacks, a denunciations system will be implemented to point out the stakers that produces two different endorsements for the same `(slot, index)`. `Issue <https://github.com/massalabs/massa/issues/3022>`__"
msgstr ""
