# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-10 00:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/archi-global.rst:2
#: 432ca5fa79a14ef8853719ebe7d6d069
msgid "Architecture"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:4
#: 85639bf93f564c1984ca313e38017fec
msgid "This is the diagram of the architecture of the software modules involved in building, endorsing and propagating blocks. The bottom part corresponds to a single process running in a node and is in charge of the execution and consensus building. The pool and factories, referred to as \"factory\", can be potentially running in a different process or be part of the node. Overall, each of the modules described here runs inside one or more threads attached to their respective executable process (NB: the factory/node separation is not yet implemented, but will be soon)."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:12
#: 011711cf0ff34f6faf931bcf176c8def
msgid "We will explain below the different modules present in this diagram, and simulate the production of an operation to show how it navigates through the different modules to better understand how blocks are produced and propagated."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:16
#: 544d73201ae94312979983c7fd9af04b
msgid "Bootstrap Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:18
#: 2eeb9ed168c24904933500d9dacc2eff
msgid "The bootstrap module is responsible for the initial synchronization of the node with the rest of the network. It is responsible for downloading the list of peers, the current graph of blocks, the ledger, the asyncronous pool, state of the Proof-of-Stake and latests executed operations."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:22
#: 278f8c2e00d843aba6e35f69a93cde3e
msgid "The bootstrap will be done from a server that is listed on the configuration of the node. Bootstrap is the entry point of the network so you have to be careful on which node you connect to avoid downloading malicious data."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:26
#: 887d94c7cb1745878f9119d40b3c1a01
msgid "API Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:28
#: 98897947bca64d94933d4a0323989457
msgid "The API Module is the public window of the node to the rest of the world. It allows for interactions with external clients or factories via a JSON RPC protocol."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:31
#: 4d5e026909dd4f609e1b5e81d419c911
msgid "The API includes interfaces to do the following:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:33
#: 5d1b1635938a4fdbbe4de0e5b801b77f
msgid "publish a new operation from a client"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:34
#: f0058295a6714b1b84c4449ceab0103b
msgid "query the network about balances or ledger status"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:35
#: 9a388aee2cf442e5bcf130b9764be9a7
msgid "allow for synchronization between remote pool/factory nodes and the consensus nodes, by sending/asking for blocks, best parents, draws, etc."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:39
#: b716e712b4ec497ab17e810e3d63194a
msgid "Protocol/Network Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:41
#: 42cf008f8f92463e8e7bbfc74d8e6ccc
msgid "The Protocol/Network Module implements the protocol connecting consensus nodes. This protocol is supported by a binary and optimized transport layer and does not use JSON RPC."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:44
#: 5eef08aea70e4b08aa4266df559e203c
msgid "The Protocol/Network Module will relay all operations/blocks creation and propagation, so that all other nodes in the network can synchronize their internal state, following a type of gossip synchronization protocol."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:47
#: 2885957b34df443a83213b2fdd5ebef5
msgid "The type of messages that can be relayed via the Protocol/Network Module include:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:49
#: a41b0de93c8548128216337996c38aa7
msgid "blocks/operations/endorsements propagation (either getting in or out of the node)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:50
#: d49333e576a04513b08c727f6dbbea2f
msgid "nodes ban requests"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:51
#: 7c05e74052414c5787132e5dcb24c5d5
msgid "connectivity infos/stats"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:54
#: 81484961e7e6416ca26dbd6fac5eae6d
msgid "Selector Module, Proof of Stake sybil resistance"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:56
#: 0b6b15e809e644a3acecfd6c439cd868
msgid "Every 0.5s, a new slot becomes active to receive a new block. A determinist selection mechanism ensures that one of the nodes in the network is elected to have the responsibility to build the block for that slot. This mechanism must have several key properties:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:60
#: 1235b3f972884b9282ae47adfd8f4419
msgid "it should be sybil resistant, so that it is not possible to increase one's odds of being elected by creating multiple clones of oneself (sybil) without a cost that is equal or greater than the cost of increasing one's odds for oneself only"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:63
#: 13d03aba242d4d01b15ae36c6fc065d3
msgid "it should be deterministic, so that all nodes in the network will agree on the result of the selection at any given time"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:65
#: ef8166e07d4d4c7cbdf5312621173735
msgid "it should be fair, so that each participant has a well-defined probability of being selected somehow proportional to the cost of participating, and draws converge towards this probability distribution over time"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:68
#: 63704384f4fa4f9e9f1833e779c0fb47
msgid "The way sybil resistance is achieved here is via the proof of stake mechanism. Nodes who want to participate in the block creation lottery will have to stake \"rolls\" that they buy with Massa coins. If they try to cheat by creating fake blocks or multiple blocks on the same slot, their stake will be taken away from them (slashing) and they would suffer the loss. The probabilistic \"surface\" of a participant is equal to its total stake, which makes the creation of sybil accounts useless because the stake would have to be split between them anyway."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:75
#: dddcf74e1a2d4882a95e158e762afb86
msgid "The method used to draw an elected node for a given slot is simply a random draw from a distribution where addresses are weighted by the amount of stake (=rolls) they hold. The schema below illustrates how the seed and probability distribution are built, based on past cycles (two cycles are needed for the distribution update to ensure that the balance finalization has occurred and the amount of rolls is accurate):"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:83
#: 1fa6036207d248ec95f66a49330eccb3
msgid "The Selector Module is in charge of computing the formula and replying to requests regarding what node is elected for any given slot in the present or the past. The Execution Module (see below) is in charge of feeding the Selector Module with updates regarding balances, needed to compute the draws."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:89
#: 8007a4a4a1b746929ff44045a02f1d99
msgid "Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:91
#: 209c9354d2ab454fbd73d40dea8cb795
msgid "The Consensus Module is the heart of the machinery of the Massa Network. It is in charge of integrating proposed blocks into their respective slots and verifying the integrity of the result. We have not yet talked about the various constraints regarding block creation, and in particular how parents are to be selected. In traditional blockchains, the parent of a block is simply the previous valid block in the chain. In the context of the Massa network and the parallel chains in the 32 threads, identifying the proper parent in a given thread requires a more sophisticated strategy involving the notion of block cliques."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:101
#: d148057b01544b9b8856505b86cccf70
msgid "Block cliques"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:103
#: 8acbb6a239f94864b208ca2ca9105ee3
msgid "At any given time, the set of all the blocks that have been produced and propagated in the network constitutes a graph (more precisely a Directed Acyclic Graph or \"DAG\"), where each block, except the genesis blocks, has 32 parents. All the reasoning below can be in principle done on this increasingly vast set, but in practice, we will introduce a notion of \"finalized\" or \"staled\" blocks, that can be removed from the set and that will allow us to work on a smaller subset of recent blocks that are neither finalized nor staled, so \"pending\" blocks. This set of pending blocks is all the network needs to know in order to incrementally build up a consensus, therefore non-pending blocks will simply be forgotten (this is a striking difference with most other blockchains that store in each node the history of all past transactions). The main benefit of this block pruning is to allow for some of the algorithms below, which are in general NP-complete, to run fast enough on a smaller subgraph, and to allow for a practical implementation."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:115
#: 4eec39398a3b4c39a76ebea47ac5c611
msgid "Here is a simplified example of a graph of pending blocks over two threads, with blocks 3 and 4 competing for slot C1 (for example as a result of a multistaking attack where the block producer decided to create competing blocks for the same slot). Here the letter of a slot identifies it, while the number refers to its thread number:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:122
#: 7c530339a8274e3fa7fc93c2c20a3d3b
msgid "In this illustration we have shown only relevant parent links in blue, to make the whole diagram more readable, but in reality, each block has 32 parents, one in each of the 32 threads."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:125
#: 3d745324e7ec4ae29f4e1a8e6319c055
msgid "An important notion we will use in the following is that of incompatibility between blocks. Excluding some edge cases with genesis blocks, there are two sources of incompatibilities defined for blocks:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:128
#: 76f5dfffc337466aafbc0186ef6efe74
msgid "**thread incompatibility**: this occurs when two blocks in a given thread have the same parent in that thread."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:129
#: 0b14874acd494e31b12e1464300b4f8d
msgid "**grandpa incompatibility**: this corresponds to a case with two blocks B1 and B2 in threads t1 and t2, and where the block B1 in t1 has a parent in t2 who is an ancestor of B2's parent in t2, and symmetrically B2's parent in t1 is an ancestor of B1's parent in t1."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:133
#: 4825848993e641fbb4c50b76fc4f63d3
msgid "You will find a more formal mathematical definition of these incompatibility notions in the `whitepaper <https://arxiv.org/pdf/1803.09029.pdf>`_."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:136
#: 9c1a0cab29834ae791ade8426a12ced5
msgid "From these definitions, you can build another graph, called the incompatibility graph, which connects any two blocks that have any form of incompatibility together:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:141
#: e151527fec4f43a1b19839b9a9d19131
msgid "As you can see, some blocks are isolated and therefore compatible with any other, while some are linked, because they have a form of incompatibility."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:144
#: ec3467a68b96451db691fe2e28bd22fe
msgid "This brings us to the notion of a maximal clique which is a subset of the incompatibility graph such as none of the block members are incompatible with each other (so, no internal link withing the clique), and it is impossible to add an extra block to the set without introducing incompatibilities. In the above example, there are three maximal cliques that can be built, as illustrated below:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:151
#: 1a421a8958e54c22b64e34b6fd6467f6
msgid "They represent candidates to extend the set of already finalized blocks into a coherent set of new blocks. All we need to add to be able to build a consensus rule now is to introduce a deterministic metric to rank those candidates so that nodes can independently and consistently decide on which clique is the best candidate and keep building on top of it. In particular, once the best maximal clique is identified, it becomes trivial to define the list of the parents for a new block simply by picking the oldest block from that clique in each thread."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:158
#: a23a240c1aa745c387df3c70bc101992
msgid "The metric used in a traditional blockchain to rank competing chain candidates is habitually the length of the chain, or more precisely the total amount of work invested in the chain (also known as \"Nakamoto consensus\"). In the case of block cliques, we will introduce a notion of fitness for each block, and the fitness of the clique will simply be the sum of all its block's fitness. The block fitness :math:`f(b)` is simply defined as :math:`1+e`, :math:`e` being the number of endorsements registered in the block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:165
#: 1ac03cb8a79a4970b851dfa23b252181
msgid "Taking the maximal clique with the highest fitness (or some hash-based deterministic selection in case of equality), the Graph/Consensus module can define what is called the **blockclique** at the current time."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:169
#: 47af7be45829495c87970b8852f7de4a
msgid "Finalized blocks, stale blocks"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:171
#: fb6fa22cf610444d88d9549f6399d47e
msgid "The set of pending blocks is growing each time a new block is produced and added to the current set. As we mentioned previously, there is also a pruning mechanism in charge of reducing the size of the graph by removing blocks that are considered final, and also blocks that can be considered stale and will never finalize."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:175
#: a3bc73f923ad48d0b631eedfcd676a26
msgid "If a block is only contained inside cliques that have a fitness lower than the fitness of the blockclique (the clique with the maximal fitness), minus a constant :math:`\\Delta_f^0`, then this block is considered stale. Also, any new block that includes in its parents a stale block is stale."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:179
#: 61d21015d33c49c49f65df661ad44f09
msgid "A block is considered final if it is part of all maximal cliques, and included in at least one clique where the total sum of the fitness of all its descendants is greater than :math:`\\Delta_f^0`."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:182
#: 43026108253c42adafd4f4427d2a6577
msgid ":math:`\\Delta_f^0` is defined as a constant :math:`F` multiplied by :math:`1+E` (:math:`E` being the total max number of endorsements in a block, currently 16), and :math:`F` effectively measuring the maximum span in fully endorsed blocks of a successful blockclique, or the number of fully endorsed blocks by which an alternative clique can be shorter than the blockclique before its blocks may be discarded as stale."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:189
#: df059645e1924dbb8e2a02df6a99c988
msgid "Graph/Consensus Module Function"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:191
#: 1763626b06934b2b929296193b52a2a9
msgid "The Consensus Module (formerly known as the Graph) receives new block proposals, integrates them into the set of pending blocks, updating the blockclique with the method explained above, and verifying the legitimacy of the parenting of new blocks. It also informs other modules, like the Execution module, when blocks are finalized and the corresponding ledger modifications implied by their operations list should be made permanent."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:197
#: 0ad8ffa6970d4ee2a90fd7db8e97d6a7
msgid "It is also able to answer queries about the current best parents for a new block (based on the current blockclique) or the list of current maximal cliques."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:201
#: d9589b76dc494705a7470b8f9aef026c
msgid "Execution Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:203
#: 73343d7cf78340c0ab9175670adf0d7a
msgid "The Execution Module is in charge of effectively executing the operations contained in blocks within the current blockclique, which is provided by the Graph/Consensus Module. Operations will typically modify the ledger, either by changing the balances of accounts or by modifying the datastore of smart contracts after the execution of some code. From an implementation point of view, ledger modifications are however stored as diff vs the current finalized ledger, until the corresponding blocks are marked as finalized by the Graph/Consensus Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:209
#: 4f97bff1869848c480d96b0b88fe412b
msgid "Block creators will typically need to query the Execution Module to check current balances at a given slot and verify if some operations can be run with sufficient funds or not, before being integrated into a new block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:212
#: ca918f8be6314c2eab51cdcfde69d538
msgid "As a side note, it is also possible that blocks might include invalid operations, in which case the Execution Module will simply ignore them."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:215
#: 47be99abd1e74c43b17e83aebfccd776
msgid "Being the maintainer of the ledger, the Execution Module is also queried about address information in general, via the API, for any Module that needs it."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:218
#: 8669b28aab004d6993b3690bbe2b0b8a
msgid "Finally, the Execution Module will inform the Selector Module when new cycles are initiated as the finalization of blocks progresses."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:222
#: b8ead17267a34abcb09fe8e9399596c5
msgid "Pool Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:224
#: 8136f1e6e8034c06ad3eacb407b6f9b0
msgid "When new pending operations reach a node, they are not immediately processed but instead are stored in a pool of pending operations, to be used by the Factory Module. Similarly, proposed endorsements coming from the Endorsement Factory are buffered inside the pool, to be integrated into new blocks by the Block Factory Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:229
#: bdda55985737413e94baa6806aa53aae
msgid "The origin of pending operations or endorsements inside the pool can be internal to the factory process or could come from remote nodes via the API Module. Similarly, locally produced pending endorsements are broadcasted via a gossip protocol to other pools via the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:234
#: 5a4a1cb8b0414c618f6004b0a6f0478d
msgid "Note that operations stored in the Pool are naturally discarded after a certain time, since operations come with an expiration date in the `expiration_period` field. Still, some potential attacks can occur by trying to flood the pool with high fees operations that have no chance of being executed because the corresponding account does not have the required funds. Discussing about countermeasure for this is beyond the scope of this introduction."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:241
#: bd072c319edb45eb99f9c7cc249d3f89
msgid "Block/Endorsement Factory Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:243
#: 24d234035a7b4fd4859c8b01c51de96b
msgid "The Block Factory Module is in charge of creating new blocks when the corresponding node address has been designated to be the block creator for a given slot. This information is provided to the Factory Module from the Selector Module via the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:247
#: 7222da0a4b54410f87f15399d1b286f7
msgid "The Block Factory Module also needs information about the best parents (made of the latest blocks in each thread in the blockclique) from the Graph/Consensus Module. These parents will be included in the newly created block. Balance information, in order to assess the validity of pending operations, is obtained from the Execution Module, which maintains the ledger state from the point of view of the slot where the new block is supposed to be created."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:253
#: 3f3e51f4dd754ddf8d6732520c1fe675
msgid "The Block Factory Module picks pending operations from the Pool Module. Note that the Block Factory will regularly query the Execution Module about finalized and executed operations, and internally cleanup operations that have been handled."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:257
#: 728ada5af6a94f80b52246842967261c
msgid "Finally, the Block Factory will query the Pool Module and pick pending endorsements corresponding to the best parents that are selected for the block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:260
#: 4c8a76d626d0443483144342a535bdcf
msgid "With this information, it is able to forge a new block that will then be propagated to the Graph/Consensus Module via the API Module, as well as to other nodes via gossip, to maintain a global synchronized state."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:263
#: b4a5182ce10d48cfa8e5272a4afdf77a
msgid "The Endorsement Factory Module works in a similar manner, requesting the Selector Module to find out when it has been designated to be an endorsement producer, then feeding new endorsements to the Pool Module and the API Module for global synchronization."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:268
#: f0ae12e880d94966bb60c786c244b570
msgid "Operation lifecycle"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:270
#: cfc665687b2f4e2999f385b2df761aa6
msgid "We have now all the elements and vocabulary in place to explore the lifecycle of an operation within the network, from creation to permanent execution in a finalized block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:273
#: 8fcbee6146004fe1a570b0155863e2f9
msgid "Operations originate externally from a client that is forging the operation, for example: a transaction or a smart contract code execution. The client will have to know the IP address of a Massa Node (this can be either because it is a node itself and will simply use localhost, or via some maintained list of known nodes and/or some browser plugin), and will then send the operation to the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:279
#: c5db1f5fca0f4c2cb2926858f6aaadac
msgid "When an operation is made available in a given node, it will be broadcasted to all other nodes via the Protocol/Network Module and to factories via the API Module, so that it will eventually end up in all the Pool Modules of the network."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:283
#: 8bb37576d00c4acda3add00ecd80fdb3
msgid "Let's assume we just got a code execution operation from an external client. Let's suppose the client knows a particular node, which is running its block factory on the same machine, and sends the operation to this node. These are the different steps of the operation processing that will occur, as illustrated in the schema below:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:287
#: 80b6b287673c45dda7a6f9c9015d74e0
msgid "The operation enters the node via the API Module (the operation path is marked in blue)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:288
#: b3213c347c2143449f0f8bc2fc9d428d
msgid "The API Module forwards the operation to the Pool Module and broadcasts it to other nodes via the Protocol/Network Module. Other nodes hearing about it will also broadcast it (gossip protocol), and feed it to their Pool Module, unless they are pure consensus nodes without factories"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:291
#: 4723ed55a0464c6ea584fa21616b89df
msgid "At that stage, the operation sits in the Pool Modules of most nodes"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:292
#: 5fc9aa9a8674465f9c9797c3b67dd372
msgid "The Selector Module elects a particular node to handle the block production of the next current slot"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:293
#: 3e2faac89ddb48e6b4dbb0ff0bab612d
msgid "The elected node Block Factory finds out about its election by querying a Selector Module (via the API Module)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:294
#: a428544baf984d44895120523a45f8cf
msgid "It starts building a block by picking up pending operations in the Pool Module. The original operation is eventually picked and integrated into the block. We will now follow the block around (the block path is marked in green)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:297
#: 1faaf2fe2afe4ec18dd4ac148d71505b
msgid "The newly produced block is sent via the API to remote or local nodes, to reach the Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:298
#: ce166d777a304893a9eab0dd71b6730a
msgid "The new block is processed by the Graph/Consensus Module to be included into the pending blocks DAG and potentially integrated into a new blockclique"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:300
#: c76d3d24cfa24465b2a213c107be1b86
msgid "The Graph/Consensus Module sends the new block to other nodes via the Protocol/Network Module, to ensure synchronization of the information in the network. The new block reaching other nodes is similarly going to be integrated into their Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:303
#: 0a709460bb76446195e66cef2a3776db
msgid "In general, the blockclique will be extended with the new block and so will reach the Execution Module from the Graph/Consensus Module via the notification of a new blockclique. Eventually, it will also be notified as a final block if it gets finalized."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:306
#: 11a1b5f406dc44fea219f667950c2cb1
msgid "The Execution Module will run the blocks that are part of the updated blockclique, so the original block will eventually be executed. Within the block is the original operation that was originally sent and that will then be applied to the ledger for potential modifications. At this stage, the modifications are not permanent and simply stored in a diff compared to the finalized ledger"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:310
#: 0b3155897ce148a0bfae0c6a7902f75e
msgid "Eventually, the block will be marked as final and the ledger modification, including the operation changes, will become final in the finalized ledger."
msgstr ""
