# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-27 00:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general-doc/architecture/archi-global.rst:2
#: 859e34f253ef4192bb43f839753085e1
msgid "Architecture"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:4
#: fd4119b8d2184398af8a15c8a2ec62d1
msgid "This is the diagram of the architecture of the software modules involved in building, endorsing and propagating blocks. The bottom part corresponds to a single process running in a node and is in charge of the execution and consensus building. The pool and factories, referred to as \"factory\", can be potentially running in a different process or be part of the node. Overall, each of the modules described here runs inside one or more threads attached to their respective executable process (NB: the factory/node separation is not yet implemented, but will be soon)."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:12
#: 188d9921c939429eb5888d2f540dcadd
msgid "We will explain below the different modules present in this diagram, and simulate the production of an operation to show how it navigates through the different modules to better understand how blocks are produced and propagated."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:16
#: 7a9c04491fd341da9e695e10c9fb7cd0
msgid "Bootstrap Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:18
#: 41781b94580f4504bbc43ed73097402a
msgid "The bootstrap module is responsible for the initial synchronization of the node with the rest of the network. It is responsible for downloading the list of peers, the current graph of blocks, the ledger, the asynchronous pool, state of the Proof-of-Stake and latests executed operations."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:22
#: 780505de881f49f1968947c77ec58071
msgid "The bootstrap will be done from a server that is listed on the configuration of the node. Bootstrap is the entry point of the network so you have to be careful on which node you connect to avoid downloading malicious data."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:26
#: 3347cb489a3646bab0e0508b6a94d111
msgid "API Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:28
#: 031b32fdf4bf4a2e8cd3f41c44a14bc7
msgid "The API Module is the public window of the node to the rest of the world. It allows for interactions with external clients or factories via a JSON RPC protocol."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:31
#: a6f5aed24e134a609e2aabb513f12f28
msgid "The API includes interfaces to do the following:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:33
#: f957f316b116480a85c67edb3b414788
msgid "publish a new operation from a client"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:34
#: 05bca05dbc4f45d0b5b4f7b1e2599a3a
msgid "query the network about balances or ledger status"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:35
#: 39d92a535ea5463eba544e212661fa05
msgid "allow for synchronization between remote pool/factory nodes and the consensus nodes, by sending/asking for blocks, best parents, draws, etc."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:39
#: 1918985aa980473a80af61b3487d3b12
msgid "Protocol/Network Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:41
#: 5937027a93e341f6aa07b40b4a52bdc6
msgid "The Protocol/Network Module implements the protocol connecting consensus nodes. This protocol is supported by a binary and optimized transport layer and does not use JSON RPC."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:44
#: a2a6d529ba6246d3aede0c91eac4da64
msgid "The Protocol/Network Module will relay all operations/blocks creation and propagation, so that all other nodes in the network can synchronize their internal state, following a type of gossip synchronization protocol."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:47
#: 305b95b4e0aa44dabacd3617373a0822
msgid "The type of messages that can be relayed via the Protocol/Network Module include:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:49
#: 322f5b9da5a7465f82b1f7f60bc702d0
msgid "blocks/operations/endorsements propagation (either getting in or out of the node)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:50
#: c8335d6032084f2f9adceff39fe73d7c
msgid "nodes ban requests"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:51
#: 7ce76f420c4f4edb80051dca52a17bd5
msgid "connectivity infos/stats"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:54
#: 7dff9a3711104040bd1e2d170f4adb3a
msgid "Selector Module, Proof of Stake sybil resistance"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:56
#: e9bbc3bf59cd46ab9faef6c9cb006d15
msgid "Every 0.5s, a new slot becomes active to receive a new block. A determinist selection mechanism ensures that one of the nodes in the network is elected to have the responsibility to build the block for that slot. This mechanism must have several key properties:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:60
#: 169ff95babbc4addb788878d4967323c
msgid "it should be sybil resistant, so that it is not possible to increase one's odds of being elected by creating multiple clones of oneself (sybil) without a cost that is equal or greater than the cost of increasing one's odds for oneself only"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:63
#: 01dc544a773f4e26b4a9b86bfbc619a4
msgid "it should be deterministic, so that all nodes in the network will agree on the result of the selection at any given time"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:65
#: ee05f7dd644f43c4b9c69d93f044d31e
msgid "it should be fair, so that each participant has a well-defined probability of being selected somehow proportional to the cost of participating, and draws converge towards this probability distribution over time"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:68
#: 476a7c20b3bc4443995bc6427f1ace55
msgid "The way sybil resistance is achieved here is via the proof of stake mechanism. Nodes who want to participate in the block creation lottery will have to stake \"rolls\" that they buy with Massa coins. If they try to cheat by creating fake blocks or multiple blocks on the same slot, their stake will be taken away from them (slashing) and they would suffer the loss. The probabilistic \"surface\" of a participant is equal to its total stake, which makes the creation of sybil accounts useless because the stake would have to be split between them anyway."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:74
#: b69810dc8c4d47d89dd1f82c072f87f3
msgid "The method used to draw an elected node for a given slot is simply a random draw from a distribution where addresses are weighted by the amount of stake (=rolls) they hold. The schema below illustrates how the seed and probability distribution are built, based on past cycles (two cycles are needed for the distribution update to ensure that the balance finalization has occurred and the amount of rolls is accurate):"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:81
#: 5f5236985bb44406b519d0dacf4d436d
msgid "The Selector Module is in charge of computing the formula and replying to requests regarding what node is elected for any given slot in the present or the past. The Execution Module (see below) is in charge of feeding the Selector Module with updates regarding balances, needed to compute the draws."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:86
#: 790aacf24fc8402983fe20f796113bc9
msgid "Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:88
#: 4bb1141aa3514770be4b770047dd93e2
msgid "The Consensus Module is the heart of the machinery of the Massa Network. It is in charge of integrating proposed blocks into their respective slots and verifying the integrity of the result. We have not yet talked about the various constraints regarding block creation, and in particular how parents are to be selected. In traditional blockchains, the parent of a block is simply the previous valid block in the chain. In the context of the Massa network and the parallel chains in the 32 threads, identifying the proper parent in a given thread requires a more sophisticated strategy involving the notion of block cliques."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:96
#: 57835d4f142d49d280c0106cf39edbe0
msgid "Block cliques"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:98
#: 699498fc5e0342fb8a353a23a1a5de52
msgid "At any given time, the set of all the blocks that have been produced and propagated in the network constitutes a graph (more precisely a Directed Acyclic Graph or \"DAG\"), where each block, except the genesis blocks, has 32 parents. All the reasoning below can be in principle done on this increasingly vast set, but in practice, we will introduce a notion of \"finalized\" or \"staled\" blocks, that can be removed from the set and that will allow us to work on a smaller subset of recent blocks that are neither finalized nor staled, so \"pending\" blocks. This set of pending blocks is all the network needs to know in order to incrementally build up a consensus, therefore non-pending blocks will simply be forgotten (this is a striking difference with most other blockchains that store in each node the history of all past transactions). The main benefit of this block pruning is to allow for some of the algorithms below, which are in general NP-complete, to run fast enough on a smaller subgraph, and to allow for a practical implementation."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:108
#: 397fbb078f7c4d668088d3de33085cf7
msgid "Here is a simplified example of a graph of pending blocks over two threads, with blocks 3 and 4 competing for slot C1 (for example as a result of a multistaking attack where the block producer decided to create competing blocks for the same slot). Here the letter of a slot identifies it, while the number refers to its thread number:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:114
#: 1df9bdd2be4b47f5ba7fe37a636b9383
msgid "In this illustration we have shown only relevant parent links in blue, to make the whole diagram more readable, but in reality, each block has 32 parents, one in each of the 32 threads."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:117
#: 10d54bb264e3425b95cb16ec899a6d2a
msgid "An important notion we will use in the following is that of incompatibility between blocks. Excluding some edge cases with genesis blocks, there are two sources of incompatibilities defined for blocks:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:120
#: 9510c21fd70443f7acf6f694ee286dfc
msgid "**thread incompatibility**: this occurs when two blocks in a given thread have the same parent in that thread."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:121
#: 4432cea86ae54feabda8f2d4413f87a9
msgid "**grandpa incompatibility**: this corresponds to a case with two blocks B1 and B2 in threads t1 and t2, and where the block B1 in t1 has a parent in t2 who is an ancestor of B2's parent in t2, and symmetrically B2's parent in t1 is an ancestor of B1's parent in t1."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:125
#: cef9e7633e564e298db2cde1e6c3f789
msgid "You will find a more formal mathematical definition of these incompatibility notions in the `whitepaper <https://arxiv.org/pdf/1803.09029.pdf>`_."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:128
#: 2f35eb6aaedf44a8880215e13bfeed54
msgid "From these definitions, you can build another graph, called the incompatibility graph, which connects any two blocks that have any form of incompatibility together:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:133
#: e9e22eb0aae947e4897628606f129466
msgid "As you can see, some blocks are isolated and therefore compatible with any other, while some are linked, because they have a form of incompatibility."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:136
#: 425c2e17a5714547a81b660267f9b77a
msgid "This brings us to the notion of a maximal clique which is a subset of the incompatibility graph such as none of the block members are incompatible with each other (so, no internal link within the clique), and it is impossible to add an extra block to the set without introducing incompatibilities. In the above example, there are three maximal cliques that can be built, as illustrated below:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:143
#: b9eb02a4f10a4889b0ad769855b68ec5
msgid "They represent candidates to extend the set of already finalized blocks into a coherent set of new blocks. All we need to add to be able to build a consensus rule now is to introduce a deterministic metric to rank those candidates so that nodes can independently and consistently decide on which clique is the best candidate and keep building on top of it. In particular, once the best maximal clique is identified, it becomes trivial to define the list of the parents for a new block simply by picking the oldest block from that clique in each thread."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:149
#: a088c5c1d6fe4718afe76731e6e2d364
msgid "The metric used in a traditional blockchain to rank competing chain candidates is habitually the length of the chain, or more precisely the total amount of work invested in the chain (also known as \"Nakamoto consensus\"). In the case of block cliques, we will introduce a notion of fitness for each block, and the fitness of the clique will simply be the sum of all its block's fitness. The block fitness :math:`f(b)` is simply defined as :math:`1+e`, :math:`e` being the number of endorsements registered in the block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:155
#: 605c825f74ad45cfb2055864a96c1a4a
msgid "Taking the maximal clique with the highest fitness (or some hash-based deterministic selection in case of equality), the Graph/Consensus module can define what is called the **blockclique** at the current time."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:159
#: 48ec01346e5249109d591d4a39c4db01
msgid "Finalized blocks, stale blocks"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:161
#: 5d45f0c3d01046c08275aa07b8a17f85
msgid "The set of pending blocks is growing each time a new block is produced and added to the current set. As we mentioned previously, there is also a pruning mechanism in charge of reducing the size of the graph by removing blocks that are considered final, and also blocks that can be considered stale and will never finalize."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:165
#: 54f4ecc38a414dcb97a9be84822e792a
msgid "If a block is only contained inside cliques that have a fitness lower than the fitness of the blockclique (the clique with the maximal fitness), minus a constant :math:`\\Delta_f^0`, then this block is considered stale. Also, any new block that includes in its parents a stale block is stale."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:169
#: 3aa69735fcd345dabc0424e88bd6a001
msgid "A block is considered final if it is part of all maximal cliques, and included in at least one clique where the total sum of the fitness of all its descendants is greater than :math:`\\Delta_f^0`."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:172
#: b3fa2ec5506c4b2da775d7dfb104ea32
msgid ":math:`\\Delta_f^0` is defined as a constant :math:`F` multiplied by :math:`1+E` (:math:`E` being the total max number of endorsements in a block, currently 16), and :math:`F` effectively measuring the maximum span in fully endorsed blocks of a successful blockclique, or the number of fully endorsed blocks by which an alternative clique can be shorter than the blockclique before its blocks may be discarded as stale."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:178
#: 8e6cd0c306824abfbd99bb007425b3b0
msgid "Graph/Consensus Module Function"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:180
#: 35cfee4ba59343e5b4faef8fc6921e92
msgid "The Consensus Module (formerly known as the Graph) receives new block proposals, integrates them into the set of pending blocks, updating the blockclique with the method explained above, and verifying the legitimacy of the parenting of new blocks. It also informs other modules, like the Execution module, when blocks are finalized and the corresponding ledger modifications implied by their operations list should be made permanent."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:185
#: 0358df8613b84f13bec7548a0079a03a
msgid "It is also able to answer queries about the current best parents for a new block (based on the current blockclique) or the list of current maximal cliques."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:189
#: 400e3a7f2aa441b2a10254b4821f2204
msgid "Execution Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:191
#: 860a571f7b9444edaa091bfc067a2054
msgid "The Execution Module is in charge of effectively executing the operations contained in blocks within the current blockclique, which is provided by the Graph/Consensus Module. Operations will typically modify the ledger, either by changing the balances of accounts or by modifying the datastore of smart contracts after the execution of some code. From an implementation point of view, ledger modifications are however stored as diff vs the current finalized ledger, until the corresponding blocks are marked as finalized by the Graph/Consensus Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:197
#: 4f515951c1f84e17864d6d58aa37da08
msgid "Block creators will typically need to query the Execution Module to check current balances at a given slot and verify if some operations can be run with sufficient funds or not, before being integrated into a new block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:200
#: 5f76b5308e4e4774ab56fbf62431a390
msgid "As a side note, it is also possible that blocks might include invalid operations, in which case the Execution Module will simply ignore them."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:203
#: 4239b3ff17bf4f3eac6a902a7b648618
msgid "Being the maintainer of the ledger, the Execution Module is also queried about address information in general, via the API, for any Module that needs it."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:206
#: 9f9447385e324745be126258307bf8a2
msgid "Finally, the Execution Module will inform the Selector Module when new cycles are initiated as the finalization of blocks progresses."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:210
#: 2afd47ac43ae4b5ba43f96be7aa169bc
msgid "Pool Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:212
#: c2e35f0c39ef4d30a0c1a8d370e3ef1b
msgid "When new pending operations reach a node, they are not immediately processed but instead are stored in a pool of pending operations, to be used by the Factory Module. Similarly, proposed endorsements coming from the Endorsement Factory are buffered inside the pool, to be integrated into new blocks by the Block Factory Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:216
#: 5b98424003fd4d259049d8c58c5f5315
msgid "The origin of pending operations or endorsements inside the pool can be internal to the factory process or could come from remote nodes via the API Module. Similarly, locally produced pending endorsements are broadcasted via a gossip protocol to other pools via the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:220
#: ac488323c3d8441e9e76efa674e8f8fb
msgid "Note that operations stored in the Pool are naturally discarded after a certain time, since operations come with an expiration date in the `expiration_period` field. Still, some potential attacks can occur by trying to flood the pool with high fees operations that have no chance of being executed because the corresponding account does not have the required funds. Discussing about countermeasure for this is beyond the scope of this introduction."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:226
#: 4970c239987e47988e9aab8e4f175f09
msgid "Block/Endorsement Factory Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:228
#: a749c3528d8f46689a709f92e7f607c4
msgid "The Block Factory Module is in charge of creating new blocks when the corresponding node address has been designated to be the block creator for a given slot. This information is provided to the Factory Module from the Selector Module via the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:232
#: 7645ee3f617a4525afc3f05c24abd2c8
msgid "The Block Factory Module also needs information about the best parents (made of the latest blocks in each thread in the blockclique) from the Graph/Consensus Module. These parents will be included in the newly created block. Balance information, in order to assess the validity of pending operations, is obtained from the Execution Module, which maintains the ledger state from the point of view of the slot where the new block is supposed to be created."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:237
#: f8d6b6b2517f4f908c8f1e6a359b3f75
msgid "The Block Factory Module picks pending operations from the Pool Module. Note that the Block Factory will regularly query the Execution Module about finalized and executed operations, and internally cleanup operations that have been handled."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:240
#: e9ae00b9b9084d0784c4e66237e48a6f
msgid "Finally, the Block Factory will query the Pool Module and pick pending endorsements corresponding to the best parents that are selected for the block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:243
#: 6230ddbed5d14d1c872d131ad0733c49
msgid "With this information, it is able to forge a new block that will then be propagated to the Graph/Consensus Module via the API Module, as well as to other nodes via gossip, to maintain a global synchronized state."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:246
#: b3c405deb3a444458e803cf4f98eb6c1
msgid "The Endorsement Factory Module works in a similar manner, requesting the Selector Module to find out when it has been designated to be an endorsement producer, then feeding new endorsements to the Pool Module and the API Module for global synchronization."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:251
#: fae3a299a0494c3d8a3088d6dc7dc3a4
msgid "Operation lifecycle"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:253
#: 8e5480fc83734bd297881a46fcdcd8bb
msgid "We have now all the elements and vocabulary in place to explore the lifecycle of an operation within the network, from creation to permanent execution in a finalized block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:256
#: 6871daf8b4e2457288b13d260dd075f6
msgid "Operations originate externally from a client that is forging the operation, for example: a transaction or a smart contract code execution. The client will have to know the IP address of a Massa Node (this can be either because it is a node itself and will simply use localhost, or via some maintained list of known nodes and/or some browser plugin), and will then send the operation to the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:261
#: de5a8bb5329e4ccda0ff92cfadfe961e
msgid "When an operation is made available in a given node, it will be broadcasted to all other nodes via the Protocol/Network Module and to factories via the API Module, so that it will eventually end up in all the Pool Modules of the network."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:264
#: 17c531fc2e934f10ad67f56d7b3402c8
msgid "Let's assume we just got a code execution operation from an external client. Let's suppose the client knows a particular node, which is running its block factory on the same machine, and sends the operation to this node. These are the different steps of the operation processing that will occur, as illustrated in the schema below:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:268
#: 095ddf5918494cfc946a118998d68d7e
msgid "The operation enters the node via the API Module (the operation path is marked in blue)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:269
#: a892b77e17d249db8e9b9584cbffb2b0
msgid "The API Module forwards the operation to the Pool Module and broadcasts it to other nodes via the Protocol/Network Module. Other nodes hearing about it will also broadcast it (gossip protocol), and feed it to their Pool Module, unless they are pure consensus nodes without factories"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:272
#: 6157cc1ca5594d289ca868fa561304f4
msgid "At that stage, the operation sits in the Pool Modules of most nodes"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:273
#: 5209d1a496d34491a91bcb3346da3855
msgid "The Selector Module elects a particular node to handle the block production of the next current slot"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:274
#: c9379cdc40994f6e9c2f01269e0dbd76
msgid "The elected node Block Factory finds out about its election by querying a Selector Module (via the API Module)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:275
#: a2e0a2dfa7f44606bccac746cd1a7488
msgid "It starts building a block by picking up pending operations in the Pool Module. The original operation is eventually picked and integrated into the block. We will now follow the block around (the block path is marked in green)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:277
#: 7a1f0d86d3954cc584c881a00f5c124e
msgid "The newly produced block is sent via the API to remote or local nodes, to reach the Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:278
#: 807db1ad465146e3aab11403184ff3ef
msgid "The new block is processed by the Graph/Consensus Module to be included into the pending blocks DAG and potentially integrated into a new blockclique"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:280
#: 215b52092b1b4d0fb49171956d86ac4f
msgid "The Graph/Consensus Module sends the new block to other nodes via the Protocol/Network Module, to ensure synchronization of the information in the network. The new block reaching other nodes is similarly going to be integrated into their Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:283
#: 4ec80f3c47f64bf5bd3b2d84ac4b7f60
msgid "In general, the blockclique will be extended with the new block and so will reach the Execution Module from the Graph/Consensus Module via the notification of a new blockclique. Eventually, it will also be notified as a final block if it gets finalized."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:286
#: f9f72afd327442a3865bb7a0808c13c1
msgid "The Execution Module will run the blocks that are part of the updated blockclique, so the original block will eventually be executed. Within the block is the original operation that was originally sent and that will then be applied to the ledger for potential modifications. At this stage, the modifications are not permanent and simply stored in a diff compared to the finalized ledger"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:290
#: 5e64d9a6b6394cc3a551911e1fee82f5
msgid "Eventually, the block will be marked as final and the ledger modification, including the operation changes, will become final in the finalized ledger."
msgstr ""
