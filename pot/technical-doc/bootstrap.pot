# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-25 00:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../technical-doc/bootstrap.rst:2
#: b0256f7a799a44f5be88835afc4cbcc0
msgid "Bootstrapping in Massa"
msgstr ""

#: ../../technical-doc/bootstrap.rst:5
#: 0b79d6fe1bee4d7884df4d80a1ff96f5
msgid "Introduction"
msgstr ""

#: ../../technical-doc/bootstrap.rst:7
#: 7ed8c83eb00c42c1815a08ee9c953382
msgid "Nodes that are already part of the network are able to follow the State by observing the blocks passing through the network, verifying them, and applying the state changes they cause."
msgstr ""

#: ../../technical-doc/bootstrap.rst:10
#: e85a95b0fef74069806cfd36e5724c87
msgid "However, new nodes joining the network need to get an absolute \"current\" version of the state, which is called \"bootstrapping\". In some blockchains like Bitcoin, full nodes joining the network are recommended to download all blocks from the beginning (genesis) of the blockchain in order to re-verify the whole state change history."
msgstr ""

#: ../../technical-doc/bootstrap.rst:18
#: 2878c7c792aa4b67ac6264294a0f9733
msgid "However, Massa has a triple decentralization/security/performance goal:"
msgstr ""

#: ../../technical-doc/bootstrap.rst:15
#: 56f1514f02244233a5f50f200aee6f85
msgid "maximal decentralization requires that node hardware requirements stay consistent with a typical consumer desktop computer to lower the entry barrier of becoming a node runner"
msgstr ""

#: ../../technical-doc/bootstrap.rst:17
#: aafbf5cda8d64ca3baad8c716f08ab94
msgid "maximal security requires that all nodes verify all blocks and operations"
msgstr ""

#: ../../technical-doc/bootstrap.rst:18
#: 931b13edb00c4ca58fb718e4446f7abf
msgid "maximal performance requires using the node hardware to its fullest (CPU, network, memory, storage)"
msgstr ""

#: ../../technical-doc/bootstrap.rst:20
#: 13f9d101a23f421187f0622267992fea
msgid "This means that the State in Massa evolves almost as fast as typical consumer desktop computers can run blocks, which implies that catching up blocks since genesis goes only slightly faster than new blocks appear in the meantime, and would take a very long time. Moreover, Massa aims at processing thousands of operations per second, which means that it produces a lot of block data every second, thus preventing nodes with the target hardware from storing the full block history and making bootstrapping from genesis impossible since old blocks are forgotten."
msgstr ""

#: ../../technical-doc/bootstrap.rst:26
#: 6d9f71d6132b4edb8a97c65dc6dbdbdf
msgid "Massa nodes joining the network must therefore bootstrap by downloading the absolute current State."
msgstr ""

#: ../../technical-doc/bootstrap.rst:28
#: 37e0a0d4187e40bc8f9c2b58de83a5c1
msgid "Note that nodes can recover from short-term disconnects by asking for missing data from nodes around them once they come back in the network. However, since Massa nodes only store a short history of blocks and forget older ones, it is impossible to recover from long disconnects since the surrounding nodes have forgotten the blocks needed by the recovering node. In that case, a new State bootstrap is required."
msgstr ""

#: ../../technical-doc/bootstrap.rst:34
#: 5b3d590035584014904ff0d1c5db16e1
msgid "Security model"
msgstr ""

#: ../../technical-doc/bootstrap.rst:37
#: 71f53ad4dd2747949888c25a5ea40846
msgid "The example of Bitcoin"
msgstr ""

#: ../../technical-doc/bootstrap.rst:39
#: 495169b4e91042cd9128922681d10ba2
msgid "To understand the security model of node bootstrap, Bitcoin is a good starting example."
msgstr ""

#: ../../technical-doc/bootstrap.rst:41
#: 974e2a553d5f473caecf58229f36cfef
msgid "When Bitcoin node runners decide to join the network, they first download the node software from a central source (eg. bitcoin.org). If that source is compromised, the node might end up on a different network, and/or private key theft might happen. Bitcoin therefore requires trust in the entity sourcing the node software."
msgstr ""

#: ../../technical-doc/bootstrap.rst:45
#: 7c28cda012b84820acf89984fdcef796
msgid "Note that optionally, if the nodes don't wish to download the full block history they resort to trusting a more recent \"checkpoint\" state encoded in the node software. If that state is compromised, the node's knowledge of the whole ledger might be skewed."
msgstr ""

#: ../../technical-doc/bootstrap.rst:49
#: 1c00756d8bc1457eb04e14456ad99141
msgid "Assuming the node software is not corrupted, new nodes joining the network need an initial list of peer nodes to which they need to connect first in order to discover the network. This list is hardcoded in the node software (see `the bitcoin docs <https://developer.bitcoin.org/devguide/p2p_network.html#peer-discovery>`_). If all peers pointed by this initial list are compromised, the node can end on a different (non-bitcoin) network, even if the node software itself is not compromised. Bitcoin therefore also requires trust in at least one of the initial peers."
msgstr ""

#: ../../technical-doc/bootstrap.rst:55
#: d198224a41eb4bc191a221e2c72af3fc
msgid "Note that ending up on the wrong network can be detected by checking block hashes with an external source. But this requires trusting yet another source of data."
msgstr ""

#: ../../technical-doc/bootstrap.rst:59
#: c33dbab7b57242c2ab788d52715939cc
msgid "The case of Massa"
msgstr ""

#: ../../technical-doc/bootstrap.rst:61
#: 5f398d8de4724f099318f69a1f3c5678
msgid "The Massa case is very similar to Bitcoin's. Node runners also need to trust the source of the node software they download, as well as the initial list of peers."
msgstr ""

#: ../../technical-doc/bootstrap.rst:64
#: c734f262bbd747cdbc93b09c714dde8a
msgid "Similarly to Bitcoin checkpoints, bootstrapping Massa nodes must obtain the current State from a trusted source, ideally the same source as the one they downloaded the node software from, in order to avoid having to trust multiple entities."
msgstr ""

#: ../../technical-doc/bootstrap.rst:67
#: 7f132400718f49f0bfccbb56844abbb7
msgid "Downloading the state from an untrusted source can result in major issues such as coin theft. As such, bootstrapping from untrusted sources should be discouraged, and bootstrapping other nodes should be opt-in for node runners to avoid \"bootstrap lists\" circulating as the default way of bootstrapping from unaware node runners."
msgstr ""

#: ../../technical-doc/bootstrap.rst:72
#: d96873bdaba941f0bb6451f8b490fe57
msgid "Implementation details"
msgstr ""

#: ../../technical-doc/bootstrap.rst:75
#: 54fa2df447f24e88ac0b5cdcea13dfd6
msgid "Procedure from the point of view of the node being bootstrapped"
msgstr ""

#: ../../technical-doc/bootstrap.rst:77
#: af8f6fc95cc041f1b47d247f332f1d8e
msgid "Massa nodes that bootstrap start by connecting to a randomly chosen node among the ones listed in `massa-node/base_config/config.toml` (section `Bootstrap/bootstrap_list`)."
msgstr ""

#: ../../technical-doc/bootstrap.rst:80
#: b909c41e36054832a62e97c255b4246c
msgid "The bootstrap process uses a separate port and protocol than the normal Massa peer communication."
msgstr ""

#: ../../technical-doc/bootstrap.rst:82
#: 52628e6e5f0144ae8dea41a980c4a2a0
msgid "All communications with the chosen bootstrap node are authenticated using the public key (node ID) of the bootstrap node (in the `config.toml` file, section `Bootstrap/bootstrap_list`) to prevent man-in-the-middle attacks."
msgstr ""

#: ../../technical-doc/bootstrap.rst:85
#: fd3b0979adb5401cb506d69fc57c49d6
msgid "The node being bootstrapped then attempts to download the current State, as well as an initial list of peers from the bootstrap node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:88
#: 51bcc35606bf42f596a556986f9567c1
msgid "Once successfully bootstrapped, the node can then connect to peers, discover the rest of the network, and process live incoming blocks to keep its state up to date."
msgstr ""

#: ../../technical-doc/bootstrap.rst:91
#: 8cbc5e103c944148b3dfeae9fd390a43
msgid "In Massa, the hash of the state is used as part of the proof-of-stake seed, which is a safety mechanism against malicious bootstrap nodes sending a compromised State. It ensures that nodes with an altered State eventually end up isolated from the real network because their proof-of-stake draws differ which causes them to discard incoming honest blocks. Note however that a PoS seed mismatch can take up to 2 cycles to be detected."
msgstr ""

#: ../../technical-doc/bootstrap.rst:96
#: 0f5a55c0b8584a65ba40b6e1a84ba1c3
msgid "In case of bootstrap failure, the bootstrapping node retries with another randomly chosen bootstrap node after a delay."
msgstr ""

#: ../../technical-doc/bootstrap.rst:99
#: b1b1cf4ff9dd466188a0cb644db84782
msgid "Procedure from the point of view of the bootstrap node"
msgstr ""

#: ../../technical-doc/bootstrap.rst:101
#: 7adfa8c410804c2cae5ed328aca5deeb
msgid "Massa nodes can bootstrap other nodes, with certain limitations because the procedure is heavy for the bootstrap node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:103
#: 15bb068d4d834e44b43d33832a540f17
msgid "The bootstrap system listens on the address/port defined in `massa-node/base_config/config.toml` (section `bootstrap/bind`). The node's bootstrap server can be disabled by removing the `bind` entry from the config file."
msgstr ""

#: ../../technical-doc/bootstrap.rst:106
#: bb212619d0634896b8fa7c9bd5bf4b35
msgid "The Massa State is large (~1 terabyte in the worst case), and takes time to upload to bootstrapping nodes. During that time, new changes to the state continue to appear, so new changes affecting already-uploaded parts need to be sent on-the-fly."
msgstr ""

#: ../../technical-doc/bootstrap.rst:110
#: a9d9ac21a8ce4868a41d2f53871aba40
msgid "By default, Massa nodes only allow a whitelist of IP addresses to bootstrap from them. This list is present in the `massa-node/base_config/bootstrap_whitelist.json` file. This list is intended to prevent flooding attacks by attackers pretending to be bootstrapping, and also makes it more difficult for node runners to bootstrap from untrusted sources. If you wish to disable whitelisting and allow anyone to bootstrap from your node, simply delete the `bootstrap_whitelist.json` file and restart your node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:116
#: 0d4cfca297b74a929bfb1ea87b278a3f
msgid "A complementary `bootstrap_blacklist.json` (absent by default) can also be created alongside `bootstrap_whitelist.json` (and following the same syntax) in order to explicitly prevent certain IP addresses from bootstrapping from the node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:119
#: e89163fee3ae47a68db458c776136018
msgid "Once a node has accepted to bootstrap an incoming node, it adds the incoming node's IP address to a local cache preventing that IP from bootstrapping again for a time defined in `massa-node/base_config/config.toml` (section `bootstrap/per_ip_min_interval`) by refusing subsequent connections from that IP during the config-defined delay. The exclusion delay is not extended if the remote IP attempts new connections during the exclusion delay. The exclusion delay is however applied if the bootstrap was accepted but failed for any reason. This aims at limiting the load on individual bootstrap nodes, and spreading the load among bootstrap nodes."
msgstr ""

#: ../../technical-doc/bootstrap.rst:126
#: 5e25094f48274301bdeeee56d8f8b0a4
msgid "The number of nodes simultaneously bootstrapping from the local node is limited (`massa-node/base_config/config.toml` section `bootstrap/max_simultaneous_bootstraps`). Excess attempts are refused but do not trigger the exclusion delay mechanism."
msgstr ""

#: ../../technical-doc/bootstrap.rst:131
#: 4231aa57a8114970af8b4dacfaafa591
msgid "Future optimizations"
msgstr ""

#: ../../technical-doc/bootstrap.rst:133
#: 89d0af772c7c413481c6d4dee6a7f9b7
msgid "We plan to add the possibility to download bootstrap data from untrusted sources for load-balancing, but then check the hash of the obtained state from trusted sources, and only fallback to downloading everything from trusted sources if multiple bootstrap attempts from this hybrid approach fail."
msgstr ""
