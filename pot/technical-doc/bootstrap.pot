# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-25 00:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../technical-doc/bootstrap.rst:2
#: 401c3ebe25014e07ae80030d2dfb8add
msgid "Bootstrapping in Massa"
msgstr ""

#: ../../technical-doc/bootstrap.rst:5
#: 7577c21467e8422ab84f8a89b4f1f23b
msgid "Introduction"
msgstr ""

#: ../../technical-doc/bootstrap.rst:7
#: 82c03622be5c484faf998971dc308487
msgid "Nodes that are already part of the network are able to follow the State by observing the blocks passing through the network, verifying them, and applying the state changes they cause."
msgstr ""

#: ../../technical-doc/bootstrap.rst:10
#: 3d8bfa48e65e4667b31091627a3f7f36
msgid "However, new nodes joining the network need to get an absolute \"current\" version of the state, which is called \"bootstrapping\". In some blockchains like Bitcoin, full nodes joining the network are recommended to download all blocks from the beginning (genesis) of the blockchain in order to re-verify the whole state change history."
msgstr ""

#: ../../technical-doc/bootstrap.rst:18
#: 9a2271ebc30f49a0a075271263cef104
msgid "However, Massa has a triple decentralization/security/performance goal:"
msgstr ""

#: ../../technical-doc/bootstrap.rst:15
#: e7f985b67b524d7e988cecebacf4eb48
msgid "maximal decentralization requires that node hardware requirements stay consistent with a typical consumer desktop computer to lower the entry barrier of becoming a node runner"
msgstr ""

#: ../../technical-doc/bootstrap.rst:17
#: 782a7eb211e0431f81516dd8b7ece717
msgid "maximal security requires that all nodes verify all blocks and operations"
msgstr ""

#: ../../technical-doc/bootstrap.rst:18
#: a21c888d0f4a4f25a40c481bc27fa6cd
msgid "maximal performance requires using the node hardware to its fullest (CPU, network, memory, storage)"
msgstr ""

#: ../../technical-doc/bootstrap.rst:20
#: ea2b317e940f4560abee69046ef46297
msgid "This means that the State in Massa evolves almost as fast as typical consumer desktop computers can run blocks, which implies that catching up blocks since genesis goes only slightly faster than new blocks appear in the meantime, and would take a very long time. Moreover, Massa aims at processing thousands of operations per second, which means that it produces a lot of block data every second, thus preventing nodes with the target hardware from storing the full block history and making bootstrapping from genesis impossible since old blocks are forgotten."
msgstr ""

#: ../../technical-doc/bootstrap.rst:26
#: 3aacf26fbeaa4e8d966b894f5de793ba
msgid "Massa nodes joining the network must therefore bootstrap by downloading the absolute current State."
msgstr ""

#: ../../technical-doc/bootstrap.rst:28
#: 2d02b1f44cee4f60bb98d247f78fb1d4
msgid "Note that nodes can recover from short-term disconnects by asking for missing data from nodes around them once they come back in the network. However, since Massa nodes only store a short history of blocks and forget older ones, it is impossible to recover from long disconnects since the surrounding nodes have forgotten the blocks needed by the recovering node. In that case, a new State bootstrap is required."
msgstr ""

#: ../../technical-doc/bootstrap.rst:34
#: b5b2ffcd0be94f0899f6565d164ff45a
msgid "Security model"
msgstr ""

#: ../../technical-doc/bootstrap.rst:37
#: 5363358642b143ac8222bddec0255370
msgid "The example of Bitcoin"
msgstr ""

#: ../../technical-doc/bootstrap.rst:39
#: 2301225393844823a24eef51d6d142f1
msgid "To understand the security model of node bootstrap, Bitcoin is a good starting example."
msgstr ""

#: ../../technical-doc/bootstrap.rst:41
#: 5cfb58b6828f4b0984106ddb4cc0a356
msgid "When Bitcoin node runners decide to join the network, they first download the node software from a central source (eg. bitcoin.org). If that source is compromised, the node might end up on a different network, and/or private key theft might happen. Bitcoin therefore requires trust in the entity sourcing the node software."
msgstr ""

#: ../../technical-doc/bootstrap.rst:45
#: 5a822c3606e5457d8e18489c9ce4f1d3
msgid "Note that optionally, if the nodes don't wish to download the full block history they resort to trusting a more recent \"checkpoint\" state encoded in the node software. If that state is compromised, the node's knowledge of the whole ledger might be skewed."
msgstr ""

#: ../../technical-doc/bootstrap.rst:49
#: 581374a40d594f278f68767ade999dfc
msgid "Assuming the node software is not corrupted, new nodes joining the network need an initial list of peer nodes to which they need to connect first in order to discover the network. This list is hardcoded in the node software (see `the bitcoin docs <https://developer.bitcoin.org/devguide/p2p_network.html#peer-discovery>`_). If all peers pointed by this initial list are compromised, the node can end on a different (non-bitcoin) network, even if the node software itself is not compromised. Bitcoin therefore also requires trust in at least one of the initial peers."
msgstr ""

#: ../../technical-doc/bootstrap.rst:55
#: 2dbf60594fda47dfa8a594b5f74e4eed
msgid "Note that ending up on the wrong network can be detected by checking block hashes with an external source. But this requires trusting yet another source of data."
msgstr ""

#: ../../technical-doc/bootstrap.rst:59
#: 3408d00b9cca45ab80c579fe2cc8d7d8
msgid "The case of Massa"
msgstr ""

#: ../../technical-doc/bootstrap.rst:61
#: 67e47d2ead614db89b6b4ea214b8b256
msgid "The Massa case is very similar to Bitcoin's. Node runners also need to trust the source of the node software they download, as well as the initial list of peers."
msgstr ""

#: ../../technical-doc/bootstrap.rst:64
#: 91ece502f6a64275bfa0edce28c02ebe
msgid "Similarly to Bitcoin checkpoints, bootstrapping Massa nodes must obtain the current State from a trusted source, ideally the same source as the one they downloaded the node software from, in order to avoid having to trust multiple entities."
msgstr ""

#: ../../technical-doc/bootstrap.rst:67
#: 4bac5ddf80164938ab3705ec88084a98
msgid "Downloading the state from an untrusted source can result in major issues such as coin theft. As such, bootstrapping from untrusted sources should be discouraged, and bootstrapping other nodes should be opt-in for node runners to avoid \"bootstrap lists\" circulating as the default way of bootstrapping from unaware node runners."
msgstr ""

#: ../../technical-doc/bootstrap.rst:72
#: 8a6dbd663d19432e9c809b69722a2c99
msgid "Implementation details"
msgstr ""

#: ../../technical-doc/bootstrap.rst:75
#: 49262797099f4aa998a7cacb4de696a5
msgid "Procedure from the point of view of the node being bootstrapped"
msgstr ""

#: ../../technical-doc/bootstrap.rst:77
#: c49c3fa61d5b4773b01c1f7422aac66e
msgid "Massa nodes that bootstrap start by connecting to a randomly chosen node among the ones listed in `massa-node/base_config/config.toml` (section `Bootstrap/bootstrap_list`)."
msgstr ""

#: ../../technical-doc/bootstrap.rst:80
#: 457a06989ad44f0480b109c059168645
msgid "The bootstrap process uses a separate port and protocol than the normal Massa peer communication."
msgstr ""

#: ../../technical-doc/bootstrap.rst:82
#: 2bf7901ad7af4d3baa1ff09086310be5
msgid "All communications with the chosen bootstrap node are authenticated using the public key (node ID) of the bootstrap node (in the `config.toml` file, section `Bootstrap/bootstrap_list`) to prevent man-in-the-middle attacks."
msgstr ""

#: ../../technical-doc/bootstrap.rst:85
#: beeff13d3c514410899f93dce67b16bd
msgid "The node being bootstrapped then attempts to download the current State, as well as an initial list of peers from the bootstrap node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:88
#: 05a82be1d26a429e9c19eadf7ce357fd
msgid "Once successfully bootstrapped, the node can then connect to peers, discover the rest of the network, and process live incoming blocks to keep its state up to date."
msgstr ""

#: ../../technical-doc/bootstrap.rst:91
#: afab8f8313fc4e129d9d369d8501a770
msgid "In Massa, the hash of the state is used as part of the proof-of-stake seed, which is a safety mechanism against malicious bootstrap nodes sending a compromised State. It ensures that nodes with an altered State eventually end up isolated from the real network because their proof-of-stake draws differ which causes them to discard incoming honest blocks. Note however that a PoS seed mismatch can take up to 2 cycles to be detected."
msgstr ""

#: ../../technical-doc/bootstrap.rst:96
#: 637fe61b3a074cadb26faae327d6dfe3
msgid "In case of bootstrap failure, the bootstrapping node retries with another randomly chosen bootstrap node after a delay."
msgstr ""

#: ../../technical-doc/bootstrap.rst:99
#: c6ef22644f1f4960867d7a1e3fd4d1d7
msgid "Procedure from the point of view of the bootstrap node"
msgstr ""

#: ../../technical-doc/bootstrap.rst:101
#: 3a355819b8824d03be31d6b346fbc001
msgid "Massa nodes can bootstrap other nodes, with certain limitations because the procedure is heavy for the bootstrap node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:103
#: d466e1c773fb4d4b9aa9f022adf32441
msgid "The bootstrap system listens on the address/port defined in `massa-node/base_config/config.toml` (section `bootstrap/bind`). The node's bootstrap server can be disabled by removing the `bind` entry from the config file."
msgstr ""

#: ../../technical-doc/bootstrap.rst:106
#: 21ce0de89a714f5889a0b1016b42ec4b
msgid "The Massa State is large (~1 terabyte in the worst case), and takes time to upload to bootstrapping nodes. During that time, new changes to the state continue to appear, so new changes affecting already-uploaded parts need to be sent on-the-fly."
msgstr ""

#: ../../technical-doc/bootstrap.rst:110
#: c7c6abc0b03a4aa08e6c8fcf9ea6037d
msgid "By default, Massa nodes only allow a whitelist of IP addresses to bootstrap from them. This list is present in the `massa-node/base_config/bootstrap_whitelist.json` file. This list is intended to prevent flooding attacks by attackers pretending to be bootstrapping, and also makes it more difficult for node runners to bootstrap from untrusted sources. If you wish to disable whitelisting and allow anyone to bootstrap from your node, simply delete the `bootstrap_whitelist.json` file and restart your node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:116
#: 84dd59f44fcd4721ae85ab2a37585ab1
msgid "A complementary `bootstrap_blacklist.json` (absent by default) can also be created alongside `bootstrap_whitelist.json` (and following the same syntax) in order to explicitly prevent certain IP addresses from bootstrapping from the node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:119
#: a8fc2f38257b472f8322048523c330ef
msgid "Once a node has accepted to bootstrap an incoming node, it adds the incoming node's IP address to a local cache preventing that IP from bootstrapping again for a time defined in `massa-node/base_config/config.toml` (section `bootstrap/per_ip_min_interval`) by refusing subsequent connections from that IP during the config-defined delay. The exclusion delay is not extended if the remote IP attempts new connections during the exclusion delay. The exclusion delay is however applied if the bootstrap was accepted but failed for any reason. This aims at limiting the load on individual bootstrap nodes, and spreading the load among bootstrap nodes."
msgstr ""

#: ../../technical-doc/bootstrap.rst:126
#: 11e6e3b7768645a68c4bd95def0c5e54
msgid "The number of nodes simultaneously bootstrapping from the local node is limited (`massa-node/base_config/config.toml` section `bootstrap/max_simultaneous_bootstraps`). Excess attempts are refused but do not trigger the exclusion delay mechanism."
msgstr ""

#: ../../technical-doc/bootstrap.rst:131
#: c2018b0acb7e475a8ea97ec8247562d6
msgid "Future optimizations"
msgstr ""

#: ../../technical-doc/bootstrap.rst:133
#: d78e948970e44018b17bfd61ad651bc2
msgid "We plan to add the possibility to download bootstrap data from untrusted sources for load-balancing, but then check the hash of the obtained state from trusted sources, and only fallback to downloading everything from trusted sources if multiple bootstrap attempts from this hybrid approach fail."
msgstr ""
