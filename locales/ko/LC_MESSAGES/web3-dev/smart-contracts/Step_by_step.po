# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-13 00:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/Step_by_step.rst:2
#: 133bc56e2a504827bbc5bb80d951728f
msgid "Web 3 autonomous game tutorial, Step by Step!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:5
#: aaa92f0054cd40678a887819f7d92025
msgid "Intro"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:7
#: 78cd7a66390f4e889bab35b91201be07
msgid ""
"In this tutorial, we will see how to step by step develop a web3 "
"autonomous video game based on cats living autonomously on the Massa "
"blockchain. Idea is simple : a user creates a cat, and have to feed him "
"with massa tokens in order to avoid starving and death ! The cat has to "
"eat periodically."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:9
#: 82da884d9b7f4886a6fab7de24e74acf
msgid ""
"Each cat is technically a smart contract deployed on the Massa "
"blockchain. We will see how to set this smart contract autonomous in "
"order to allows it to carry out actions by itself."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:13
#: 308092cfec10422693a0161a9c646531
msgid "1) How to create and deploy a cat"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:15
#: 7d65f18af1f54edcb7c3fe7c28061528
msgid ""
"First of all, we need to create and deploy on the blockchain the smart "
"contracts for each cat using 2 scripts :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:17
#: f8d9399f38b24d3e9b8a37a80fb45a0b
msgid "main.ts : will allow us to deploy the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:18
#: 8caf166bf6c044169d623a516c1c3e19
msgid "cat.ts : will manage all behaviour of the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:21
#: 209a495de5ad46498e4c29177b8f3503
msgid "The main.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:50
#: ../../web3-dev/smart-contracts/Step_by_step.rst:132
#: 9bb1a94ecf6e4217811f9e1b758d9cb5 f416349d69b44becba33584393373ebc
msgid "Code analysis :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:52
#: 7fc66029a1ba4d279695357bcc5c2687
msgid "Let's see line by line what is going on :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:54
#: 488111bb8b6843378876d0410a4b2026
msgid "Import Massalabs library :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:60
#: 89151f85df1b482e8fbceddd7d9a3888
msgid ""
"==> The goal of this line is to import from the \"massalabs/massa-as-"
"sdk\" library the functions that we will be used : { createSC, "
"fileToByteArray, Storage, Context, generateEvent, call}"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:63
#: fac0fc6d18b345c784a18335e9f32ce3
msgid "main() function to execute the script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:72
#: 8cef1f5b75554654ab5623676bed472a
msgid ""
"==> This step declares the function main() that will be executed on the "
"blockchain. Inside the function we can find :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:74
#: c02d51af645d4931a01252b3ec06412f
msgid ""
"const bytes: StaticArray<u8> = fileToByteArray('./build/cat.wasm'); ==> "
"in order to create the binary code from the \"cat.wasm\" file and store "
"it into the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:75
#: 9a299912f1ac4b7db3c60ad1d5d4e889
msgid ""
"let addr = createSC(bytes); ==> in order to instanciate the addr variable"
" and deploy the smart contract of the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:76
#: e97f98167a0c4e2db10010906ad6f52e
msgid ""
"generateEvent(\"A new cat is born! Address of the cat : \" + "
"addr.toByteString()); ==> will just send a message on the client with the"
" smart contract address, using the function generateEvent(\"Message\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:79
#: 9d18e27ccefb488592ceecc09de8408c
msgid "Define the attributes of the new cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:89
#: cd036d3d96f64394b6ffe4d70ff81752
msgid ""
"==> Using the Storage.setOf() function, we can set different attributes "
"as : the name of the cat, the current state of the cat, etc."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:91
#: b2630131dab7484abf3752255c768d28
msgid ""
"Storage.setOf() will technically create a key owned by the smart contract"
" only :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:93
#: d713fc69d773408486241f05d8276515
msgid ""
"You can change the value of the key using : "
"Storage.setOf(toBytes(\"key\"), toBytes(\"value\"))."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:94
#: 15fa593651e44126a0c1fb09f5f7b460
msgid "You can get the value of the key using : Storage.getOf(toBytes(\"key\"))."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:96
#: 1bee5b60b612417ca39c0f0836562d90
msgid "Using the Context.timestamp() function, we can get the current timestamp."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:99
#: 7b856eea070f4586a574c76271f5c667
msgid "Get information from the cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:110
#: 2db8da245c9847ab846bb5ec53519c5f
msgid ""
"==> We can print the cat information into the client using the function "
"generateEvent(\"Message\") and using the call() function."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:112
#: b0568731ccbd4998926dbf2224075ad6
msgid ""
"The call() function allows us to call the functions defined into our cat "
"smart contract knowing the address of this one and should be used like :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:114
#: a9e53274856a4cc68a4eccdadaa54161
msgid ""
"call(address_of_the_smart_contract_to_call, \"function_to_call\", params,"
" tokens_to_send_during_the_call)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:118
#: dcc957acc2fb45a7a2d5c9bf22b8197b
msgid "The cat.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:134
#: f6c0f99e9f2a4141af81f604d85b22fb
msgid ""
"When the main.ts script is executed for the first time, we declared keys "
"like \"name\", \"birth\" etc with specific values. In order to create the"
" game, we need those keys avaible at each time by someone, or an another "
"smart contract. Thus, we can do it declaring functions callable using : "
"\"export function my_function()\""
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:143
#: d01fe5e7c6e045e69a3192f3c2c2f6bb
msgid ""
"==> for instance here we declare into the cat smart contract a callable "
"function named \"get_name\" that will return a StaticArray<u8> with the "
"value of the key \"name\"."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:145
#: d76f1f132c374c1e9085ff07e4233e3a
msgid ""
"Thus, any smart contract will be able to get the name of the cat using a "
"call() function :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:147
#: 883591db6021466da0ca6062ed147468
msgid "call(address_of_the_cat, \"get_name\", new StaticArray<u8>(0), 0)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:150
#: d966e6f9019d4b999dea8511968967b8
msgid "Lets try our code!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:152
#: 9b998d2c31c54bcaa37d1779f2afabc2
msgid "Just compile your main.ts file in the terminal using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:161
#: b5eaf5fd2fb14871b9609c1e0514beaa
msgid "Make sure your file \"my-sc/package.json\" is written as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:186
#: 617c71e5c1264b40a0f92387f0384f3a
msgid ""
"Copy the file \"main.wasm\" from my-sc/build/main.wasm to massa/massa-"
"client/main.wasm using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:193
#: 12518fce1634402e9f072e109c365ad5
msgid ""
"Send the smart contract on the blockchain massa using into the massa "
"client the following command :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:199
#: df9838db36474069a96ad8e320added4
msgid ""
"And get the events sent by \"generateEvent()\" function used in our "
"script. You can filter them by your emitter address using the following "
"command into the client :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:205
#: 079fc0ef70e24337af4990116bc9d2bf
msgid "You should get as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:232
#: 6ad71825110e4f56bf7f62720df792a4
msgid "2) How to feed him with tokens"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:235
#: 6742ba4946c0420ba1466884dd2c79c3
msgid "3) How to set him autonomous"
msgstr ""

