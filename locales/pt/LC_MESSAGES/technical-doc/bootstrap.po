# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-11 00:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../technical-doc/bootstrap.rst:3 32955a23b8bd45fdb6c6ccce84ecfebe
msgid "Bootstrapping in Massa"
msgstr ""

#: ../../technical-doc/bootstrap.rst:6 d4f0a7ba70024cdab8288b9652a1e181
msgid "Introduction"
msgstr ""

#: ../../technical-doc/bootstrap.rst:8 c43903c26d7e4af29c4b695bbe7d5b22
msgid ""
"Nodes that are already part of the network are able to follow the State "
"by observing the blocks passing through the network, verifying them, and "
"applying the state changes they cause."
msgstr ""

#: ../../technical-doc/bootstrap.rst:11 45b2377d8c284f229c73adc996140964
msgid ""
"However, new nodes joining the network need to get an absolute "
"\"current\" version of the state, which is called \"bootstrapping\". In "
"some blockchains like Bitcoin, full nodes joining the network are "
"recommended to download all blocks from the beginning (genesis) of the "
"blockchain in order to re-verify the whole state change history."
msgstr ""

#: ../../technical-doc/bootstrap.rst:18 a299ad5f00e84a4cbdf083d3169de56a
msgid "However, Massa has a triple decentralization/security/performance goal:"
msgstr ""

#: ../../technical-doc/bootstrap.rst:16 bfa3a207497d44b989a14b8ec1335444
msgid ""
"maximal decentralization requires that node hardware requirements stay "
"consistent with a typical consumer desktop computer to lower the entry "
"barrier of becoming a node runner"
msgstr ""

#: ../../technical-doc/bootstrap.rst:17 8bae9723fc5e4225b7f808b7d5800631
msgid "maximal security requires that all nodes verify all blocks and operations"
msgstr ""

#: ../../technical-doc/bootstrap.rst:18 e611f0205d71442e9b81ceaa9826e291
msgid ""
"maximal performance requires using the node hardware to its fullest (CPU,"
" network, memory, storage)"
msgstr ""

#: ../../technical-doc/bootstrap.rst:20 ad8f23e8b1e1461db961da55ccb15e2c
msgid ""
"This means that the State in Massa evolves almost as fast as typical "
"consumer desktop computers can run blocks, which implies that catching up"
" blocks since genesis goes only slightly faster than new blocks appear in"
" the meantime, and would take a very long time. Moreover, Massa aims at "
"processing thousands of operations per second, which means that it "
"produces a lot of block data every second, thus preventing nodes with the"
" target hardware from storing the full block history and making "
"bootstrapping from genesis impossible since old blocks are forgotten."
msgstr ""

#: ../../technical-doc/bootstrap.rst:28 e65eb59702ff40ad82f29330ea9c84c6
msgid ""
"Massa nodes joining the network must therefore bootstrap by downloading "
"the absolute current State."
msgstr ""

#: ../../technical-doc/bootstrap.rst:30 70ec435af7594962ba9fef26649f3711
msgid ""
"Note that nodes can recover from short-term disconnects by asking for "
"missing data from nodes around them once they come back in the network. "
"However, since Massa nodes only store a short history of blocks and "
"forget older ones, it is impossible to recover from long disconnects "
"since the surrounding nodes have forgotten the blocks needed by the "
"recovering node. In that case, a new State bootstrap is required."
msgstr ""

#: ../../technical-doc/bootstrap.rst:36 20023575c3e24704b51382549dca9a00
msgid "Security model"
msgstr ""

#: ../../technical-doc/bootstrap.rst:39 0efca5ee69c24b8ebc88f4c39f0e7a50
msgid "The example of Bitcoin"
msgstr ""

#: ../../technical-doc/bootstrap.rst:41 268e3ae7e7a54385b1e55a573e2be4fd
msgid ""
"To understand the security model of node bootstrap, Bitcoin is a good "
"starting example."
msgstr ""

#: ../../technical-doc/bootstrap.rst:43 4ffb905a33ae4de5be411f78e3730e17
msgid ""
"When Bitcoin node runners decide to join the network, they first download"
" the node software from a central source (eg. bitcoin.org). If that "
"source is compromised, the node might end up on a different network, "
"and/or private key theft might happen. Bitcoin therefore requires trust "
"in the entity sourcing the node software."
msgstr ""

#: ../../technical-doc/bootstrap.rst:47 1923a6c1dbba4c30b8f8ee94e15ed96a
msgid ""
"Note that optionally, if the nodes don't wish to download the full block "
"history they resort to trusting a more recent \"checkpoint\" state "
"encoded in the node software. If that state is compromised, the node's "
"knowledge of the whole ledger might be skewed."
msgstr ""

#: ../../technical-doc/bootstrap.rst:51 694a585dc4d74f149c2f6ead882981f1
msgid ""
"Assuming the node software is not corrupted, new nodes joining the "
"network need an initial list of peer nodes to which they need to connect "
"first in order to discover the network. This list is hardcoded in the "
"node software (see `the bitcoin docs "
"<https://developer.bitcoin.org/devguide/p2p_network.html#peer-"
"discovery>`_). If all peers pointed by this initial list are compromised,"
" the node can end on a different (non-bitcoin) network, even if the node "
"software itself is not compromised. Bitcoin therefore also requires trust"
" in at least one of the initial peers."
msgstr ""

#: ../../technical-doc/bootstrap.rst:58 d235fb4c30c54c3ba3eb692988fa02cb
msgid ""
"Note that ending up on the wrong network can be detected by checking "
"block hashes with an external source. But this requires trusting yet "
"another source of data."
msgstr ""

#: ../../technical-doc/bootstrap.rst:62 8461821d035440ccb71860099a4c90c1
msgid "The case of Massa"
msgstr ""

#: ../../technical-doc/bootstrap.rst:64 defed155d4514d679bce81809a328c2e
msgid ""
"The Massa case is very similar to Bitcoin's. Node runners also need to "
"trust the source of the node software they download, as well as the "
"initial list of peers."
msgstr ""

#: ../../technical-doc/bootstrap.rst:68 a6e5c070346140cf8d460cf28d8a9b99
msgid ""
"Similarly to Bitcoin checkpoints, bootstrapping Massa nodes must obtain "
"the current State from a trusted source, ideally the same source as the "
"one they downloaded the node software from, in order to avoid having to "
"trust multiple entities."
msgstr ""

#: ../../technical-doc/bootstrap.rst:71 1b2ca5c99ca0489d8df43f797d5c0f32
msgid ""
"Downloading the state from an untrusted source can result in major issues"
" such as coin theft. As such, bootstrapping from untrusted sources should"
" be discouraged, and bootstrapping other nodes should be opt-in for node "
"runners to avoid \"bootstrap lists\" circulating as the default way of "
"bootstrapping from unaware node runners."
msgstr ""

#: ../../technical-doc/bootstrap.rst:78 88d073233e2a4047a91393e7e1f6db81
msgid "Implementation details"
msgstr ""

#: ../../technical-doc/bootstrap.rst:81 fea102428675454a8b376468f4578954
msgid "Procedure from the point of view of the node being bootstrapped"
msgstr ""

#: ../../technical-doc/bootstrap.rst:83 4460a4b9063c4480b6208a22e9c82976
msgid ""
"Massa nodes that bootstrap start by connecting to a randomly chosen node "
"among the ones listed in `massa-node/base_config/config.toml` (section "
"`Bootstrap/bootstrap_list`)."
msgstr ""

#: ../../technical-doc/bootstrap.rst:86 cd7ab7ec9cf6483cbde60fdf184059aa
msgid ""
"The bootstrap process uses a separate port and protocol than the normal "
"Massa peer communication."
msgstr ""

#: ../../technical-doc/bootstrap.rst:88 7e300edc4675465fb7841f1cafeb9000
msgid ""
"All communications with the chosen bootstrap node are authenticated using"
" the public key (node ID) of the bootstrap node (in the `config.toml` "
"file, section `Bootstrap/bootstrap_list`) to prevent man-in-the-middle "
"attacks."
msgstr ""

#: ../../technical-doc/bootstrap.rst:92 960b13acf39845d0af90c2aad7d629dc
msgid ""
"The node being bootstrapped then attempts to download the current State, "
"as well as an initial list of peers from the bootstrap node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:94 bc16464fb0404a2f84a3add9230032ec
msgid ""
"Once successfully bootstrapped, the node can then connect to peers, "
"discover the rest of the network, and process live incoming blocks to "
"keep its state up to date."
msgstr ""

#: ../../technical-doc/bootstrap.rst:97 a7d730b80f654057aaa28712048b4f93
msgid ""
"In Massa, the hash of the state is used as part of the proof-of-stake "
"seed, which is a safety mechanism against malicious bootstrap nodes "
"sending a compromised State. It ensures that nodes with an altered State "
"eventually end up isolated from the real network because their proof-of-"
"stake draws differ which causes them to discard incoming honest blocks. "
"Note however that a PoS seed mismatch can take up to 2 cycles to be "
"detected."
msgstr ""

#: ../../technical-doc/bootstrap.rst:103 f0aa68f18a394d3d8fcc75e6016e8b13
msgid ""
"In case of bootstrap failure, the bootstrapping node retries with another"
" randomly chosen bootstrap node after a delay."
msgstr ""

#: ../../technical-doc/bootstrap.rst:107 65db6269ae054ab99706f756728349d2
msgid "Procedure from the point of view of the bootstrap node"
msgstr ""

#: ../../technical-doc/bootstrap.rst:109 c6969eab61114ebbb3faf0f0a55f298f
msgid ""
"Massa nodes can bootstrap other nodes, with certain limitations because "
"the procedure is heavy for the bootstrap node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:111 35442479538c453c9a9c9f4a870a7820
msgid ""
"The bootstrap system listens on the address/port defined in `massa-"
"node/base_config/config.toml` (section `bootstrap/bind`). The node's "
"bootstrap server can be disabled by removing the `bind` entry from the "
"config file."
msgstr ""

#: ../../technical-doc/bootstrap.rst:114 1c44d506cc75412a910d251197fc158c
msgid ""
"The Massa State is large (~1 terabyte in the worst case), and takes time "
"to upload to bootstrapping nodes. During that time, new changes to the "
"state continue to appear, so new changes affecting already-uploaded parts"
" need to be sent on-the-fly."
msgstr ""

#: ../../technical-doc/bootstrap.rst:118 34c7032c91ec4a61a0a533257ab48d6f
msgid ""
"By default, Massa nodes only allow a whitelist of IP addresses to "
"bootstrap from them. This list is present in the `massa-"
"node/base_config/bootstrap_whitelist.json` file. This list is intended to"
" prevent flooding attacks by attackers pretending to be bootstrapping, "
"and also makes it more difficult for node runners to bootstrap from "
"untrusted sources. If you wish to disable whitelisting and allow anyone "
"to bootstrap from your node, simply delete the `bootstrap_whitelist.json`"
" file and restart your node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:125 c3aba112a6684340a417b8db2079bb68
msgid ""
"A complementary `bootstrap_blacklist.json` (absent by default) can also "
"be created alongside `bootstrap_whitelist.json` (and following the same "
"syntax) in order to explicitly prevent certain IP addresses from "
"bootstrapping from the node."
msgstr ""

#: ../../technical-doc/bootstrap.rst:129 3030223f9fbd40ad8e1b46b6abef292f
msgid ""
"Once a node has accepted to bootstrap an incoming node, it adds the "
"incoming node's IP address to a local cache preventing that IP from "
"bootstrapping again for a time defined in `massa-"
"node/base_config/config.toml` (section `bootstrap/per_ip_min_interval`) "
"by refusing subsequent connections from that IP during the config-defined"
" delay. The exclusion delay is not extended if the remote IP attempts new"
" connections during the exclusion delay. The exclusion delay is however "
"applied if the bootstrap was accepted but failed for any reason. This "
"aims at limiting the load on individual bootstrap nodes, and spreading "
"the load among bootstrap nodes."
msgstr ""

#: ../../technical-doc/bootstrap.rst:137 80104353e2cc4e73be912a056e951ee4
msgid ""
"The number of nodes simultaneously bootstrapping from the local node is "
"limited (`massa-node/base_config/config.toml` section "
"`bootstrap/max_simultaneous_bootstraps`). Excess attempts are refused but"
" do not trigger the exclusion delay mechanism."
msgstr ""

#: ../../technical-doc/bootstrap.rst:142 41641da880bc4894a563b8c6cb0b0739
msgid "Future optimizations"
msgstr ""

#: ../../technical-doc/bootstrap.rst:144 d42dcb28560b423b92671e8ec7f950eb
msgid ""
"We plan to add the possibility to download bootstrap data from untrusted "
"sources for load-balancing, but then check the hash of the obtained state"
" from trusted sources, and only fallback to downloading everything from "
"trusted sources if multiple bootstrap attempts from this hybrid approach "
"fail."
msgstr ""

