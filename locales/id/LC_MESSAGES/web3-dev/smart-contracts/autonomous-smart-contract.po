# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-23 00:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: id\n"
"Language-Team: id <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:4
#: 11352e1c983e400c8da6b09a99798b38
msgid "Autonomous Smart Contract"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:6
#: 3a1f3c2227984c689aae0362cfc49c75
msgid ""
"Massa smart contracts have the unique feature of being able to "
":ref:`autonomously define when they will be active <general-asc>`, "
"without external actors. By the end of this page, you will have a basic "
"understanding of:"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:9
#: d91013b9540148aea590f97d9e1786dc
msgid ""
"How to use the sendMessage(...) ABI in order to make your smart contracts"
" autonomous"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:10
#: 5dbb36bd33584f5a994f0b0bfd6651e7
msgid "Provided autonomous smart contracts examples"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:13
#: 3e371f1c64874e148636c331a162c53d
msgid "Use sendMessage to automate your smart contracts"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:15
#: afd7fe6329624d8cab21628495188878
msgid ""
"As we've just seen, the core principal enabling the autonomous smart "
"contracts feature, is the ability to emit a special message which has the"
" effect of executing a desired function call at a specified window in "
"time, and (optionally) when other specified conditions are met."
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:19
#: 62116c18f1814e3785ca1e06bf4515c8
msgid ""
"The ABI method `sendMessage(...)` is the key to emitting such a message, "
"and the provided parameters define its configuration:"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:22
#: 4b839859f42749f2ac106767b156b6a8
msgid ""
"`at`: Address of the smart-contract that you want to wakeup(can be "
"yourself)"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:23
#: 229a51b2d42e49699c482d4003c4b37f
msgid "`functionName`: Function of the smart-contract to call"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:24
#: b249412fcd114975816fcba9e84272c3
msgid ""
"`validityStartPeriod` and `validityStartThread`: First slot where your "
"message could be executed"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:25
#: d61734973c6a4a4f8422c637ba941db1
msgid ""
"`validityEndPeriod` and `validityEndThread`: Last slot where you message "
"can be executed"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:26
#: 7a90f2bca76c444e90c58a1355608ff1
msgid ""
"`maxGas`: Maximum amount of gas for the execution of the function "
"referenced in the message"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:27
#: 431ef312c1c9487fafcf0f754adff46a
msgid "`rawFee`: A fee to gain prority in the async pool"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:28
#: e60e3f4532e14c0080d9cb8fcede0da0
msgid ""
"`coins`: Coins that will be passed to the smart contract called in the "
"message"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:29
#: 887f349849ce4660b10cbc6865cd2f49
msgid "`data`: Parameter of the function called in the message"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:30
#: 752fce95a6594b188990c3ea33f8ca3e
msgid ""
"`filterAddress`: An optional address that you can define if you want your"
" function to be executed in your validity period BUT only after a "
"modification in the data of the address (balance, bytecode, datastore)"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:32
#: 9305dc574567426babe8a73054a78dc7
msgid ""
"`filterKey`: An optional datastore key that will execute the message only"
" if there is changes on this datastore key of the `filterAddress`"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:36
#: be16c3d88a284c44907def203d56c1b8
msgid "Examples"
msgstr ""

#: ../../web3-dev/smart-contracts/autonomous-smart-contract.rst:38
#: ac760545674040fd9b0a7aa02734f760
msgid ""
"You can find an example of autonomous smart contracts in `this ticker "
"example <https://github.com/massalabs/massa-sc-"
"examples/tree/main/ticker>`_, where `sendMessage(...)` is used in `this "
"function <https://github.com/massalabs/massa-sc-"
"examples/blob/main/ticker/assembly/contracts/oracle.ts#L25>`_."
msgstr ""

#~ msgid ""
#~ "Massa smart contracts have the unique"
#~ " feature of being able to "
#~ "autonomously define when they will be"
#~ " active, without external actors. By "
#~ "the end of this page, you will "
#~ "have a basic understanding of"
#~ msgstr ""

#~ msgid "The mechanisms behind autonomous smart contracts"
#~ msgstr ""

#~ msgid "Mechanism in Massa network"
#~ msgstr ""

#~ msgid ""
#~ "This system works by emitting messages"
#~ " which will schedule an execution. To"
#~ " do so, the following must be "
#~ "specified:"
#~ msgstr ""

#~ msgid "The address of the SC to be executed"
#~ msgstr ""

#~ msgid "The function to be executed"
#~ msgstr ""

#~ msgid "The desired execution window"
#~ msgstr ""

#~ msgid "(Optional) The activation triggers"
#~ msgstr ""

#~ msgid ""
#~ "Normally, when you submit an operation,"
#~ " the operation is sent in the "
#~ "operation pool and in the future "
#~ "included in a block to be "
#~ "executed: you pay the gas at "
#~ "execution time. With autonomous SCs, the"
#~ " message is emitted inside of the "
#~ "operation and and you pay the gas"
#~ " for the message execution upfront. "
#~ "The message is then sent to "
#~ "another pool called the async pool."
#~ msgstr ""

#~ msgid ""
#~ "This pool is deterministic by nature,"
#~ " as it's filled with information that"
#~ " comes from operations included in "
#~ "blocks which is processed by every "
#~ "node of the network."
#~ msgstr ""

#~ msgid ""
#~ "The pool has a finite size, and"
#~ " sorts its messages with a similar"
#~ " behaviour as the operation pool: "
#~ "there is a priority, which is "
#~ "computed from the message emission fees,"
#~ " maximum execution gas, and length of"
#~ " the execution window. The messages "
#~ "get removed after a certain number "
#~ "of slots if they were not "
#~ "executed."
#~ msgstr ""

#~ msgid ""
#~ "The number of messages that can be"
#~ " executed by each slot are limited"
#~ " by a maximum amount of gas "
#~ "like normal operations and so it's "
#~ "possible that your message isn't "
#~ "executed at the slot that you want"
#~ " (such as operations that could be"
#~ " not included in the first block "
#~ "after you sent it), but in a "
#~ "later slot, when there is enough "
#~ "space to include your message. If "
#~ "you want to have your message to"
#~ " be included as soon as possible, "
#~ "you have to put more fees than "
#~ "the others (just like the operations)."
#~ msgstr ""

#~ msgid "The order of the messages is determined by the formula:"
#~ msgstr ""

#~ msgid ""
#~ "`(Reverse(Ratio(msg.fee, max(msg.max_gas,1))), "
#~ "emission_slot, emission_index)`"
#~ msgstr ""

#~ msgid ""
#~ "where `emission_index` is an index that"
#~ " differentiate multiple messages created in"
#~ " the same slot."
#~ msgstr ""

#~ msgid "Use sendMessage to add autonomy in your smart contracts"
#~ msgstr ""

#~ msgid ""
#~ "You can find an example of "
#~ "autonomous smart contracts in `this "
#~ "ticker example <https://github.com/massalabs/massa-"
#~ "sc-examples/tree/main/ticker>`__, where "
#~ "`sendMessage(...)` is used `here "
#~ "<https://github.com/massalabs/massa-sc-"
#~ "examples/blob/a69dd88079caf0932e638689a518627b15a4d407/ticker/assembly/contracts/oracle.ts#L25>`__"
#~ msgstr ""

