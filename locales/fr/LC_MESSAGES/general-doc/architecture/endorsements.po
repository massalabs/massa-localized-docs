# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-29 10:50+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../general-doc/architecture/endorsements.rst:3
#: efa93cc6961545898b124319075054f5
msgid "Endorsements"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:6
#: cc379d6724d741aa943d92e6d089b13e
msgid "Intro"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:9
#: 5a8f42660e5f42ad86093a8d3afb0b41
msgid ""
"Massa uses the Proof-of-Stake selection mechanism with Nakamoto "
"consensus. In that context, when there are multiple cliques in close "
"competition, we want all nodes to converge towards a single clique as "
"fast as possible to minimize finality time and maximize the quality of "
"the consensus. To achieve this, we draw inspiration from Tezos and "
"introduce the concept of Endorsement."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:15
#: 8ced699c358a4ecb95a6feded488172f
msgid "Basic principle"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:17
#: f0abb670406b4130a1e05c6d90f25b37
msgid ""
"Each block header has `E` ordered endorsement slots: each one can include"
" an endorsement or not. Each endorsement contains:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:19
#: b8fd6600f2424ae483222e8fe21855ef
msgid ""
"The slot `S` in which it is meant to be included. The endorsement can "
"only be included in blocks of slot `S`."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:20
#: 4bfe389847ee491d94989d3bc4819b68
msgid ""
"The hash of the endorsed block. This is the hash of the latest "
"blockclique block of thread `S.thread` according to the endorsement "
"creator at the moment the endorsement was created."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:21
#: add2c3d4b7ad446f83b37c0a02f4874b
msgid ""
"The index of the endorsement slot within the header from `0` (included) "
"to `E-1` (included). The endorsement can only be included at that "
"endorsement slot index within the block eader."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:22
#: f56d7e12fc4f4b7aa9453664fe6896ab
msgid "The public key of the creator of the endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:23
#: 8e8596676854427696f065adcb74ff45
msgid ""
"The signature of all the previous fields with the private key of the "
"creator of the endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:25
#: 8787083ca89d449780b7d34e2ef3d236
msgid ""
"At every slot `S`, we use the existing Proof-of-Stake selection mechanism"
" to not only draw the block creator for that slot, but also `E` other "
"stakers indexed from `0` (included) to `E-1` (included) that can create "
"Endorsements meant to be included in block headers of slot `S` at their "
"respective endorsement slot index."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:28
#: 572e1e9b416a44588caa5885bed3cacf
msgid ""
"Conceptually, each endorsement meant to be included at a slot `S` can be "
"seen as a single vote endorsing the parent in thread `S.thread` that the "
"endorsement creator would have chosen if they had to create a block at "
"slot `S`."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:31
#: 232dee0e20794b77a3460673e38f05c6
msgid ""
"The likelihood of the attacker getting lucky and being selected for `N` "
"consecutive PoS draws to attack/censor the system decays exponentially "
"with `N`. With endorsements, we don't have to wait for `N` blocks to "
"account for `N` proof-of-stake draws to happen as `E+1` draws happen at "
"every slot (1 for the block creator and `E` for endorsement creators). In"
" the consensus algorithm, we choose the clique of highest fitness as the "
"blockclique. A block including `e` endorsements out of the maximum `E` "
"contributes a fitness `e + 1` to the cliques it belongs to. The fitness "
"of a block is therefore reflected by the number of PoS draws that were "
"involved in creating it."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:37
#: eee973300d4a4496b2be4cdfe7d41923
msgid ""
"The net effect of this mechanism is to increase safety and convergence "
"speed by allowing block producers to quickly choose the best clique to "
"extend according to the \"votes\" provided by the endorsements."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:42
#: 571e945d0a84476996995acb91bed283
msgid "Structure of an endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:57
#: eb77217b701b4157909cbed2f3ecaf67
msgid ""
"Note that the `WrappedEndorsement` structure includes the underlying "
"`Endorsement` as well as the signature, and the public key of the "
"endorsement producer."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:59
#: 9102f41d52f447419a44b156960c1805
msgid "Within a block, endorsements are fully included inside the header."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:61
#: 1651fc60a060498a842d4543e77533d4
msgid "A header is invalidated if:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:63
#: adab3ae0328d4bffae8d11aaf20b50ad
msgid "it contains strictly more than `E` endorsements"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:64
#: 4bd144a344254f399278907d8ea7dfb7
msgid ""
"at least one of the endorsements fails deserialization or signature "
"verification"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:65
#: 2e72a235ce9749309f5c72d7036129fc
msgid ""
"at least one of the endorsements endorses a block different than the "
"parent of the including block within its own thread"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:66
#: d19a9f675bfd496088dca7a54a962ca1
msgid ""
"any of the endorsements should not have been produced at that "
"`(endorsement.slot, endorsement.index)` according to the selector"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:67
#: 3201b025a3464551ae41501eb7ea8dcb
msgid ""
"there is strictly more than one endorsement with a given "
"`endorsement.index`"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:70
#: e5b78b5dc75141a9a02196a79527b0f6
msgid "Lifecycle of an endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:72
#: e464c95f2a9645d089f555f65247d7e3
msgid ""
"To produce endorsements for slot `S`, the Endorsement Factory wakes up at"
" `timestamp(S) - t0/2` so that the previous block of thread `S.thread` "
"(the endorsed block) had the time to propagate, and so that the "
"endorsement itself has the time to propagate to be included in blocks of "
"slot `S`. It then checks the endorsement producer draws for slot `S`. At "
"every slot, there are `E` endorsement producer draws, one for each "
"endorsement index from `0` (included) to `E-1` (included). The factory "
"will attempt to create all the endorsements that need to be produced by "
"keypairs its wallet manages. To choose the block to endorse, the factory "
"asks Consensus for the ID of latest blockclique (or final) block `B` in "
"thread `S.thread` that has a strictly lower period than `S.period`. Every"
" created endorsement is then sent to the Endorsement Pool for future "
"inclusion in blocks, and to Protocol for propagation to other nodes."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:79
#: 0f54ca7053a642a1a31393ec6ffbb5cd
msgid ""
"In Protocol, endorsements can be received from other modules, in which "
"case they are propagated. They can also be received from other nodes, in "
"which case they added to the Endorsement Pool and propagated. "
"Endorsements are propagated only to nodes that don't already know about "
"them (including inside block headers)."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:83
#: 9edc3c4b2ec746159e54b4ed46154d27
msgid ""
"The Endorsement Pool stores a finite number of endorsements that can "
"potentially be included in future blocks created by the node. Consensus "
"notifies the Endorsement pool of newly finalized blocks, which allows the"
" pool to eliminate endorsements that can only be included in already-"
"finalized slots and are therefore not useful anymore."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:87
#: 81f3215e875d471392806f6e7983ea23
msgid ""
"When the Block Factory produces a block and needs to fill its header with"
" endorsements, it asks the Endorsement Pool for the endorsements that can"
" be included in the block's slot and that endorse the block's parent in "
"its own thread."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:91
#: 12ab313271f94e02bbc4080afc560ef5
msgid "Incentives and penalties"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:93
#: 8061bdae71ba4c3391d8612d565d119f
msgid "There needs to be an incentive in:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:95
#: 1a444dc644364aa391982ca3e0c91558
msgid ""
"creating blocks that can be endorsed, and also avoid publishing them too "
"late so that endorsers have the time to endorse them"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:96
#: 5c5d5981d2d5461babccd38a96a12371
msgid ""
"creating and propagating endorsements, also doing so not too early in "
"order to endorse the most recent block, and not too late for subsequent "
"blocks to be able to include the endorsement"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:97
#: 12de86674501416aaa5e1cf1853062a4
msgid ""
"including endorsements in blocks being created, and also not publishing "
"them too early to include as many endorsements as possible"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:99
#: 06a70e7faf3341e3ad42671329a17321
msgid ""
"To achieve this, we note `R` the total amount of coin revenue generated "
"by the block: the sum of the per-block monetary creation, and all "
"operation fees. We then split `R` into `1+E` equal parts called `r = "
"R/(1+E)`."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:102
#: 5a61339aab954050bb283741b6be9761
msgid ""
"`r` is given to the block creator to motivate block creation even if "
"there are no endorsements available"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:103
#: d560e3d58b5141adaaa1816023f42902
msgid "for each successfully included endorsement:"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:105
#: c006af5a51de40f29591d297de340760
msgid "`r/3` is given to the block creator to motivate endorsement inclusion"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:106
#: 70bf6f0ecb8f48f59fdb5ac136d05699
msgid "`r/3` is given to the endorsement creator to motivate endorsement creation"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:107
#: 99414c86bb6246aab72da529f115bc86
msgid ""
"`r/3` is given to the creator of the endorsed block to motivate the "
"timely emission of endorsable blocks"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:109
#: eb1b15c315df49d2b5b3cfae2f9bc8f4
msgid ""
"Note that this split also massively increases the frequency at which "
"stakers receive coins, which reduces the incentive to create staking "
"pools."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:113
#: 7dafd4d23a7c4369aa147590ed4103dd
msgid "Choosing the value of `E`"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:114
#: 7ca3056b86df4058987cda1be7f30915
msgid ""
"The value of `E` has implication both in the safety and in the "
"performance of the protocol. In terms of performance, the greater the "
"value of `E` is, the more ressources (bandwith, memory, computing power) "
"is needed to generate, broadcast and include endorsements, which could "
"induce latency. One the other hand, the value of `E` has implications in "
"the safety of the protocol. The threat we are looking at here is the "
"finality fork attack."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:119
#: acebe3003686469f8ad026572b3746d8
msgid "Finality fork attacks"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:120
#: 3002507e3c77436891c73b02517a1a32
msgid ""
"A finality fork attack is when an attacker that controls a portion `beta`"
" of the total stake, decides not to broadcast the blocks he has been "
"selected to produce, in order to construct an alternative and undisclosed"
" clique. The attacker's goal is to produce an attack clique that has a "
"fitness greater than the honnest clique. If he manages to do so, the "
"attacker can wait until the finalization time of a block `b` belonging to"
" the honest clique, to broadcast its attack clique. Because the fitness "
"of the attack clique is greater than the honest one, a portion of the "
"network will consider the attacker's clique to be the good version of the"
" chain, while some other portion will have finalized block `b`. This "
"results in a network partion, where two or more portion of the network do"
" not agree on the state of the ledger."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:126
#: bc6f4e96de0f421781a942b77b3522cf
msgid "Security level"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:127
#: 0be24983fcf5491b9864b2db0dae20f6
msgid ""
"The factors that influence the success probability of a finality fork "
"attack are the number of endorsments per block `E`, the portion of the "
"total stake controlled by the attacker `beta` and a finality parameter "
"`F`. The finality parameter `F` respresents a number of descendant a "
"block must have, before being finalized. The portion of the stake `beta` "
"is positively correlated with the success probability of an attack, while"
" `F` and `E` are inversly correlated. We do not have control over `beta`,"
" thus we define our security level as a portion `beta` and a maximum "
"success probability of an attack. We chose `beta = 1/3` because it is the"
" maximum proportion of Byzantine participants BFT based consensus "
"protocols assume. We chose `p_success <= 1e-11` because it corresponds to"
" a period of time of around 10 000 years (given one block every 0.5s). We"
" must chose the minimal parameters `F` and `E` that match this security "
"level."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:135
#: c0196d6b34c744639203b984352f3bcf
msgid "Simulation results"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:136
#: eb2ab7a700c542a08497b613c4778c53
msgid ""
"Our simulations results show that with `F = 64`, `E = 16` and given 32 "
"thread and a portion `beta = 1/3` of the stake controlled by the "
"attacker, the probability of success of an attack is in the order of "
"`1e-11`. You can find more details in the [technical "
"paper](https://arxiv.org/abs/1803.09029)."
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:142
#: f66130edf7da4929bad52727e32db40e
msgid "Future features"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:144
#: cf7d2b23f6ab44d4a9b111b8a9d212ec
msgid ""
"There is still optimizations that we can perform on the endorsements and "
"their workflow :"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:146
#: 52e77468bfa0437abdb65b98f0925dd9
msgid ""
"Add more verifications when receiving an endorsement from an other node "
"of the network to avoid storing/propagating invalid endorsements. `Issue "
"<https://github.com/massalabs/massa/issues/3020>`__"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:147
#: 462a2758bc07409f9711599919d55c7a
msgid ""
"Use stored endorsements to choose the best parents. `Issue "
"<https://github.com/massalabs/massa/issues/2976>`__"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:148
#: 660b6194a2e749b8881b1b935b7b9e1f
msgid ""
"Split blocks and endorsements productions to an other binary so that they"
" can be run on different machines and be more customized. `Discussion "
"<https://github.com/massalabs/massa/discussions/2895>`__"
msgstr ""

#: ../../general-doc/architecture/endorsements.rst:149
#: 41c52f16af1b45f79e34458dd166f0ca
msgid ""
"To punish network and CPU overload attacks, a denunciations system will "
"be implemented to point out the stakers that produces two different "
"endorsements for the same `(slot, index)`. `Issue "
"<https://github.com/massalabs/massa/issues/3022>`__"
msgstr ""

