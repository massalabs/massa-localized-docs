# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-06 09:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../general-doc/architecture/archi-global.rst:2
#: 9370d85f5e744f8e9196c0fe44b0694c
msgid "Architecture"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:4
#: d5c7c2a301374f05b9db0878a776f656
msgid ""
"This is the diagram of the architecture of the software modules involved "
"in building, endorsing and propagating blocks. The bottom part "
"corresponds to a single process running in a node and is in charge of the"
" execution and consensus building. The pool and factories, referred to as"
" \"factory\", can be potentially running in a different process or be "
"part of the node. Overall, each of the modules described here runs inside"
" one or more threads attached to their respective executable process (NB:"
" the factory/node separation is not yet implemented, but will be soon)."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:12
#: 1b88de39382b4becb4b29f360b3b9d36
msgid ""
"We will explain below the different modules present in this diagram, and "
"simulate the production of an operation to show how it navigates through "
"the different modules to better understand how blocks are produced and "
"propagated."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:16
#: bcdd3e8250ee4d9e8196679d36ab8366
msgid "Bootstrap Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:18
#: bf8c0bc7324945b6b620093ea4a4b6b1
msgid ""
"The bootstrap module is responsible for the initial synchronization of "
"the node with the rest of the network. It is responsible for downloading "
"the list of peers, the current graph of blocks, the ledger, the "
"asyncronous pool, state of the Proof-of-Stake and latests executed "
"operations."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:22
#: 8951a31a07c24b639acafe5a8206bf77
msgid ""
"The bootstrap will be done from a server that is listed on the "
"configuration of the node. Bootstrap is the entry point of the network so"
" you have to be careful on which node you connect to avoid downloading "
"malicious data."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:26
#: a8fd772f28c246ba9177841bdb95e868
msgid "API Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:28
#: 8a564b1dda8648d5aec611ee1a9227ae
msgid ""
"The API Module is the public window of the node to the rest of the world."
" It allows for interactions with external clients or factories via a JSON"
" RPC protocol."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:31
#: e59f1316510d48a9aa63530eb5b961ec
msgid "The API includes interfaces to do the following:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:33
#: 42c8c0f95d9f4243829a1ccc8914af0d
msgid "publish a new operation from a client"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:34
#: f3785588f66d426eabb8b38df9c9a051
msgid "query the network about balances or ledger status"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:35
#: a9b29061d6434341b72790cc61654c95
msgid ""
"allow for synchronization between remote pool/factory nodes and the "
"consensus nodes, by sending/asking for blocks, best parents, draws, etc."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:39
#: 9c1da3f5af894fdc875ef46b30cf968a
msgid "Protocol/Network Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:41
#: d714a4305da14eff8004912cc7469b90
msgid ""
"The Protocol/Network Module implements the protocol connecting consensus "
"nodes. This protocol is supported by a binary and optimized transport "
"layer and does not use JSON RPC."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:44
#: 077f16ad1c4b44f3b9fdf28068ce5d36
msgid ""
"The Protocol/Network Module will relay all operations/blocks creation and"
" propagation, so that all other nodes in the network can synchronize "
"their internal state, following a type of gossip synchronization "
"protocol."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:47
#: 2e0e52bd51714af09fa08094837b9203
msgid ""
"The type of messages that can be relayed via the Protocol/Network Module "
"include:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:49
#: 26e7cc07fa5e4158a78d69310c51711a
msgid ""
"blocks/operations/endorsements propagation (either getting in or out of "
"the node)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:50
#: e3985adad3544b0985bfe0dc9f0c0b2e
msgid "nodes ban requests"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:51
#: e42d973767ca47ecb70c1db7fb4b3b7c
msgid "connectivity infos/stats"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:54
#: 30c2829dad9a45489905b26a0711b80d
msgid "Selector Module, Proof of Stake sybil resistance"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:56
#: c6744e7905d64429b50e2679c7f7fda2
msgid ""
"Every 0.5s, a new slot becomes active to receive a new block. A "
"determinist selection mechanism ensures that one of the nodes in the "
"network is elected to have the responsibility to build the block for that"
" slot. This mechanism must have several key properties:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:60
#: 1f3c88140eef4eb6a1d15e5225f5820f
msgid ""
"it should be sybil resistant, so that it is not possible to increase "
"one's odds of being elected by creating multiple clones of oneself "
"(sybil) without a cost that is equal or greater than the cost of "
"increasing one's odds for oneself only"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:63
#: e23781f2f9d64afdabe18ef97bc23f8d
msgid ""
"it should be deterministic, so that all nodes in the network will agree "
"on the result of the selection at any given time"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:65
#: d81ac593b717432593f25c0cea92f0c7
msgid ""
"it should be fair, so that each participant has a well-defined "
"probability of being selected somehow proportional to the cost of "
"participating, and draws converge towards this probability distribution "
"over time"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:68
#: d8d934e0a4114a45b74050dc98f689bd
msgid ""
"The way sybil resistance is achieved here is via the proof of stake "
"mechanism. Nodes who want to participate in the block creation lottery "
"will have to stake \"rolls\" that they buy with Massa coins. If they try "
"to cheat by creating fake blocks or multiple blocks on the same slot, "
"their stake will be taken away from them (slashing) and they would suffer"
" the loss. The probabilistic \"surface\" of a participant is equal to its"
" total stake, which makes the creation of sybil accounts useless because "
"the stake would have to be split between them anyway."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:75
#: 8aa7fc57e25c4095882c27b5ee01fe0d
msgid ""
"The method used to draw an elected node for a given slot is simply a "
"random draw from a distribution where addresses are weighted by the "
"amount of stake (=rolls) they hold. The schema below illustrates how the "
"seed and probability distribution are built, based on past cycles (two "
"cycles are needed for the distribution update to ensure that the balance "
"finalization has occurred and the amount of rolls is accurate):"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:83
#: b845a4433c3d48cb8e4ab6631aa2b6bd
msgid ""
"The Selector Module is in charge of computing the formula and replying to"
" requests regarding what node is elected for any given slot in the "
"present or the past. The Execution Module (see below) is in charge of "
"feeding the Selector Module with updates regarding balances, needed to "
"compute the draws."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:89
#: d7f22c46580d4d44be8f35b4a9aa2417
msgid "Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:91
#: bd720058aa82491c9c5265d47e5b6d37
msgid ""
"The Consensus Module is the heart of the machinery of the Massa Network. "
"It is in charge of integrating proposed blocks into their respective "
"slots and verifying the integrity of the result. We have not yet talked "
"about the various constraints regarding block creation, and in particular"
" how parents are to be selected. In traditional blockchains, the parent "
"of a block is simply the previous valid block in the chain. In the "
"context of the Massa network and the parallel chains in the 32 threads, "
"identifying the proper parent in a given thread requires a more "
"sophisticated strategy involving the notion of block cliques."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:101
#: 6437ad95b68242d18182b57f4fbd3efe
msgid "Block cliques"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:103
#: 143591a412cf42009b1fb74bda24d964
msgid ""
"At any given time, the set of all the blocks that have been produced and "
"propagated in the network constitutes a graph (more precisely a Directed "
"Acyclic Graph or \"DAG\"), where each block, except the genesis blocks, "
"has 32 parents. All the reasoning below can be in principle done on this "
"increasingly vast set, but in practice, we will introduce a notion of "
"\"finalized\" or \"staled\" blocks, that can be removed from the set and "
"that will allow us to work on a smaller subset of recent blocks that are "
"neither finalized nor staled, so \"pending\" blocks. This set of pending "
"blocks is all the network needs to know in order to incrementally build "
"up a consensus, therefore non-pending blocks will simply be forgotten "
"(this is a striking difference with most other blockchains that store in "
"each node the history of all past transactions). The main benefit of this"
" block pruning is to allow for some of the algorithms below, which are in"
" general NP-complete, to run fast enough on a smaller subgraph, and to "
"allow for a practical implementation."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:115
#: deabf17aa76c425c925edb126484fdb8
msgid ""
"Here is a simplified example of a graph of pending blocks over two "
"threads, with blocks 3 and 4 competing for slot C1 (for example as a "
"result of a multistaking attack where the block producer decided to "
"create competing blocks for the same slot). Here the letter of a slot "
"identifies it, while the number refers to its thread number:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:122
#: 3055b6eb57b44a0382e39ecca2ff2121
msgid ""
"In this illustration we have shown only relevant parent links in blue, to"
" make the whole diagram more readable, but in reality, each block has 32 "
"parents, one in each of the 32 threads."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:125
#: e16d22e0ef5047e08e579d8d0e29376a
msgid ""
"An important notion we will use in the following is that of "
"incompatibility between blocks. Excluding some edge cases with genesis "
"blocks, there are two sources of incompatibilities defined for blocks:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:128
#: 7ba32748fdc04d32a8a08691820054f0
msgid ""
"**thread incompatibility**: this occurs when two blocks in a given thread"
" have the same parent in that thread."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:129
#: 3ee09b93f3a0475195f8065e04ae2a1a
msgid ""
"**grandpa incompatibility**: this corresponds to a case with two blocks "
"B1 and B2 in threads t1 and t2, and where the block B1 in t1 has a parent"
" in t2 who is an ancestor of B2's parent in t2, and symmetrically B2's "
"parent in t1 is an ancestor of B1's parent in t1."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:133
#: 5e398f4f34664b5f89fea0bd231485a0
msgid ""
"You will find a more formal mathematical definition of these "
"incompatibility notions in the `whitepaper "
"<https://arxiv.org/pdf/1803.09029.pdf>`_."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:136
#: 560dce10064f416b98a90c364c1b5a08
msgid ""
"From these definitions, you can build another graph, called the "
"incompatibility graph, which connects any two blocks that have any form "
"of incompatibility together:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:141
#: 01034eaeb0b94ee7a2233b34c2325fa6
msgid ""
"As you can see, some blocks are isolated and therefore compatible with "
"any other, while some are linked, because they have a form of "
"incompatibility."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:144
#: 793818b128d0436d9182dff7df0b099a
msgid ""
"This brings us to the notion of a maximal clique which is a subset of the"
" incompatibility graph such as none of the block members are incompatible"
" with each other (so, no internal link withing the clique), and it is "
"impossible to add an extra block to the set without introducing "
"incompatibilities. In the above example, there are three maximal cliques "
"that can be built, as illustrated below:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:151
#: c8a5251d39b446bbbef1bbc5c50c9213
msgid ""
"They represent candidates to extend the set of already finalized blocks "
"into a coherent set of new blocks. All we need to add to be able to build"
" a consensus rule now is to introduce a deterministic metric to rank "
"those candidates so that nodes can independently and consistently decide "
"on which clique is the best candidate and keep building on top of it. In "
"particular, once the best maximal clique is identified, it becomes "
"trivial to define the list of the parents for a new block simply by "
"picking the oldest block from that clique in each thread."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:158
#: 79c4fd15d6054c3aaa69ff40b62e1879
msgid ""
"The metric used in a traditional blockchain to rank competing chain "
"candidates is habitually the length of the chain, or more precisely the "
"total amount of work invested in the chain (also known as \"Nakamoto "
"consensus\"). In the case of block cliques, we will introduce a notion of"
" fitness for each block, and the fitness of the clique will simply be the"
" sum of all its block's fitness. The block fitness :math:`f(b)` is simply"
" defined as :math:`1+e`, :math:`e` being the number of endorsements "
"registered in the block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:165
#: 28d7d02191424f32b62b18ee733f3b08
msgid ""
"Taking the maximal clique with the highest fitness (or some hash-based "
"deterministic selection in case of equality), the Graph/Consensus module "
"can define what is called the **blockclique** at the current time."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:169
#: 0e639bf7a18d4ad1ad575e9605c1ded5
msgid "Finalized blocks, stale blocks"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:171
#: 809d094c51d44c729d433d826093c2e9
msgid ""
"The set of pending blocks is growing each time a new block is produced "
"and added to the current set. As we mentioned previously, there is also a"
" pruning mechanism in charge of reducing the size of the graph by "
"removing blocks that are considered final, and also blocks that can be "
"considered stale and will never finalize."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:175
#: 2118f800cbb14a7787f587bf15a11b29
msgid ""
"If a block is only contained inside cliques that have a fitness lower "
"than the fitness of the blockclique (the clique with the maximal "
"fitness), minus a constant :math:`\\Delta_f^0`, then this block is "
"considered stale. Also, any new block that includes in its parents a "
"stale block is stale."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:179
#: eacdaa158a134326ab4701963eb301f7
msgid ""
"A block is considered final if it is part of all maximal cliques, and "
"included in at least one clique where the total sum of the fitness of all"
" its descendants is greater than :math:`\\Delta_f^0`."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:182
#: e1f7c239b5d2404889342a44b2999954
msgid ""
":math:`\\Delta_f^0` is defined as a constant :math:`F` multiplied by "
":math:`1+E` (:math:`E` being the total max number of endorsements in a "
"block, currently 16), and :math:`F` effectively measuring the maximum "
"span in fully endorsed blocks of a successful blockclique, or the number "
"of fully endorsed blocks by which an alternative clique can be shorter "
"than the blockclique before its blocks may be discarded as stale."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:189
#: c9a28afe9c52488485743e9db3ce1e21
msgid "Graph/Consensus Module Function"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:191
#: 2cd258a482194798af386443ebd4212d
msgid ""
"The Consensus Module (formerly known as the Graph) receives new block "
"proposals, integrates them into the set of pending blocks, updating the "
"blockclique with the method explained above, and verifying the legitimacy"
" of the parenting of new blocks. It also informs other modules, like the "
"Execution module, when blocks are finalized and the corresponding ledger "
"modifications implied by their operations list should be made permanent."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:197
#: 2e2e4f04e17849be8418cf2b460caa4d
msgid ""
"It is also able to answer queries about the current best parents for a "
"new block (based on the current blockclique) or the list of current "
"maximal cliques."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:201
#: ddf369a9aabc48e4ad95f78c1a4b9c5d
msgid "Execution Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:203
#: 82e027f807bd43ed87a1cfdb430a337a
msgid ""
"The Execution Module is in charge of effectively executing the operations"
" contained in blocks within the current blockclique, which is provided by"
" the Graph/Consensus Module. Operations will typically modify the ledger,"
" either by changing the balances of accounts or by modifying the "
"datastore of smart contracts after the execution of some code. From an "
"implementation point of view, ledger modifications are however stored as "
"diff vs the current finalized ledger, until the corresponding blocks are "
"marked as finalized by the Graph/Consensus Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:209
#: def6a250c5d0413f8c5ec1fb111b663b
msgid ""
"Block creators will typically need to query the Execution Module to check"
" current balances at a given slot and verify if some operations can be "
"run with sufficient funds or not, before being integrated into a new "
"block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:212
#: d3757c64b9d94c26925578417b01a76f
msgid ""
"As a side note, it is also possible that blocks might include invalid "
"operations, in which case the Execution Module will simply ignore them."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:215
#: 7c2b705c19b34c13b43d64859a0ef981
msgid ""
"Being the maintainer of the ledger, the Execution Module is also queried "
"about address information in general, via the API, for any Module that "
"needs it."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:218
#: e606c76846364ec19215b55d78b12281
msgid ""
"Finally, the Execution Module will inform the Selector Module when new "
"cycles are initiated as the finalization of blocks progresses."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:222
#: 4e3933888ab84136bc92bc6e73f47dc4
msgid "Pool Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:224
#: 23430a1f0b694fc286bead649ef516e4
msgid ""
"When new pending operations reach a node, they are not immediately "
"processed but instead are stored in a pool of pending operations, to be "
"used by the Factory Module. Similarly, proposed endorsements coming from "
"the Endorsement Factory are buffered inside the pool, to be integrated "
"into new blocks by the Block Factory Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:229
#: 6066a15ce90742a2b115e12e828baa9e
msgid ""
"The origin of pending operations or endorsements inside the pool can be "
"internal to the factory process or could come from remote nodes via the "
"API Module. Similarly, locally produced pending endorsements are "
"broadcasted via a gossip protocol to other pools via the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:234
#: 19ee8b45204c44d391eb0bd57e620940
msgid ""
"Note that operations stored in the Pool are naturally discarded after a "
"certain time, since operations come with an expiration date in the "
"`expiration_period` field. Still, some potential attacks can occur by "
"trying to flood the pool with high fees operations that have no chance of"
" being executed because the corresponding account does not have the "
"required funds. Discussing about countermeasure for this is beyond the "
"scope of this introduction."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:241
#: e0571773bfb74409a410838fe2c27c9f
msgid "Block/Endorsement Factory Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:243
#: 31f8f83b91bc43af90c38ea3b908014b
msgid ""
"The Block Factory Module is in charge of creating new blocks when the "
"corresponding node address has been designated to be the block creator "
"for a given slot. This information is provided to the Factory Module from"
" the Selector Module via the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:247
#: c359fd4d1cb546a4a22d5c84bf3f2691
msgid ""
"The Block Factory Module also needs information about the best parents "
"(made of the latest blocks in each thread in the blockclique) from the "
"Graph/Consensus Module. These parents will be included in the newly "
"created block. Balance information, in order to assess the validity of "
"pending operations, is obtained from the Execution Module, which "
"maintains the ledger state from the point of view of the slot where the "
"new block is supposed to be created."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:253
#: f0414f905a62401889236ec61f04a939
msgid ""
"The Block Factory Module picks pending operations from the Pool Module. "
"Note that the Block Factory will regularly query the Execution Module "
"about finalized and executed operations, and internally cleanup "
"operations that have been handled."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:257
#: cbd1a4025fe542e89656d9ab79b16f81
msgid ""
"Finally, the Block Factory will query the Pool Module and pick pending "
"endorsements corresponding to the best parents that are selected for the "
"block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:260
#: 757dbe50ab9b4ba797a287f5af0e67ea
msgid ""
"With this information, it is able to forge a new block that will then be "
"propagated to the Graph/Consensus Module via the API Module, as well as "
"to other nodes via gossip, to maintain a global synchronized state."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:263
#: f39fee98104f4e2285b6f59126322dd6
msgid ""
"The Endorsement Factory Module works in a similar manner, requesting the "
"Selector Module to find out when it has been designated to be an "
"endorsement producer, then feeding new endorsements to the Pool Module "
"and the API Module for global synchronization."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:268
#: 9161a745ff3244adaf575ad2a18071e9
msgid "Operation lifecycle"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:270
#: 397e9c17f03148fb82286f0b6fc58ec0
msgid ""
"We have now all the elements and vocabulary in place to explore the "
"lifecycle of an operation within the network, from creation to permanent "
"execution in a finalized block."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:273
#: fea7b341b3ac450fbc541d94ce08614a
msgid ""
"Operations originate externally from a client that is forging the "
"operation, for example: a transaction or a smart contract code execution."
" The client will have to know the IP address of a Massa Node (this can be"
" either because it is a node itself and will simply use localhost, or via"
" some maintained list of known nodes and/or some browser plugin), and "
"will then send the operation to the API Module."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:279
#: 89688541ba82458c984dca91020b3797
msgid ""
"When an operation is made available in a given node, it will be "
"broadcasted to all other nodes via the Protocol/Network Module and to "
"factories via the API Module, so that it will eventually end up in all "
"the Pool Modules of the network."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:283
#: 2173e2c01cae45c987465988b7898ad0
msgid ""
"Let's assume we just got a code execution operation from an external "
"client. Let's suppose the client knows a particular node, which is "
"running its block factory on the same machine, and sends the operation to"
" this node. These are the different steps of the operation processing "
"that will occur, as illustrated in the schema below:"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:287
#: 4f99159a866c482c8ffbb059bbe6d123
msgid ""
"The operation enters the node via the API Module (the operation path is "
"marked in blue)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:288
#: 410e1ce16fc048209ed8e939dff0c606
msgid ""
"The API Module forwards the operation to the Pool Module and broadcasts "
"it to other nodes via the Protocol/Network Module. Other nodes hearing "
"about it will also broadcast it (gossip protocol), and feed it to their "
"Pool Module, unless they are pure consensus nodes without factories"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:291
#: 532b112036d543b5b85a3655a0196531
msgid "At that stage, the operation sits in the Pool Modules of most nodes"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:292
#: 2f9bec09ccdf44dba948de6ab8ce884b
msgid ""
"The Selector Module elects a particular node to handle the block "
"production of the next current slot"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:293
#: b6e8ce82f70c4086b34f337a78d29c4b
msgid ""
"The elected node Block Factory finds out about its election by querying a"
" Selector Module (via the API Module)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:294
#: 47bf0ba584f5436993f4fac7bfa25fee
msgid ""
"It starts building a block by picking up pending operations in the Pool "
"Module. The original operation is eventually picked and integrated into "
"the block. We will now follow the block around (the block path is marked "
"in green)"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:297
#: 463d8a322fdd4709aae3a59971db0f32
msgid ""
"The newly produced block is sent via the API to remote or local nodes, to"
" reach the Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:298
#: 4084045f7ab047e3ad99a319dee49739
msgid ""
"The new block is processed by the Graph/Consensus Module to be included "
"into the pending blocks DAG and potentially integrated into a new "
"blockclique"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:300
#: 83ee36559a25462593fc9e7ee2470b50
msgid ""
"The Graph/Consensus Module sends the new block to other nodes via the "
"Protocol/Network Module, to ensure synchronization of the information in "
"the network. The new block reaching other nodes is similarly going to be "
"integrated into their Graph/Consensus Module"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:303
#: 28c958cf0754472e9025db627defa9be
msgid ""
"In general, the blockclique will be extended with the new block and so "
"will reach the Execution Module from the Graph/Consensus Module via the "
"notification of a new blockclique. Eventually, it will also be notified "
"as a final block if it gets finalized."
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:306
#: 8d8dbfdad6254054b8014d1ab7a8479b
msgid ""
"The Execution Module will run the blocks that are part of the updated "
"blockclique, so the original block will eventually be executed. Within "
"the block is the original operation that was originally sent and that "
"will then be applied to the ledger for potential modifications. At this "
"stage, the modifications are not permanent and simply stored in a diff "
"compared to the finalized ledger"
msgstr ""

#: ../../general-doc/architecture/archi-global.rst:310
#: d38786c1e96c42eda25a771f1784768f
msgid ""
"Eventually, the block will be marked as final and the ledger "
"modification, including the operation changes, will become final in the "
"finalized ledger."
msgstr ""

#~ msgid ""
#~ "In general, the blockclique will be "
#~ "extended with the new block and so"
#~ " will reach the Execution Module from"
#~ " the Graph/Consensus Module via the "
#~ "notification of a new blockclique. "
#~ "Eventually, it will also be notified "
#~ "as a final block if it gets "
#~ "finalized"
#~ msgstr ""

