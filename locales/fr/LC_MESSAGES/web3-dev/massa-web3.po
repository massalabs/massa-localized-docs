# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-17 00:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/massa-web3.rst:7 1ab5aeceac4043e88de333bcd1d5eb0b
msgid "Massa web3"
msgstr ""

#: ../../web3-dev/massa-web3.rst:9 ab3882c8a56b4a49921e8faab92c637a
msgid ""
"`massa-web3 <https://github.com/massalabs/massa-web3>`_ is a TypeScript "
"library that allow you to interact with the Massa blockchain through a "
"local or remote Massa node. In particular the massa-web3 library will "
"allow you to call the :ref:`JSON-RPC API <technical-api>`, but also to "
"fetch and poll events from smart contracts on the Massa blockchain, "
"deploy smart contracts and much more. Documentation for the massa-web3 "
"library is available on the `Github repository "
"<https://github.com/massalabs/massa-web3>`_. The library is published on "
"npmjs under `@massalabs/massa-web3 "
"<https://www.npmjs.com/package/@massalabs/massa-web3>`_"
msgstr ""

#: ../../web3-dev/massa-web3.rst:19 06be71fdcbfb40ae9aeef4264bddc0e1
msgid ""
"`create-react-app-massa <https://github.com/massalabs/create-react-app-"
"massa>`_ is a minimal React template made for our massa-web3 library."
msgstr ""

#: ../../web3-dev/massa-web3.rst:22 53f3af631fef472cbae34d87b953e1e0
msgid ""
"You'll find examples of frontends using the `massa-web3` library in the "
"`massa-sc-examples <https://github.com/massalabs/massa-sc-examples>`_ "
"repository:"
msgstr ""

#: ../../web3-dev/massa-web3.rst:25 cec283f737644d0496acf6473e6ff01c
msgid ""
"`blog <https://github.com/massalabs/massa-sc-examples/tree/main/blog>`_ "
"is an example of a decentralized blog platform."
msgstr ""

#: ../../web3-dev/massa-web3.rst:27 18d2d0100e154160bd8c726206b0b639
msgid ""
"`age <https://github.com/massalabs/massa-sc-examples/tree/main/age>`_ "
"contains a basic example of a SC with a front in plain JS and ReactJS."
msgstr ""

#~ msgid ""
#~ "Use the private key that the "
#~ "node-client gave you when calling "
#~ "`wallet_generate_secret_key`. This wallet also "
#~ "needs to have some Massa coins, so"
#~ " it must appear in `massa-"
#~ "node/base_config/initial_ledger.json` before running "
#~ "the node with `cd massa-node &&"
#~ " cargo run --features sandbox` in "
#~ "`massa <https://github.com/massalabs/massa>`_ directory."
#~ msgstr ""

#~ msgid ""
#~ "having `Thyra <https://github.com/massalabs/thyra/>`_ "
#~ "installed and running on your computer"
#~ msgstr ""

#~ msgid ""
#~ "Create a new wallet in `Thyra "
#~ "<http://my.massa/thyra/wallet/index.html>`_."
#~ msgstr ""

#~ msgid "Building Decentralized Application"
#~ msgstr ""

#~ msgid ""
#~ "For the decentralized website part, "
#~ "we'll assume that you have some "
#~ "familiarity with HTML and JavaScript. If"
#~ " you want to have more details, "
#~ "you can follow `this great tutorial "
#~ "from React <https://reactjs.org/tutorial/tutorial.html>`_"
#~ " from which the dApp is inspired "
#~ "from."
#~ msgstr ""

#~ msgid ""
#~ "Here you can find an example dApp"
#~ " for the :ref:`sum smart-contract "
#~ "<sc-example-sum>`: `Massa DApp example: "
#~ "Sum <https://github.com/massalabs/massa-sc-"
#~ "examples/tree/main/sum/frontend>`_."
#~ msgstr ""

#~ msgid "Prerequisites:"
#~ msgstr ""

#~ msgid ""
#~ "having `Thyra <https://github.com/massalabs/thyra/>`__ "
#~ "installed and running on your computer"
#~ msgstr ""

#~ msgid "having a wallet in Thyra"
#~ msgstr ""

#~ msgid "the wallet needs to own some Massa coins"
#~ msgstr ""

#~ msgid "having a smart contract :ref:`deployed <sending-sc-sum>`"
#~ msgstr ""

#~ msgid ""
#~ "**Network**: as any blockchain is a "
#~ "network of nodes, there could be "
#~ "practically several networks of different "
#~ "nodes. The main Massa network is "
#~ "called the MainNet. There is also "
#~ "a TestNet which is ran by Massa"
#~ " Labs team, where you can build "
#~ "applications without paying real Massa "
#~ "coins. You can also run your own"
#~ " network, with only one node (see "
#~ ":ref:`local-network-generation`)."
#~ msgstr ""

#~ msgid ""
#~ "A decentralized application is an "
#~ "application running on a blockchain. "
#~ "Even the frontend can be hosted on"
#~ " the blockchain with :ref:`web-on-"
#~ "chain <web3-decentralized-web>`."
#~ msgstr ""

#~ msgid "To build such application you will need to use some libraries:"
#~ msgstr ""

#~ msgid "`massa toolkit <https://github.com/massalabs/massa-sc-toolkit/>`_"
#~ msgstr ""

#~ msgid ""
#~ "`massa assemblyscript sdk "
#~ "<https://github.com/massalabs/massa-as-sdk/>`_"
#~ msgstr ""

#~ msgid "`massa javascript web3 <https://github.com/massalabs/massa-web3/>`_"
#~ msgstr ""

#~ msgid ""
#~ "Then you will be able to build "
#~ "a frontend application that communicates "
#~ "with Thyra's API to sign transactions"
#~ " and submit it to the blockchain."
#~ msgstr ""

#~ msgid "Then, use Thyra to deploy your frontend application."
#~ msgstr ""

#~ msgid "Debugging"
#~ msgstr ""

#~ msgid ""
#~ "This section will give you some "
#~ "tips on how to debug your dapp "
#~ "while building it."
#~ msgstr ""

#~ msgid "Work in a local development environment"
#~ msgstr ""

#~ msgid "Run :ref:`a local node <local-network-generation>`."
#~ msgstr ""

#~ msgid "Start Thyra and bind it to your local node:"
#~ msgstr ""

#~ msgid ""
#~ "Create a new wallet in `Thyra "
#~ "<http://my.massa/thyra/wallet/index.html>`__."
#~ msgstr ""

#~ msgid "Modify the file `massa-node/base_config/initial_ledger.json`:"
#~ msgstr ""

#~ msgid "to add some Massa tokens to your newly created address."
#~ msgstr ""

#~ msgid "In your smart-contract projects, use this `.env` file:"
#~ msgstr ""

#~ msgid ""
#~ "Use the secret key that the "
#~ "node-client gave you when calling "
#~ "`wallet_generate_secret_key`. This wallet also "
#~ "needs to have some Massa coins, so"
#~ " it must appear in `massa-"
#~ "node/base_config/initial_ledger.json` before running "
#~ "the node with `cd massa-node &&"
#~ " cargo run --features sandbox` in "
#~ "`massa <https://github.com/massalabs/massa>`_ directory."
#~ msgstr ""

#~ msgid ""
#~ "Modify the file `massa/massa-"
#~ "client/base_config/config.toml` to the localhost "
#~ "RPC:"
#~ msgstr ""

#~ msgid ""
#~ "Start a client with the command "
#~ "`cargo run` in `massa/massa-client` "
#~ "directory."
#~ msgstr ""

#~ msgid ""
#~ "You might want to sign transactions "
#~ "to call smart contracts in your "
#~ "frontend application:"
#~ msgstr ""

#~ msgid ""
#~ "This performs an HTTP POST call to"
#~ " Thyra, asking to create a "
#~ "transaction that will call the function"
#~ " named `hello` of the smart contract"
#~ " located at "
#~ "`A1nyzu9rJKnf2zz8F7mkM5d6ZoThnMuAtUdij9WmcwXWMWJFmEB` with "
#~ "the wallet name `wallet`."
#~ msgstr ""

#~ msgid ""
#~ "This opens a password prompt and "
#~ "you will be able to see the "
#~ "response of the call in the "
#~ "development tools of the browser. The"
#~ " response is the operation id, for"
#~ " example "
#~ "`2mLLkdKB4BY4hJQFNwGZ5oQVhky13EVZAwHJXCGQnd3FRHUoHw`."
#~ msgstr ""

#~ msgid "If the operation failed, the response will contain the details."
#~ msgstr ""

#~ msgid ""
#~ "Now you can now use commands of"
#~ " the node client to see the "
#~ "details of your operation:"
#~ msgstr ""

#~ msgid "This will output something like"
#~ msgstr ""

#~ msgid ""
#~ "`target parameter` is empty because "
#~ "parameters are encoded into bytes so "
#~ "it is unlikely to have printable "
#~ "characters."
#~ msgstr ""

#~ msgid ""
#~ "You can also see events emitted by"
#~ " your contract (assuming that your "
#~ "contract is deployed at "
#~ "`A1nyzu9rJKnf2zz8F7mkM5d6ZoThnMuAtUdij9WmcwXWMWJFmEB`):"
#~ msgstr ""

#~ msgid "In this example the event message is `Sum (2, 3) = 5`."
#~ msgstr ""

