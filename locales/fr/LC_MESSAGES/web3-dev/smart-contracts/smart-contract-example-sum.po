# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-05 11:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: 74b2550ed76b4937b1585ea191a38b64
msgid "Massa's smart-contract examples"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: 01447c21674a42f0a266e6b2e5066cd9
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 1d1dfd4cb98b493787098394fb7849c9
msgid ""
"In this tutorial, we will go through all the steps required to create a "
"smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: e9a443c8c5254badaaafce4cdb1fd82c
msgid ""
"You can find the complete project on this `Github repository "
"<https://github.com/massalabs/massa-sc-"
"examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:15
#: 2ad50ec9d4cd4e2993fd7c93f00b4d85
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:17
#: 56a6bc7bbf4f4ffe8b74e00e6725de2c
msgid ""
"Smart contracts are written in `Assembly Script "
"<https://www.assemblyscript.org/>`_, and so we’ll assume that you have "
"some familiarity with it, but you should be able to follow along even if "
"you’re coming from a different programming language. We’ll also assume "
"that you’re familiar with programming concepts like functions, objects, "
"arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:24
#: be075c59480743b3ae997b309fb487d8
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:26
#: bc3078a166e949cc90d881b1f2ee343d
msgid ""
"Smart contracts on Massa blockchain are written in `Assembly Script "
"<https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly "
"<https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is "
"efficient and can be compiled from several languages, including Assembly "
"Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:31
#: 8f074f8806154e6e8fc73c083fa721f1
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:32
#: 383fd10bc1ec4eb29938fc21f7f1bff0
msgid ""
"Let's start by cloning the sum example repository. You need `node`, `npm`"
" and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:42
#: e78b9d393b9b42839d756eaa3807c24e
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:44
#: 42fb46c639594e48922690fe1857049e
msgid ""
"Smart contracts are in the `assembly` directory. The `main.ts` will be "
"our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:47
#: 7d49cf5196d645d6a4734931af89d43b
msgid ""
"For this tutorial, we will create a very simple smart contract which "
"calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:49
#: 7a8976bbf53a4b0d8884ecc94ce61fc4
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:70
#: 5f4fd2298e8247b989d715a758dd51ff
msgid ""
"Calling function of a smart contract that is stored in the blockchain "
"with some arguments will start an assemblyscript runtime (wasmer). This "
"is why each function that you want to be able to call in your smart "
"contract must be exported with the `export` keyword and must take one "
"`StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:74
#: 2d1dbb5f7f344248b591f113c2c7bad6
msgid ""
"Here, we are exporting the sum function. In this function, we deserialize"
" the argument into two integers, with the help of `fromByteString` and "
"`toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:78
#: 7d770c922f3d4c8887902c5a4ac24183
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:80
#: 7b74eacd8f8f470a9f04b75405207083
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:86
#: ce848c9de03b46a8b30d8d3d7e57cef4
msgid ""
"Note that a `build/deployer.wasm` file has also been generated. It will "
"be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:91
#: 2aff3cdd559241bf84e715ba93220876
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:93
#: a8826f21a7724319b72583986b38dc71
msgid ""
"We'll now turn to the process of putting the smart contract on the Massa "
"blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:95
#: 57d4c30633b64e3789a3fe5dbd90ecc6
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:97
#: 487b4346ed9c4eea8bcba63bf92801d3
msgid ""
"To send transaction on the network, you need to provide your wallet "
"secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:104
#: 315eeb49e08e4a05b0c8486d9777a504
msgid ""
"This command will create a `.env` file. Now fill it with your wallet's "
"secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:107
#: ecd7809e91124d0783783b78e08bf345
msgid ""
"Contract deployment is done by calling a deployer smart contract which "
"can be found here: `deployer/deployer.as.ts`. It will store our sum smart"
" contract onto the ledger. The deployer contract already includes your "
"compiled `main.ts` contract and has been itself compiled at the `npm run "
"build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:112
#: b4da1296ce8743ca81763774b7b2c867
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:118
#: fb935bf2f9c8497b928f82a8d118ebce
msgid ""
"This command will execute the compiled deployer `deployer.wasm`, and this"
" smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:121
#: 6d55f91aa0614c5ba0eb1a049a9ca801
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:138
#: f995b97475ea40e688a7e52091f0be9a
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:140
#: 9b8c4ebaf35d452bbe78c15692504f58
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:142
#: 28f8a901b2fb4e1996016c16520314b1
msgid ""
"To interact with a smart contract, we can write another smart contract "
"that will be executed, or use the `CallSC` function. In our example, we "
"will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:165
#: b6aa086b3f614dd787fa74093a5519db
msgid ""
"Note that we use the address where the contract has been deployed: "
"A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:167
#: d0873baf541042259d8c5e0359d7a73c
msgid ""
"First we need to compile the `caller.ts` smart contract. For the "
"covenience of this example we have added an npm script `npm run "
"build:caller` which will compile `caller.ts` and write the generated wasm"
" in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:174
#: cdfb1a659eee45aca45982044d00ba29
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:180
#: 1880b403179e42e5bc6f532793b28521
msgid ""
"Remember that our sum smart contract computes the sum and emits an event "
"with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:182
#: df6736418b364ef781c50adf986b2d72
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:198
#: dbf8b41f95d64645839b15060059123d
msgid ""
"You can call the JSON RPC API function `get_filtered_sc_output_event` to "
"get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:219
#: 10396c5905944288a4edb0d98ab7e570
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:221
#: 39eab02da2ad4a2fb74634b5431d2d15
msgid "Here is an example of what you can find:"
msgstr ""

#~ msgid ""
#~ "Calling function of a smart contract "
#~ "that is stored in the blockchain "
#~ "with some arguments will start an "
#~ "assemblyscript runtime (wasmer). This is "
#~ "why each function that you want to"
#~ " be able to call in your smart"
#~ " contract must be exported with the"
#~ " `export` keyword and must take one"
#~ " string argument and return a value"
#~ " of type string."
#~ msgstr ""

#~ msgid ""
#~ "To send transaction on the network, "
#~ "you need to provide your wallet "
#~ "private key. This is done using "
#~ "environment variable in `.env` file."
#~ msgstr ""

#~ msgid ""
#~ "This command will create a `.env` "
#~ "file. Now fill it with your "
#~ "wallet's private key (also called a "
#~ "\"secret key\" by Massa client)."
#~ msgstr ""

