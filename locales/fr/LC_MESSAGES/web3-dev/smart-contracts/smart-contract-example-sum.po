# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-17 00:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:4
#: 27cdc6dc8f27449e8cded88e6f649b6a
msgid "Massa's smart-contract by example"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:8
#: cc5003d3e7fd493ea74b8ba55db78036
msgid "This tutorial doesn't assume any existing knowledge of the Massa protocol."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:10
#: 46321967b74540b4a2c8853c649ca25b
msgid ""
"In this tutorial, we will go through all the steps required to create a "
"smart contract on Massa."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:12
#: 032784acd91c46d086b5bb73235340ca
msgid ""
"You can find the complete project on this `Github repository "
"<https://github.com/massalabs/massa-sc-"
"examples/tree/main/sum/contracts>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:16
#: 29d1dc4a6937476cbd40568544957ea6
msgid "Prerequisites"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:18
#: c7a7993376fd46d9a989df7c78f79b38
msgid ""
"Smart contracts are written in `Assembly Script "
"<https://www.assemblyscript.org/>`_, and so we’ll assume that you have "
"some familiarity with it, but you should be able to follow along even if "
"you’re coming from a different programming language. We’ll also assume "
"that you’re familiar with programming concepts like functions, objects, "
"arrays, and to a lesser extent, classes."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:25
#: 47f9ebbb193f48228c9e30276ddc1fa6
msgid "Writing your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:27
#: 2267f5d575a346b19a75959c3bceb5c7
msgid ""
"Smart contracts on Massa blockchain are written in `Assembly Script "
"<https://www.assemblyscript.org/>`_ and then compiled to `WebAssembly "
"<https://webassembly.org/>`_ (WASM). We chose WebAssembly as it is "
"efficient and can be compiled from several languages, including Assembly "
"Script."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:32
#: c121c28fc3b84b489f718d5440da4832
msgid "Setup"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:33
#: d7aa8f30abfb4c9cb05018b822ea4681
msgid ""
"Let's start by cloning the sum example repository. You need `node`, `npm`"
" and `git` to initialize the project."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:43
#: a97e0a3bcf3b4bcfb69b7bd38c55f2d4
msgid "Writing the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:45
#: 0894824599154929a771ece2bcf38644
msgid ""
"Smart contracts are in the `assembly` directory. The `main.ts` will be "
"our smart-contract file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:48
#: 246a25bcdf87485f864e5883bee9811c
msgid ""
"For this tutorial, we will create a very simple smart contract which "
"calculates the sum of two integers."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:50
#: 5d4f6b894d31466c9ceaeec306456b3c
msgid "You can find it here `assembly/main.ts`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:71
#: 9480df9b17dc49099a363f54b0b08234
msgid ""
"Calling function of a smart contract that is stored in the blockchain "
"with some arguments will start an assemblyscript runtime (wasmer). This "
"is why each function that you want to be able to call in your smart "
"contract must be exported with the `export` keyword and must take one "
"`StaticArray<u8>` argument and return a value of type `StaticArray<u8>`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:77
#: bae450d3f5374bd88098264e2e760911
msgid ""
"Here, we are exporting the sum function. In this function, we deserialize"
" the argument into two integers, with the help of `fromByteString` and "
"`toInt32`."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:82
#: 104a87de958d48c4b806d91913e9a4b5
msgid "Compiling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:84
#: 5e4a5ca06e6c4f0586a90ad4d66be5ea
msgid "Your smart contract can be compiled using the command:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:90
#: c9188dba431d41269ec75f06b8551a14
msgid ""
"Note that a `build/deployer.wasm` file has also been generated. It will "
"be used to deploy your contract on Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:96
#: 34133a7b0489455997f5fe1f8630119c
msgid "Deploy your smart contract on the blockchain"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:98
#: 4e98f6c05bf2427e886c31684bfc971a
msgid ""
"We'll now turn to the process of putting the smart contract on the Massa "
"blockchain."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:100
#: 3edf1483a8ee4738aee069d1bbe1b8a5
msgid "For the deployment, you will need a wallet with some coins."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:102
#: 4fd45585326246a080357127ad5e064b
msgid ""
"To send transaction on the network, you need to provide your wallet "
"secret key. This is done using environment variable in `.env` file."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:109
#: c3e6de5299354b608a6ae9856324df81
msgid ""
"This command will create a `.env` file. Now fill it with your wallet's "
"secret key (also called a \"secret key\" by Massa client)."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:112
#: 83d8fb0f6003481796529ec5c392ff0f
msgid ""
"Contract deployment is done by calling a deployer smart contract which "
"can be found here: `deployer/deployer.as.ts`. It will store our sum smart"
" contract onto the ledger. The deployer contract already includes your "
"compiled `main.ts` contract and has been itself compiled at the `npm run "
"build` step."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:117
#: 48b11d0041c140ac8a50f14f35bef1d3
msgid "We will send the deployer smart contract to the Massa blockchain with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:123
#: aef346e19bde473eac3fae7a550d8bfe
msgid ""
"This command will execute the compiled deployer `deployer.wasm`, and this"
" smart contract will store the `main.ts` smart contract onto the ledger."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:126
#: b7acecfc5c8f4d5b9b63bd4c80174382
msgid "You will see an output like this:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:143
#: dd2994f222f74cde993da0c89765dc57
msgid "Interaction with the smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:145
#: 3ffc3f3a06f74d729dfb71d803bca726
msgid "We will now interact with our sum smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:147
#: e1d424761a834b348ad08aa4fa039c2c
msgid ""
"To interact with a smart contract, we can write another smart contract "
"that will be executed, or use the `CallSC` function. In our example, we "
"will use the file `caller.ts` in the `assembly` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:171
#: 2f8615e675a842988f7479ff4aeed6db
msgid ""
"Note that we use the address where the contract has been deployed: "
"A1PjpgXyXSBeiG1rbXCP4ybhVccYzpysDKYmkymXWd81idutaD9."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:173
#: 5bede18ae5d647aa9573be8f81c9388b
msgid ""
"First we need to compile the `caller.ts` smart contract. For the "
"covenience of this example we have added an npm script `npm run "
"build:caller` which will compile `caller.ts` and write the generated wasm"
" in `build/caller.wasm`"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:181
#: bcce67cdb5074140b37da5b10a7398dd
msgid "Then deploy the caller smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:187
#: a86188661afd47d78bff3825a308b405
msgid ""
"Remember that our sum smart contract computes the sum and emits an event "
"with the result."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:189
#: d96145cc21c54b11830144c141580045
msgid "You will see this output:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:205
#: 2bfe27326d634658a755ffd6a8af7162
msgid ""
"You can call the JSON RPC API function `get_filtered_sc_output_event` to "
"get the event with:"
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:226
#: d6a2c7ebe3d34a329cbc18dc90e6ad88
msgid "Do not forget to set the right operation id function params."
msgstr ""

#: ../../web3-dev/smart-contracts/smart-contract-example-sum.rst:228
#: bdde0509b2d74d70afbbc00852578121
msgid "Here is an example of what you can find:"
msgstr ""

#~ msgid ""
#~ "Calling function of a smart contract "
#~ "that is stored in the blockchain "
#~ "with some arguments will start an "
#~ "assemblyscript runtime (wasmer). This is "
#~ "why each function that you want to"
#~ " be able to call in your smart"
#~ " contract must be exported with the"
#~ " `export` keyword and must take one"
#~ " string argument and return a value"
#~ " of type string."
#~ msgstr ""

#~ msgid ""
#~ "To send transaction on the network, "
#~ "you need to provide your wallet "
#~ "private key. This is done using "
#~ "environment variable in `.env` file."
#~ msgstr ""

#~ msgid ""
#~ "This command will create a `.env` "
#~ "file. Now fill it with your "
#~ "wallet's private key (also called a "
#~ "\"secret key\" by Massa client)."
#~ msgstr ""

#~ msgid "Massa's smart-contract examples"
#~ msgstr ""

