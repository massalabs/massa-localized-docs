# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-15 00:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/getting-started.rst:6
#: ee2442b5c5434294a0060fbd358086c3
msgid "Getting started"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:8
#: 13abe7d8901c465ba5f98525bb56bd8d
msgid ""
"In this section you will learn how to set up your smart-contract "
"development environment, how to deploy your first Massa smart contract, "
"and how to call that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:12
#: 3142997c1dd548b8999b03e805f39b4d
msgid "Setting up a new project"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:14
#: db6bb3fb75784cf1b920d29007ef3b05
msgid ""
"Make sure you have a recent version of `Node.js <https://nodejs.org/>`_ "
"and `npm <https://www.npmjs.com/>`_. Update or `install "
"<https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_ "
"them if needed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:17
#: db53aba45a8e4c23a46f00cbf9c61752
msgid ""
"`@massalabs/sc-project-initializer <https://github.com/massalabs/massa-"
"sc-toolkit/tree/main/packages/sc-project-initializer>`_ is a tool that "
"creates a boilerplate smart-contract project. To create a smart-contract "
"project, invoke the initializer by running:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:25
#: 8406e604275e4313897cda7ff6ab3d8e
msgid ""
"You now have a npm project, created in `my-sc` folder. It contains all "
"tools that will be used to compile AssemblyScript to Wasm bytecode, as "
"well as deploying and running your smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:28
#: 76dbcab26eec447094bef554b4b38f33
msgid ""
"Congratulations! Now you have a fully set up project and you are ready to"
" add some code."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:32
#: ce1c4ac89f7e43f4add369be37503436
msgid "A few words on project folders:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:34
#: a3952a90580943939d2752b4570527de
msgid "`assembly` is where the AssemblyScript source code goes."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:35
#: 44834790885b469a930b2d5f5773e0dd
msgid ""
"`build` will be created during compilation and will contain compiled "
"smart contracts."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:36
#: 4b49e5484ff345ce903e747e2a8a9b5e
msgid "`src` contains Typescript code used to interact with the network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:39
#: 58dbb1fe4f414b71be2f25762117d74f
msgid "Create your first smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:41
#: 8553abf89aa7494d9eac4ec959c69bdf
msgid ""
"Since the beginning of mankind, humans explain how to use a program, a "
"new language, a service by implementing a *Hello world!*. Your first "
"smart contract will be no exception!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:44
#: 03991466e4cc4934864b25e8e48f5141
msgid ""
"Open the `assembly/contracts/main.ts` file and replace its content by the"
" following one:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:65
#: 798c5167aabd467c84464295ff2fcfd0
msgid ""
"Massa smart contract module (`@massalabs/massa-as-sdk`) contains the API "
"you need to use to interact with the external world of the smart contract"
" (the node, the ledger...)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:68
#: 72644a232e124179a47e531627fde87f
msgid ""
"Don't forget to save the file. Before starting compilation, just a few "
"words to describe what is used here:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:70
#: 5910498c5b49472e96d30924fd8c9442
msgid ""
"line 5: `sayHello` function is exported. This means that the `sayHello` "
"function can be called from outside of the smart contract, for instance "
"by another smart contract, or through the API (see :ref:`massa-web3 <web3"
"-massa-web3>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:72
#: 1931d2f7ee20465db2b02a4bc5281c36
msgid ""
"line 6: `Args` class is used to deserialize arguments' bytecode (see "
":ref:`massa sc types <sc-types>`)."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:73
#: 77665ecfdfeb4f12a039ff2264932f42
msgid ""
"line 10: `generateEvent` function will generate an event with the message"
" string given as argument. Events can be recovered later from the Massa "
"client or through the API."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:76
#: b182451ece784fcbbf70dc1cda1f51fc
msgid ""
"Now that everything is in place, we can start the compilation step by "
"running the following command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:82
#: 11464e739dbc465e84da0c6504bd5b79
msgid ""
"Congratulations! You have generated your first smart contract: the "
"`main.wasm` file in `build` directory."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:86
#: 56ec83aaa1a24516a8369c0788295f82
msgid "If due to bad luck you have an error at compilation time:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:88
#: 343601b9fe1d4da5a0d8087f5a36f07d
msgid "check that you properly followed all the steps,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:89
#: 267ca2a511ce4dd2b79344d36964301e
msgid "do a couple a internet research,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:90
#: aad196c006a248918c2dbdce895a5182
msgid ""
"look for any similar issue (open or closed) in `massa-as-sdk "
"<https://github.com/massalabs/massa-as-sdk/>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:92
#: 8e6a8d6b85c94dcbbc5f070984e05800
msgid ""
"If you find nothing, feel free to contact us on `Discord "
"<https://discord.gg/massa>`_ or directly open an `issue "
"<https://github.com/massalabs/massa-as-sdk/issues>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:96
#: 8e3113eb1bcc40cf9da62dd6f8aab87b
msgid "Deploy your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:98
#: db0b838e550746a4bb7dcf9280310758
msgid ""
"Your smart contract is now ready to be deployed and later executed on the"
" Massa network."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:100
#: 0cea128497324932ac1f003151a8d33b
msgid ""
"Uploading a smart contract on the Massa blockchains requires coins. On "
"top of the usual gas costs, Massa has also :ref:`storage costs <storage-"
"cost>`. In order to deploy your smart contract, you thus need to own a "
"Massa wallet and have some MAS coins on it."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:106
#: 0c8e254bf2cf4e0b9ce5f9838dbacd38
msgid ""
"If you don't have any wallet configured yet, :ref:`create a new one "
"<wallet>`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:107
#: 6123f0f9112f404ba2afdff708bacd13
msgid ""
"If you're using a brand new wallet, add some coins by sending your "
"address to `testnet-faucet discord channel "
"<https://discord.com/channels/828270821042159636/866190913030193172>`_."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:109
#: d997e1091dd1460bb4e23f3e9d7b049a
msgid ""
"In any case, keep the `Address` and `Secret key` of your wallet, you will"
" use it later."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:111
#: ce6544d178474d09ad4c92ab4345ac44
msgid ""
"To pay for the operation cost, you need to configure your project with "
"your wallet's secret key. This is done using the `.env` file. The "
"initializer comes with a template `.env.example` file that you can use:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:118
#: 8b37411bd36d485090ef75f6c1c29806
msgid "Now fill the `WALLET_PRIVATE_KEY` variable with your wallet secret key."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:120
#: 3c4e4e01c8a342c6a688301a304e1909
msgid ""
"You are now ready to deploy your smart contract with the following "
"command:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:126
#: 5de23ec5219542e69f957256feec68f0
msgid ""
"This command will use the node defined in the `JSON_RPC_URL_PUBLIC` "
"variable of your `.env` file to deploy your smart contract. If everything"
" goes as expected, this should produce the following output:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:149
#: b8796b0e26c74f60890614aa89287232
msgid ""
"To facilitate the work of the developer, the `npm run deploy` command "
"will also build your contracts under the hood so you don't have to run "
"`npm run build` yourself."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:152
#: 8e170a0550004ee388ef559cf1672610
msgid ""
"Wait for a few seconds... The last line of the output is the deployed "
"smart contract address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:155
#: 1e355919af6c4d4799f6f9980480d813
msgid "Calling your smart contract"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:157
#: 37be4ff8187f4f728ec454e70a417b28
msgid ""
"Open the `assembly/contracts/run.ts` file and replace its content by the "
"following one."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:197
#: 11f63548a0a04b8e89c690d5e452f00d
msgid ""
"line 7: `constructor` is a special function that is called when the run "
"smart contract is deployed."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:198
#: aca1e78ac3f74e1bbb8544ac2e6ce327
msgid ""
"line 10: we ensure that the caller of this function has the right access "
"on the smart contract. Only the deployer has it. This way, we are sure "
"that the constructor can only be called at the deployment."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:200
#: 11ac8c87baac46a28695a38106917227
msgid ""
"line 21: `callHelloContract` function the `sayHello` function of the "
"smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:201
#: ca6c118077f04ca5ba7eb2e0144a429f
msgid ""
"line 26: `call` function calls the given function of the smart contract, "
"deployed at the given address."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:203
#: 35522481a3ce4e849757ff247109c0ac
msgid ""
"The constructor of this contract expect 1 argument in binary format. This"
" argument is the encoded version of 2 values:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:205
#: 4aa601f48f5c4260a4b1449e17331ea1
msgid "the address of the `main.ts` smart contract,"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:206
#: 48f5e46d0e1041e5b49381f0420b67ab
msgid "the name to pass to the `sayHello` function of that smart contract."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:208
#: 2b4fc8f170a7498083a8524e9a3ece18
msgid ""
"Now let's have a look at the deployer script `src/deployer.ts` and stop "
"at the `deploySC` instruction."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:210
#: 67bc76085ce6415097d0e0f0d7f36612
msgid "Modify the line 26:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:216
#: c83bc1ff71954db09aeebf8591aa149b
msgid "Add the import of IEvent at the beginning of the file."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:222
#: 34087e3e674545448413849b697cbbd1
msgid "Add this code snippet after the call to the `deploySC` function:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:245
#: 1c25c22331aa424ab2dea7266f25c909
msgid ""
"The function `deploySC` lets us set the smart contract to be deployed "
"when running `npm run deploy`."
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:247
#: 123f57f1bc844fb9941bb12e84bed5ce
msgid ""
"line 50: we specify the arguments to pass to the `constructor` function. "
"Let's also `Bob` used as an argument by your name so that it will be "
"passed to the `sayHello` function of our smart contract!"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:250
#: c86a7ef2c94d40a7b01f8e99b05eaee8
msgid "We are now ready to deploy our run smart contract:"
msgstr ""

#: ../../web3-dev/smart-contracts/getting-started.rst:256
#: a09557c053324b0abc1d0f12c5a35be7
msgid "The output should looks like the following:"
msgstr ""

#~ msgid ""
#~ "Make sure you have a recent "
#~ "version of `Node.js <https://nodejs.org/>`_  "
#~ "and `npm <https://www.npmjs.com/>`_ . Update"
#~ " or `install <https://docs.npmjs.com/downloading-"
#~ "and-installing-node-js-and-npm>`_ "
#~ "them if needed."
#~ msgstr ""

#~ msgid "On ubuntu, an easy way to install Node.js is with snap"
#~ msgstr ""

#~ msgid "On MacOS & Windows, use nvm:"
#~ msgstr ""

#~ msgid "Follow the instructions here:"
#~ msgstr ""

#~ msgid "[MacOS] `nvm <https://github.com/nvm-sh/nvm>`_"
#~ msgstr ""

#~ msgid "[Windows] `nvm-windows <https://github.com/coreybutler/nvm-windows>`_"
#~ msgstr ""

#~ msgid ""
#~ "Massa smart-contract module (@massalabs"
#~ "/massa-as-sdk) contains the API you"
#~ " need to use to interact with "
#~ "the external world of the smart "
#~ "contract (the node, the ledger...)."
#~ msgstr ""

#~ msgid ""
#~ "Since the beginning of mankind, humans"
#~ " explain how to use a program, "
#~ "a new language, a service by "
#~ "implementing a *Hello world!*."
#~ msgstr ""

#~ msgid "Your first smart contract will be no exception!"
#~ msgstr ""

#~ msgid ""
#~ "I'm told that it has nothing to"
#~ " do with the beginning of mankind "
#~ "but Brian Kernighan used it for "
#~ "the first time in *a tutorial "
#~ "introduction to the language B* "
#~ "published in 1972."
#~ msgstr ""

#~ msgid ""
#~ "Don’t forget to save the file. "
#~ "Before starting compilation, just a few"
#~ " words to describe what is used "
#~ "here:"
#~ msgstr ""

#~ msgid ""
#~ "If you are using an existing "
#~ "wallet, make sure that you have "
#~ "some coins on it."
#~ msgstr ""

#~ msgid ""
#~ "In any case, keep the `address` "
#~ "and `private_key` of your wallet, you"
#~ " will use it later."
#~ msgstr ""

#~ msgid ""
#~ "There are two ways you can deploy"
#~ " your smart contract. The easiest and"
#~ " the recommended way is to deploy "
#~ "the smart contract with the smart-"
#~ "contract toolkit (Option 1 below)."
#~ msgstr ""

#~ msgid ""
#~ "The second option is to deploy the"
#~ " smart contract, through Massa client, "
#~ "by running your own node (Option "
#~ "2)."
#~ msgstr ""

#~ msgid ""
#~ "To send the transaction on the "
#~ "network, you need to provide your "
#~ "wallet's private key. This is done "
#~ "using environment variable in `.env` "
#~ "file."
#~ msgstr ""

#~ msgid ""
#~ "This command will create a `.env` "
#~ "file. Now fill it with your wallet"
#~ " private key."
#~ msgstr ""

#~ msgid ""
#~ "In this section you will learn how"
#~ " to compile your first Massa smart"
#~ " contract."
#~ msgstr ""

#~ msgid ""
#~ "`massa-sc-toolkit <https://github.com/massalabs"
#~ "/massa-sc-toolkit/>`_ is a tool that"
#~ " creates a boilerplate smart-contract "
#~ "project. To create a smart-contract "
#~ "project, invoke the toolkit by running:"
#~ msgstr ""

#~ msgid ""
#~ "You have now npm project created "
#~ "with AssemblyScript installed among other "
#~ "dependencies. It will be used to "
#~ "generate bytecode from AssemblyScript code."
#~ msgstr ""

#~ msgid ""
#~ "Massa smart-contract module (`@massalabs"
#~ "/massa-as-sdk`) contains the API you"
#~ " need to use to interact with "
#~ "the external world of the smart "
#~ "contract (the node, the ledger...)."
#~ msgstr ""

#~ msgid "`assembly` is where the code goes;"
#~ msgstr ""

#~ msgid ""
#~ "Open the `main.ts` file in the "
#~ "`assembly` directory at the root of "
#~ "your project. Replace the code in "
#~ "the file by the following code:"
#~ msgstr ""

#~ msgid ""
#~ "line 1: `generateEvent` function is "
#~ "imported from Massa SDK (@massalabs/massa-"
#~ "as-sdk). This function will generate "
#~ "an event with the string given as"
#~ " argument. Events can be later "
#~ "recovered using a Massa client."
#~ msgstr ""

#~ msgid ""
#~ "line 3: `main` function is exported. "
#~ "This means that the main function "
#~ "will be callable from the outside "
#~ "of the WebAssembly module (more about"
#~ " that later)."
#~ msgstr ""

#~ msgid ""
#~ "line 4: `generateEvent` function is "
#~ "called with \"Hello world!\". Brian, we"
#~ " are thinking of you!"
#~ msgstr ""

#~ msgid ""
#~ "Congratulations! You have generated your "
#~ "first smart contract: the `main.wasm` "
#~ "file in `build` directory. Note that "
#~ "a `deployer.wasm` file has also been "
#~ "generated. It will be used to "
#~ "deploy your contract on Massa network."
#~ msgstr ""

#~ msgid ""
#~ "Your smart contract is now ready "
#~ "to be pushed and executed on the"
#~ " Massa network. In order to deploy"
#~ " it, you need to own a Massa"
#~ " wallet and some MAS coins on "
#~ "it."
#~ msgstr ""

#~ msgid ""
#~ "There are two ways you can deploy"
#~ " your smart contract. The easiest and"
#~ " the recommended way is to deploy "
#~ "the smart contract with the smart-"
#~ "contract toolkit (:ref:`Option 1 <sc-"
#~ "option-1>` below)."
#~ msgstr ""

#~ msgid ""
#~ "The second option is to deploy the"
#~ " smart contract, through Massa client, "
#~ "by running your own node (:ref:`Option"
#~ " 2 <sc-option-2>`)."
#~ msgstr ""

#~ msgid "Option 1: Deploy your smart contract from the toolkit"
#~ msgstr ""

#~ msgid ""
#~ "To send the transaction on the "
#~ "network, you need to provide your "
#~ "wallet's secret key. This is done "
#~ "using environment variable in `.env` "
#~ "file."
#~ msgstr ""

#~ msgid ""
#~ "This command will create a `.env` "
#~ "file. Now fill it with your wallet"
#~ " secret key."
#~ msgstr ""

#~ msgid "Then run the following command:"
#~ msgstr ""

#~ msgid ""
#~ "Wait for a few seconds... It "
#~ "should return you the deployed smart "
#~ "contract address."
#~ msgstr ""

#~ msgid "Option 2: Execute your smart contract on your own node"
#~ msgstr ""

#~ msgid "To execute the smart contract you will need:"
#~ msgstr ""

#~ msgid "A client configured with an address having coins."
#~ msgstr ""

#~ msgid "A smart contract compiled in WebAssembly (see previous step)."
#~ msgstr ""

#~ msgid "Let's go!"
#~ msgstr ""

#~ msgid "Configure the client"
#~ msgstr ""

#~ msgid ""
#~ "Make sure that you have the latest"
#~ " version of the Massa node. If "
#~ "not, :ref:`install it <testnet-install>` "
#~ "and :ref:`run it <testnet-running>`."
#~ msgstr ""

#~ msgid ""
#~ "You can also execute your smart-"
#~ "contract on a local sandbox node. "
#~ "To learn more about sandbox node, "
#~ "follow this tutorial: :ref:`Local network "
#~ "generation <local-network-generation>`."
#~ msgstr ""

#~ msgid "Execute the smart contract on the node"
#~ msgstr ""

#~ msgid ""
#~ "Everything is in place, we can now"
#~ " execute the `hello world` smart "
#~ "contract on your local node with "
#~ "the following command inside the "
#~ "**client cli**:"
#~ msgstr ""

#~ msgid "We are executing the send_smart_contract command with 6 parameters:"
#~ msgstr ""

#~ msgid "<address>: the address of your wallet kept during previous step;"
#~ msgstr ""

#~ msgid ""
#~ "<path to wasm file>: the full path"
#~ " (from the root directory to the "
#~ "file extension .wasm) of the hello "
#~ "smart contract, generated in the "
#~ "previous chapter."
#~ msgstr ""

#~ msgid ""
#~ "100000: the maximum amount of gas "
#~ "that the execution of your smart "
#~ "contract is allowed to use."
#~ msgstr ""

#~ msgid ""
#~ "Two 0 parameters that can be "
#~ "safely ignored by now. If you want"
#~ " more info on them, use the "
#~ "command `help send_smart_contract`."
#~ msgstr ""

#~ msgid ""
#~ "To go inside the **client cli**, "
#~ "open a terminal in `massa/massa-client`"
#~ " directory and run `cargo run`."
#~ msgstr ""

#~ msgid "If everything went fine, the following message should be prompted:"
#~ msgstr ""

#~ msgid ""
#~ "In that case, you should be able"
#~ " to retrieve the event with the "
#~ "`Hello world` emitted. Use the following"
#~ " command inside the **client cli**:"
#~ msgstr ""

#~ msgid "If everything went well you should see a message similar to this one:"
#~ msgstr ""

#~ msgid "Congratulations! You have just executed your first smart contract!"
#~ msgstr ""

#~ msgid ""
#~ "line 3: `sayHello` function is exported."
#~ " This means that the `sayHello` "
#~ "function can be called from outside "
#~ "of the smart contract. For instance "
#~ "by another smart contract or through "
#~ "the API (see :ref:`massa-web3 <web3"
#~ "-massa-web3>`)."
#~ msgstr ""

#~ msgid ""
#~ "line 5: `Args` class is used to"
#~ " deserialize arguments' bytecode (see "
#~ ":ref:`massa sc types <sc-types>`)."
#~ msgstr ""

#~ msgid ""
#~ "line 7: `generateEvent` function will "
#~ "generate an event with the message "
#~ "string given as argument. Events can "
#~ "be recovered later from the Massa "
#~ "client or through the API."
#~ msgstr ""

#~ msgid ""
#~ "To pay for the operation cost, you"
#~ " need to configure your project with"
#~ " your wallet's secret key. This is"
#~ " done using the `.env` file. The "
#~ "initializer comes with a template `.env`"
#~ " file that you can use:"
#~ msgstr ""

#~ msgid ""
#~ "If everythings goes as expected, this"
#~ " should produce the following output:"
#~ msgstr ""

#~ msgid ""
#~ "To facilitate the work of the "
#~ "developer, the `npm run deploy` command"
#~ " will also build your contracts "
#~ "underthehood so you don't have to "
#~ "run `npm run build` yourself."
#~ msgstr ""

#~ msgid ""
#~ "Wait for a few seconds... The last"
#~ " line of the output is the "
#~ "deployed smart contract address. Save it"
#~ " somewhere, it will be used in "
#~ "the next step."
#~ msgstr ""

#~ msgid ""
#~ "Open the `assembly/contracts/run.ts` file and"
#~ " replace its content by the following"
#~ " one. Then replace `<your contract "
#~ "address>` by the address of the "
#~ "deployed contract that you obtained in"
#~ " the previous step."
#~ msgstr ""

#~ msgid ""
#~ "line 4: `constructor` is a special "
#~ "function that is called when the "
#~ "run smart contract is deployed."
#~ msgstr ""

#~ msgid ""
#~ "line 9: `callHelloContract` function "
#~ "initialises an Address object using the"
#~ " address of the deployed smart "
#~ "contract and then calls the `sayHello`"
#~ " function of the smart contract."
#~ msgstr ""

#~ msgid ""
#~ "line 13: `call` function calls the "
#~ "given function of the smart contract,"
#~ " deployed at the given address."
#~ msgstr ""

#~ msgid "Now that everything is ready, we have to build our new contract:"
#~ msgstr ""

#~ msgid ""
#~ "The `npm run build` command will "
#~ "build every smart contract in the "
#~ "folder `assembly/contracts`."
#~ msgstr ""

#~ msgid ""
#~ "This function lets us set the "
#~ "smart contract to be deployed when "
#~ "running `npm run deploy`. It also "
#~ "allows us to pass arguments to the"
#~ " call to the `constructor` function. "
#~ "Let's modify the code in order to"
#~ " deploy our run smart contract by "
#~ "replacing `main.wasm` by `run.wasm`. Let's "
#~ "also replace the `test` string used "
#~ "as an argument by our name so "
#~ "that it will be passed to the "
#~ "`sayHello` function of our smart "
#~ "contract!"
#~ msgstr ""

#~ msgid ""
#~ "That's it! After a few seconds you"
#~ " should see the \"Hello world! "
#~ "Greetings from <Name> 👋`\" message "
#~ "coming from the contract's event."
#~ msgstr ""

#~ msgid ""
#~ "Make sure you have a recent "
#~ "version of `Node.js <https://nodejs.org/>`_  "
#~ "and `npm <https://www.npmjs.com/>`_. Update or"
#~ " `install <https://docs.npmjs.com/downloading-and-"
#~ "installing-node-js-and-npm>`_ them "
#~ "if needed."
#~ msgstr ""

#~ msgid ""
#~ "You are now ready to deploy you"
#~ " smart contract with the following "
#~ "command:"
#~ msgstr ""

#~ msgid ""
#~ "If everything goes as expected, this "
#~ "should produce the following output:"
#~ msgstr ""

