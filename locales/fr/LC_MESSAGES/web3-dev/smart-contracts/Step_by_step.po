# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-05 11:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/Step_by_step.rst:2
#: 447c09bf47d74a24b5bd6379304210c8
msgid "Web 3 autonomous game tutorial, Step by Step!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:5
#: 03af956ae8274b1197b11ec168cfd3be
msgid "Intro"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:7
#: 1de7d864a3a042609597f07c09aca6ce
msgid ""
"In this tutorial, we will see how to step by step develop a web3 "
"autonomous video game based on cats living autonomously on the Massa "
"blockchain. Idea is simple : a user creates a cat, and have to feed him "
"with massa tokens in order to avoid starving and death ! The cat has to "
"eat periodically."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:9
#: db95d028362d426bb48e580ebbb767b3
msgid ""
"Each cat is technically a smart contract deployed on the Massa "
"blockchain. We will see how to set this smart contract autonomous in "
"order to allows it to carry out actions by itself."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:13
#: 147945e7e50e431d92938abb7bd0bf4a
msgid "1) How to create and deploy a cat"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:15
#: c68b8f7d595a4c0c9a8e39d85d208e77
msgid ""
"First of all, we need to create and deploy on the blockchain the smart "
"contracts for each cat using 2 scripts :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:17
#: 2748ecab0f624f8c8ee0b3631e8571d7
msgid "main.ts : will allow us to deploy the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:18
#: e556e8eaa2b44cbc97845e81cb10704e
msgid "cat.ts : will manage all behaviour of the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:21
#: aa04ce9cfd3a481ab55260e2521acedb
msgid "The main.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:50
#: ../../web3-dev/smart-contracts/Step_by_step.rst:132
#: 5e0f55c60eff4c95b3ad1c1faafe5a7b b3481a0ffa3044eca5f7fff68a2bbcb4
msgid "Code analysis :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:52
#: a86dc78d2a234d7394024a97cb5e2adf
msgid "Let's see line by line what is going on :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:54
#: f085dcd91d0842828874c2e9e0361fe1
msgid "Import Massalabs library :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:60
#: 84683e091cab4720817508cb7ef3e2b2
msgid ""
"==> The goal of this line is to import from the \"massalabs/massa-as-"
"sdk\" library the functions that we will be used : { createSC, "
"fileToByteArray, Storage, Context, generateEvent, call}"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:63
#: 7a186dc9d8574f91a5a50a838ef6fb79
msgid "main() function to execute the script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:72
#: 243881e95f064faf80a98338625ed6b7
msgid ""
"==> This step declares the function main() that will be executed on the "
"blockchain. Inside the function we can find :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:74
#: 6074d4a6d7754b29b00ef9d5af6532cf
msgid ""
"const bytes: StaticArray<u8> = fileToByteArray('./build/cat.wasm'); ==> "
"in order to create the binary code from the \"cat.wasm\" file and store "
"it into the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:75
#: 0ee83cccd33f42edabc9cba15679bd6f
msgid ""
"let addr = createSC(bytes); ==> in order to instanciate the addr variable"
" and deploy the smart contract of the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:76
#: 74de1e26c3774cfcb2b424b08f10c837
msgid ""
"generateEvent(\"A new cat is born! Address of the cat : \" + "
"addr.toByteString()); ==> will just send a message on the client with the"
" smart contract address, using the function generateEvent(\"Message\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:79
#: 24753dc0a66040cd91105042bf18d51d
msgid "Define the attributes of the new cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:89
#: afcc68a88cd04cb78895bc84e013179c
msgid ""
"==> Using the Storage.setOf() function, we can set different attributes "
"as : the name of the cat, the current state of the cat, etc."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:91
#: 287f79f1739246ea82a54c47e75b73db
msgid ""
"Storage.setOf() will technically create a key owned by the smart contract"
" only :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:93
#: 435e3278c1f94de6834a4a19f4154528
msgid ""
"You can change the value of the key using : "
"Storage.setOf(toBytes(\"key\"), toBytes(\"value\"))."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:94
#: 0da18c09a61045d1a4a520db253f2647
msgid "You can get the value of the key using : Storage.getOf(toBytes(\"key\"))."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:96
#: c415cd2483554531972303a126e2d552
msgid "Using the Context.timestamp() function, we can get the current timestamp."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:99
#: 0befec39fd6443fc8319cdf7a57a0650
msgid "Get information from the cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:110
#: bf7aa0ce8da44133ac7c459f06982acc
msgid ""
"==> We can print the cat information into the client using the function "
"generateEvent(\"Message\") and using the call() function."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:112
#: f167d7f5f72e4200b6a25288411cf7ad
msgid ""
"The call() function allows us to call the functions defined into our cat "
"smart contract knowing the address of this one and should be used like :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:114
#: b7e0fe73e3b846ada5395b91541b3ad6
msgid ""
"call(address_of_the_smart_contract_to_call, \"function_to_call\", params,"
" tokens_to_send_during_the_call)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:118
#: 2ff9bd9ac9b547c1b95aad958faa8ac2
msgid "The cat.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:134
#: c1dc0bda324345caaa8f5942728e8a08
msgid ""
"When the main.ts script is executed for the first time, we declared keys "
"like \"name\", \"birth\" etc with specific values. In order to create the"
" game, we need those keys avaible at each time by someone, or an another "
"smart contract. Thus, we can do it declaring functions callable using : "
"\"export function my_function()\""
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:143
#: fbcb86a1df70423b9f6534226e18f1fa
msgid ""
"==> for instance here we declare into the cat smart contract a callable "
"function named \"get_name\" that will return a StaticArray<u8> with the "
"value of the key \"name\"."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:145
#: 3f08fb186c494313be842b5e16d187d5
msgid ""
"Thus, any smart contract will be able to get the name of the cat using a "
"call() function :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:147
#: 5ba256fac7274ac6bd8063545885408b
msgid "call(address_of_the_cat, \"get_name\", new StaticArray<u8>(0), 0)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:150
#: 1f1d59a791c446dbafbb6a3c64cf6c38
msgid "Lets try our code!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:152
#: 991e8e533f60460595ef68821c73b80e
msgid "Just compile your main.ts file in the terminal using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:161
#: 04ea3dbb6c35452d935f963fac91e3fe
msgid "Make sure your file \"my-sc/package.json\" is written as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:186
#: 708c922244024a66b47c2bbcca5b5128
msgid ""
"Copy the file \"main.wasm\" from my-sc/build/main.wasm to massa/massa-"
"client/main.wasm using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:193
#: c27c9880c37d4b1e87e12d852e5464ab
msgid ""
"Send the smart contract on the blockchain massa using into the massa "
"client the following command :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:199
#: 7f95e09137274bac94ef3ff2e12fe530
msgid ""
"And get the events sent by \"generateEvent()\" function used in our "
"script. You can filter them by your emitter address using the following "
"command into the client :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:205
#: 3357303c6a074b2e9fdfe668a47ba0f7
msgid "You should get as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:232
#: d856a1a4b646419790418db96dc52765
msgid "2) How to feed him with tokens"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:235
#: adcf369993504fc3ad46a43bea1ef696
msgid "3) How to set him autonomous"
msgstr ""

#~ msgid ""
#~ "==> The goal of this line is "
#~ "to import from the \"massalabs/massa-"
#~ "as-sdk\" library the functions that "
#~ "we will be used : { createSC, "
#~ "fileToBase64, Storage, Context, generateEvent, "
#~ "call}"
#~ msgstr ""

#~ msgid ""
#~ "const bytes = fileToBase64('./build/cat.wasm'); "
#~ "==> in order to create the binary"
#~ " code from the \"cat.wasm\" file and"
#~ " store it into the bytes variable."
#~ msgstr ""

#~ msgid ""
#~ "You can change the value of the"
#~ " key using : Storage.setOf(\"key\",\"value\")."
#~ msgstr ""

#~ msgid "You can get the value of the key using : Storage.getOf(\"key\")."
#~ msgstr ""

#~ msgid ""
#~ "call(address_of_the_smart_contract_to_call, "
#~ "\"function_to_call\", \"parameters_of_the_function\", "
#~ "tokens_to_send_during_the_call)"
#~ msgstr ""

#~ msgid ""
#~ "==> for instance here we declare "
#~ "into the cat smart contract a "
#~ "callable function named \"get_name\" that "
#~ "will return a string with the "
#~ "value of the key \"name\"."
#~ msgstr ""

#~ msgid "call(address_of_the_cat, \"get_name\", \"\", 0)"
#~ msgstr ""

