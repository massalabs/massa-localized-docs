# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Massa Labs
# This file is distributed under the same license as the Massa Localized
# Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Massa Localized Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-29 10:50+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../web3-dev/smart-contracts/Step_by_step.rst:2
#: a3990aaf9f2945b79e188c6077c4f787
msgid "Web 3 autonomous game tutorial, Step by Step!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:5
#: 6a6db869b94e41b59e521642a9538780
msgid "Intro"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:7
#: a89940a4a5734d5591d4578e8630aac1
msgid ""
"In this tutorial, we will see how to step by step develop a web3 "
"autonomous video game based on cats living autonomously on the Massa "
"blockchain. Idea is simple : a user creates a cat, and have to feed him "
"with massa tokens in order to avoid starving and death ! The cat has to "
"eat periodically."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:9
#: 37aef1f73fc44b9585f8076279b77d97
msgid ""
"Each cat is technically a smart contract deployed on the Massa "
"blockchain. We will see how to set this smart contract autonomous in "
"order to allows it to carry out actions by itself."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:13
#: c682c5adf5714c9d919527170a5777da
msgid "1) How to create and deploy a cat"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:15
#: b68de40c3e2f411ca42f20ceea97db9b
msgid ""
"First of all, we need to create and deploy on the blockchain the smart "
"contracts for each cat using 2 scripts :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:17
#: 06885a683b5042bc8263c26cf8c6dff5
msgid "main.ts : will allow us to deploy the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:18
#: d2b221e653264d3898f2cf5c5a77e759
msgid "cat.ts : will manage all behaviour of the smart contract of the cat."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:21
#: 19290cfbe18944f9a79ff44d1f04ac4c
msgid "The main.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:50
#: ../../web3-dev/smart-contracts/Step_by_step.rst:132
#: c71b4b7fee69419d9f07bb7b2c587cda f5f96a473e08411a97568519642cbd76
msgid "Code analysis :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:52
#: fb319662542243ae8fdd5d6518ce23eb
msgid "Let's see line by line what is going on :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:54
#: 5a27c11a8105441d91112de34724761e
msgid "Import Massalabs library :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:60
#: 5b3e23aa2e7342ad893eb971e32c4cd1
msgid ""
"==> The goal of this line is to import from the \"massalabs/massa-as-"
"sdk\" library the functions that we will be used : { createSC, "
"fileToBase64, Storage, Context, generateEvent, call}"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:63
#: 779cec8ed1074ab8a56b30d87ef46d43
msgid "main() function to execute the script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:72
#: 2651922992004255977aebff6de542ed
msgid ""
"==> This step declares the function main() that will be executed on the "
"blockchain. Inside the function we can find :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:74
#: 971edfbae95548debea9ef9ab6b4325f
msgid ""
"const bytes = fileToBase64('./build/cat.wasm'); ==> in order to create "
"the binary code from the \"cat.wasm\" file and store it into the bytes "
"variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:75
#: 05764ab56829473480cded2e24ed4897
msgid ""
"let addr = createSC(bytes); ==> in order to instanciate the addr variable"
" and deploy the smart contract of the bytes variable."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:76
#: 32c842b932c240c592a89724198491d0
msgid ""
"generateEvent(\"A new cat is born! Address of the cat : \" + "
"addr.toByteString()); ==> will just send a message on the client with the"
" smart contract address, using the function generateEvent(\"Message\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:79
#: 80820c380508401d8ebd8bda617dc3e8
msgid "Define the attributes of the new cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:89
#: 1abb4dd7182f42369f85f3d783bd0afa
msgid ""
"==> Using the Storage.setOf() function, we can set different attributes "
"as : the name of the cat, the current state of the cat, etc."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:91
#: 3d76a98b9776402ba47da7ba7b80d4aa
msgid ""
"Storage.setOf() will technically create a key owned by the smart contract"
" only :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:93
#: 6a4165a00f8c43bc944816efc823f23d
msgid ""
"You can change the value of the key using : "
"Storage.setOf(\"key\",\"value\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:94
#: 9639cb0430e74e98a238ca60e0e48d94
msgid "You can get the value of the key using : Storage.getOf(\"key\")."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:96
#: 18c317ea28bc4c2b84a5c906fe9ddafd
msgid "Using the Context.timestamp() function, we can get the current timestamp."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:99
#: 358b4f68750b41608e6389befec40853
msgid "Get information from the cat :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:110
#: 833bd9319cbc40199494a4423af07d78
msgid ""
"==> We can print the cat information into the client using the function "
"generateEvent(\"Message\") and using the call() function."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:112
#: 60dd27d12b8c4e78a45c737fc632429c
msgid ""
"The call() function allows us to call the functions defined into our cat "
"smart contract knowing the address of this one and should be used like :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:114
#: a6c5808ceab644d79e3253278cdd597e
msgid ""
"call(address_of_the_smart_contract_to_call, \"function_to_call\", "
"\"parameters_of_the_function\", tokens_to_send_during_the_call)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:118
#: f6a1429bac8448878f3dbd3464dc3922
msgid "The cat.ts script :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:134
#: 5f5fd7d027b540269faa008bc297570d
msgid ""
"When the main.ts script is executed for the first time, we declared keys "
"like \"name\", \"birth\" etc with specific values. In order to create the"
" game, we need those keys avaible at each time by someone, or an another "
"smart contract. Thus, we can do it declaring functions callable using : "
"\"export function my_function()\""
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:143
#: fbf49d7134084eed82961e03a996f848
msgid ""
"==> for instance here we declare into the cat smart contract a callable "
"function named \"get_name\" that will return a string with the value of "
"the key \"name\"."
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:145
#: 7cba1c1b5bb04fe595bec287a8d0fb69
msgid ""
"Thus, any smart contract will be able to get the name of the cat using a "
"call() function :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:147
#: e6589c7b52b441719503ff540f0c8b09
msgid "call(address_of_the_cat, \"get_name\", \"\", 0)"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:150
#: a70734e5e3854ac3868cf46686fad262
msgid "Lets try our code!"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:152
#: 88fda744db954e6f85343933c72b469c
msgid "Just compile your main.ts file in the terminal using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:161
#: dcf69f7d55904665ad95a8a1c2c6d331
msgid "Make sure your file \"my-sc/package.json\" is written as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:186
#: 4c32a999300f4f8e9579162d7c9d4db7
msgid ""
"Copy the file \"main.wasm\" from my-sc/build/main.wasm to massa/massa-"
"client/main.wasm using :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:193
#: 5159dfcaa71f455d89e61f9521002726
msgid ""
"Send the smart contract on the blockchain massa using into the massa "
"client the following command :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:199
#: d542d4f2751448e4836b7a1219102c84
msgid ""
"And get the events sent by \"generateEvent()\" function used in our "
"script. You can filter them by your emitter address using the following "
"command into the client :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:205
#: 4da7ae5a91234dca9d430ebb583758b4
msgid "You should get as following :"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:232
#: 5e9787a5d07247cfb88924f6e314ad58
msgid "2) How to feed him with tokens"
msgstr ""

#: ../../web3-dev/smart-contracts/Step_by_step.rst:235
#: f0d1d76fc61240ad983f0ca3851dcf77
msgid "3) How to set him autonomous"
msgstr ""

